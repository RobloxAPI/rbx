// This file was generated by tools/generate. DO NOT EDIT!

package enum

import (
	"github.com/robloxapi/rbx"
)

var list = []rbx.Enum{
	_ActionType{},
	_ActuatorRelativeTo{},
	_ActuatorType{},
	_AlignType{},
	_AnimationPriority{},
	_AppShellActionType{},
	_AspectType{},
	_AssetFetchStatus{},
	_AssetType{},
	_AvatarContextMenuOption{},
	_AvatarJointPositionType{},
	_Axis{},
	_BinType{},
	_BodyPart{},
	_BodyPartR15{},
	_BorderMode{},
	_BreakReason{},
	_Button{},
	_ButtonStyle{},
	_CameraMode{},
	_CameraPanMode{},
	_CameraType{},
	_CellBlock{},
	_CellMaterial{},
	_CellOrientation{},
	_CenterDialogType{},
	_ChatCallbackType{},
	_ChatColor{},
	_ChatMode{},
	_ChatPrivacyMode{},
	_ChatStyle{},
	_CollisionFidelity{},
	_ComputerCameraMovementMode{},
	_ComputerMovementMode{},
	_ConnectionError{},
	_ConnectionState{},
	_ContextActionPriority{},
	_ContextActionResult{},
	_ControlMode{},
	_CoreGuiType{},
	_CreatorType{},
	_CurrencyType{},
	_CustomCameraMode{},
	_DataStoreRequestType{},
	_DateTimeKind{},
	_DevCameraOcclusionMode{},
	_DevComputerCameraMovementMode{},
	_DevComputerMovementMode{},
	_DevTouchCameraMovementMode{},
	_DevTouchMovementMode{},
	_DeveloperMemoryTag{},
	_DeviceType{},
	_DialogBehaviorType{},
	_DialogPurpose{},
	_DialogTone{},
	_DominantAxis{},
	_DraftStatusCode{},
	_EasingDirection{},
	_EasingStyle{},
	_ElasticBehavior{},
	_EnviromentalPhysicsThrottle{},
	_ExplosionType{},
	_FillDirection{},
	_FilterResult{},
	_Font{},
	_FontSize{},
	_FormFactor{},
	_FrameStyle{},
	_FramerateManagerMode{},
	_FriendRequestEvent{},
	_FriendStatus{},
	_FunctionalTestResult{},
	_GameAvatarType{},
	_GearGenreSetting{},
	_GearType{},
	_Genre{},
	_GraphicsMode{},
	_HandlesStyle{},
	_HorizontalAlignment{},
	_HoverAnimateSpeed{},
	_HttpCachePolicy{},
	_HttpContentType{},
	_HttpError{},
	_HttpRequestType{},
	_HumanoidCollisionType{},
	_HumanoidDisplayDistanceType{},
	_HumanoidHealthDisplayType{},
	_HumanoidRigType{},
	_HumanoidStateType{},
	_InOut{},
	_InfoType{},
	_InitialDockState{},
	_InlineAlignment{},
	_InputType{},
	_JointCreationMode{},
	_KeyCode{},
	_KeywordFilterType{},
	_Language{},
	_LanguagePreference{},
	_LeftRight{},
	_LevelOfDetailSetting{},
	_Limb{},
	_ListDisplayMode{},
	_ListenerType{},
	_Material{},
	_MembershipType{},
	_MeshType{},
	_MessageType{},
	_ModifierKey{},
	_MouseBehavior{},
	_MoveState{},
	_NameOcclusion{},
	_NetworkOwnership{},
	_NormalId{},
	_OutputLayoutMode{},
	_OverrideMouseIconBehavior{},
	_PacketPriority{},
	_PartType{},
	_PathStatus{},
	_PathWaypointAction{},
	_PermissionLevelShown{},
	_Platform{},
	_PlaybackState{},
	_PlayerActions{},
	_PlayerChatType{},
	_PoseEasingDirection{},
	_PoseEasingStyle{},
	_PrivilegeType{},
	_ProductPurchaseDecision{},
	_QualityLevel{},
	_R15CollisionType{},
	_RenderFidelity{},
	_RenderPriority{},
	_RenderingTestComparisonMethod{},
	_ReturnKeyType{},
	_ReverbType{},
	_RibbonTool{},
	_RollOffMode{},
	_RotationType{},
	_RuntimeUndoBehavior{},
	_SaveFilter{},
	_SavedQualitySetting{},
	_ScaleType{},
	_ScreenOrientation{},
	_ScrollBarInset{},
	_ScrollingDirection{},
	_ServerAudioBehavior{},
	_SizeConstraint{},
	_SortOrder{},
	_SoundType{},
	_SpecialKey{},
	_StartCorner{},
	_Status{},
	_StreamingPauseMode{},
	_StudioDataModelType{},
	_StudioStyleGuideColor{},
	_StudioStyleGuideModifier{},
	_Style{},
	_SurfaceConstraint{},
	_SurfaceGuiSizingMode{},
	_SurfaceType{},
	_SwipeDirection{},
	_TableMajorAxis{},
	_Technology{},
	_TeleportResult{},
	_TeleportState{},
	_TeleportType{},
	_TextFilterContext{},
	_TextInputType{},
	_TextTruncate{},
	_TextXAlignment{},
	_TextYAlignment{},
	_TextureMode{},
	_TextureQueryType{},
	_ThreadPoolConfig{},
	_ThrottlingPriority{},
	_ThumbnailSize{},
	_ThumbnailType{},
	_TickCountSampleMethod{},
	_TopBottom{},
	_TouchCameraMovementMode{},
	_TouchMovementMode{},
	_TweenStatus{},
	_UITheme{},
	_UiMessageType{},
	_UploadSetting{},
	_UserCFrame{},
	_UserInputState{},
	_UserInputType{},
	_VRTouchpad{},
	_VRTouchpadMode{},
	_VerticalAlignment{},
	_VerticalScrollBarPosition{},
	_VibrationMotor{},
	_VideoQualitySettings{},
	_VirtualInputMode{},
	_WaterDirection{},
	_WaterForce{},
	_ZIndexBehavior{},
}

var enums = map[string]rbx.Enum{
	"ActionType":                    _ActionType{},
	"ActuatorRelativeTo":            _ActuatorRelativeTo{},
	"ActuatorType":                  _ActuatorType{},
	"AlignType":                     _AlignType{},
	"AnimationPriority":             _AnimationPriority{},
	"AppShellActionType":            _AppShellActionType{},
	"AspectType":                    _AspectType{},
	"AssetFetchStatus":              _AssetFetchStatus{},
	"AssetType":                     _AssetType{},
	"AvatarContextMenuOption":       _AvatarContextMenuOption{},
	"AvatarJointPositionType":       _AvatarJointPositionType{},
	"Axis":                          _Axis{},
	"BinType":                       _BinType{},
	"BodyPart":                      _BodyPart{},
	"BodyPartR15":                   _BodyPartR15{},
	"BorderMode":                    _BorderMode{},
	"BreakReason":                   _BreakReason{},
	"Button":                        _Button{},
	"ButtonStyle":                   _ButtonStyle{},
	"CameraMode":                    _CameraMode{},
	"CameraPanMode":                 _CameraPanMode{},
	"CameraType":                    _CameraType{},
	"CellBlock":                     _CellBlock{},
	"CellMaterial":                  _CellMaterial{},
	"CellOrientation":               _CellOrientation{},
	"CenterDialogType":              _CenterDialogType{},
	"ChatCallbackType":              _ChatCallbackType{},
	"ChatColor":                     _ChatColor{},
	"ChatMode":                      _ChatMode{},
	"ChatPrivacyMode":               _ChatPrivacyMode{},
	"ChatStyle":                     _ChatStyle{},
	"CollisionFidelity":             _CollisionFidelity{},
	"ComputerCameraMovementMode":    _ComputerCameraMovementMode{},
	"ComputerMovementMode":          _ComputerMovementMode{},
	"ConnectionError":               _ConnectionError{},
	"ConnectionState":               _ConnectionState{},
	"ContextActionPriority":         _ContextActionPriority{},
	"ContextActionResult":           _ContextActionResult{},
	"ControlMode":                   _ControlMode{},
	"CoreGuiType":                   _CoreGuiType{},
	"CreatorType":                   _CreatorType{},
	"CurrencyType":                  _CurrencyType{},
	"CustomCameraMode":              _CustomCameraMode{},
	"DataStoreRequestType":          _DataStoreRequestType{},
	"DateTimeKind":                  _DateTimeKind{},
	"DevCameraOcclusionMode":        _DevCameraOcclusionMode{},
	"DevComputerCameraMovementMode": _DevComputerCameraMovementMode{},
	"DevComputerMovementMode":       _DevComputerMovementMode{},
	"DevTouchCameraMovementMode":    _DevTouchCameraMovementMode{},
	"DevTouchMovementMode":          _DevTouchMovementMode{},
	"DeveloperMemoryTag":            _DeveloperMemoryTag{},
	"DeviceType":                    _DeviceType{},
	"DialogBehaviorType":            _DialogBehaviorType{},
	"DialogPurpose":                 _DialogPurpose{},
	"DialogTone":                    _DialogTone{},
	"DominantAxis":                  _DominantAxis{},
	"DraftStatusCode":               _DraftStatusCode{},
	"EasingDirection":               _EasingDirection{},
	"EasingStyle":                   _EasingStyle{},
	"ElasticBehavior":               _ElasticBehavior{},
	"EnviromentalPhysicsThrottle":   _EnviromentalPhysicsThrottle{},
	"ExplosionType":                 _ExplosionType{},
	"FillDirection":                 _FillDirection{},
	"FilterResult":                  _FilterResult{},
	"Font":                          _Font{},
	"FontSize":                      _FontSize{},
	"FormFactor":                    _FormFactor{},
	"FrameStyle":                    _FrameStyle{},
	"FramerateManagerMode":          _FramerateManagerMode{},
	"FriendRequestEvent":            _FriendRequestEvent{},
	"FriendStatus":                  _FriendStatus{},
	"FunctionalTestResult":          _FunctionalTestResult{},
	"GameAvatarType":                _GameAvatarType{},
	"GearGenreSetting":              _GearGenreSetting{},
	"GearType":                      _GearType{},
	"Genre":                         _Genre{},
	"GraphicsMode":                  _GraphicsMode{},
	"HandlesStyle":                  _HandlesStyle{},
	"HorizontalAlignment":           _HorizontalAlignment{},
	"HoverAnimateSpeed":             _HoverAnimateSpeed{},
	"HttpCachePolicy":               _HttpCachePolicy{},
	"HttpContentType":               _HttpContentType{},
	"HttpError":                     _HttpError{},
	"HttpRequestType":               _HttpRequestType{},
	"HumanoidCollisionType":         _HumanoidCollisionType{},
	"HumanoidDisplayDistanceType":   _HumanoidDisplayDistanceType{},
	"HumanoidHealthDisplayType":     _HumanoidHealthDisplayType{},
	"HumanoidRigType":               _HumanoidRigType{},
	"HumanoidStateType":             _HumanoidStateType{},
	"InOut":                         _InOut{},
	"InfoType":                      _InfoType{},
	"InitialDockState":              _InitialDockState{},
	"InlineAlignment":               _InlineAlignment{},
	"InputType":                     _InputType{},
	"JointCreationMode":             _JointCreationMode{},
	"KeyCode":                       _KeyCode{},
	"KeywordFilterType":             _KeywordFilterType{},
	"Language":                      _Language{},
	"LanguagePreference":            _LanguagePreference{},
	"LeftRight":                     _LeftRight{},
	"LevelOfDetailSetting":          _LevelOfDetailSetting{},
	"Limb":                          _Limb{},
	"ListDisplayMode":               _ListDisplayMode{},
	"ListenerType":                  _ListenerType{},
	"Material":                      _Material{},
	"MembershipType":                _MembershipType{},
	"MeshType":                      _MeshType{},
	"MessageType":                   _MessageType{},
	"ModifierKey":                   _ModifierKey{},
	"MouseBehavior":                 _MouseBehavior{},
	"MoveState":                     _MoveState{},
	"NameOcclusion":                 _NameOcclusion{},
	"NetworkOwnership":              _NetworkOwnership{},
	"NormalId":                      _NormalId{},
	"OutputLayoutMode":              _OutputLayoutMode{},
	"OverrideMouseIconBehavior":     _OverrideMouseIconBehavior{},
	"PacketPriority":                _PacketPriority{},
	"PartType":                      _PartType{},
	"PathStatus":                    _PathStatus{},
	"PathWaypointAction":            _PathWaypointAction{},
	"PermissionLevelShown":          _PermissionLevelShown{},
	"Platform":                      _Platform{},
	"PlaybackState":                 _PlaybackState{},
	"PlayerActions":                 _PlayerActions{},
	"PlayerChatType":                _PlayerChatType{},
	"PoseEasingDirection":           _PoseEasingDirection{},
	"PoseEasingStyle":               _PoseEasingStyle{},
	"PrivilegeType":                 _PrivilegeType{},
	"ProductPurchaseDecision":       _ProductPurchaseDecision{},
	"QualityLevel":                  _QualityLevel{},
	"R15CollisionType":              _R15CollisionType{},
	"RenderFidelity":                _RenderFidelity{},
	"RenderPriority":                _RenderPriority{},
	"RenderingTestComparisonMethod": _RenderingTestComparisonMethod{},
	"ReturnKeyType":                 _ReturnKeyType{},
	"ReverbType":                    _ReverbType{},
	"RibbonTool":                    _RibbonTool{},
	"RollOffMode":                   _RollOffMode{},
	"RotationType":                  _RotationType{},
	"RuntimeUndoBehavior":           _RuntimeUndoBehavior{},
	"SaveFilter":                    _SaveFilter{},
	"SavedQualitySetting":           _SavedQualitySetting{},
	"ScaleType":                     _ScaleType{},
	"ScreenOrientation":             _ScreenOrientation{},
	"ScrollBarInset":                _ScrollBarInset{},
	"ScrollingDirection":            _ScrollingDirection{},
	"ServerAudioBehavior":           _ServerAudioBehavior{},
	"SizeConstraint":                _SizeConstraint{},
	"SortOrder":                     _SortOrder{},
	"SoundType":                     _SoundType{},
	"SpecialKey":                    _SpecialKey{},
	"StartCorner":                   _StartCorner{},
	"Status":                        _Status{},
	"StreamingPauseMode":            _StreamingPauseMode{},
	"StudioDataModelType":           _StudioDataModelType{},
	"StudioStyleGuideColor":         _StudioStyleGuideColor{},
	"StudioStyleGuideModifier":      _StudioStyleGuideModifier{},
	"Style":                         _Style{},
	"SurfaceConstraint":             _SurfaceConstraint{},
	"SurfaceGuiSizingMode":          _SurfaceGuiSizingMode{},
	"SurfaceType":                   _SurfaceType{},
	"SwipeDirection":                _SwipeDirection{},
	"TableMajorAxis":                _TableMajorAxis{},
	"Technology":                    _Technology{},
	"TeleportResult":                _TeleportResult{},
	"TeleportState":                 _TeleportState{},
	"TeleportType":                  _TeleportType{},
	"TextFilterContext":             _TextFilterContext{},
	"TextInputType":                 _TextInputType{},
	"TextTruncate":                  _TextTruncate{},
	"TextXAlignment":                _TextXAlignment{},
	"TextYAlignment":                _TextYAlignment{},
	"TextureMode":                   _TextureMode{},
	"TextureQueryType":              _TextureQueryType{},
	"ThreadPoolConfig":              _ThreadPoolConfig{},
	"ThrottlingPriority":            _ThrottlingPriority{},
	"ThumbnailSize":                 _ThumbnailSize{},
	"ThumbnailType":                 _ThumbnailType{},
	"TickCountSampleMethod":         _TickCountSampleMethod{},
	"TopBottom":                     _TopBottom{},
	"TouchCameraMovementMode":       _TouchCameraMovementMode{},
	"TouchMovementMode":             _TouchMovementMode{},
	"TweenStatus":                   _TweenStatus{},
	"UITheme":                       _UITheme{},
	"UiMessageType":                 _UiMessageType{},
	"UploadSetting":                 _UploadSetting{},
	"UserCFrame":                    _UserCFrame{},
	"UserInputState":                _UserInputState{},
	"UserInputType":                 _UserInputType{},
	"VRTouchpad":                    _VRTouchpad{},
	"VRTouchpadMode":                _VRTouchpadMode{},
	"VerticalAlignment":             _VerticalAlignment{},
	"VerticalScrollBarPosition":     _VerticalScrollBarPosition{},
	"VibrationMotor":                _VibrationMotor{},
	"VideoQualitySettings":          _VideoQualitySettings{},
	"VirtualInputMode":              _VirtualInputMode{},
	"WaterDirection":                _WaterDirection{},
	"WaterForce":                    _WaterForce{},
	"ZIndexBehavior":                _ZIndexBehavior{},
}

////////////////////////////////////////////////////////////////////////////////

type _ActionType struct{}

func (e _ActionType) Type() string {
	return "Enum"
}
func (e _ActionType) String() string {
	return "Enum.ActionType"
}
func (e _ActionType) Copy() rbx.Value {
	return e
}
func (e _ActionType) Name() string {
	return "ActionType"
}
func (e _ActionType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		ActionType(0),
		ActionType(1),
		ActionType(2),
		ActionType(3),
		ActionType(4),
	}
}
func (e _ActionType) Item(name string) rbx.EnumItem {
	switch name {
	case "Nothing":
		return ActionType(0)
	case "Pause":
		return ActionType(1)
	case "Lose":
		return ActionType(2)
	case "Draw":
		return ActionType(3)
	case "Win":
		return ActionType(4)
	}
	return nil
}

type ActionType uint

func (e ActionType) Type() string {
	return "Enum.ActionType"
}
func (e ActionType) String() string {
	return "Enum.ActionType." + e.Name()
}
func (e ActionType) Copy() rbx.Value {
	return e
}
func (e ActionType) Enum() rbx.Enum {
	return _ActionType{}
}
func (e ActionType) Value() int {
	return int(e)
}
func (e ActionType) Name() string {
	switch e {
	case 0:
		return "Nothing"
	case 1:
		return "Pause"
	case 2:
		return "Lose"
	case 3:
		return "Draw"
	case 4:
		return "Win"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _ActuatorRelativeTo struct{}

func (e _ActuatorRelativeTo) Type() string {
	return "Enum"
}
func (e _ActuatorRelativeTo) String() string {
	return "Enum.ActuatorRelativeTo"
}
func (e _ActuatorRelativeTo) Copy() rbx.Value {
	return e
}
func (e _ActuatorRelativeTo) Name() string {
	return "ActuatorRelativeTo"
}
func (e _ActuatorRelativeTo) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		ActuatorRelativeTo(0),
		ActuatorRelativeTo(1),
		ActuatorRelativeTo(2),
	}
}
func (e _ActuatorRelativeTo) Item(name string) rbx.EnumItem {
	switch name {
	case "Attachment0":
		return ActuatorRelativeTo(0)
	case "Attachment1":
		return ActuatorRelativeTo(1)
	case "World":
		return ActuatorRelativeTo(2)
	}
	return nil
}

type ActuatorRelativeTo uint

func (e ActuatorRelativeTo) Type() string {
	return "Enum.ActuatorRelativeTo"
}
func (e ActuatorRelativeTo) String() string {
	return "Enum.ActuatorRelativeTo." + e.Name()
}
func (e ActuatorRelativeTo) Copy() rbx.Value {
	return e
}
func (e ActuatorRelativeTo) Enum() rbx.Enum {
	return _ActuatorRelativeTo{}
}
func (e ActuatorRelativeTo) Value() int {
	return int(e)
}
func (e ActuatorRelativeTo) Name() string {
	switch e {
	case 0:
		return "Attachment0"
	case 1:
		return "Attachment1"
	case 2:
		return "World"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _ActuatorType struct{}

func (e _ActuatorType) Type() string {
	return "Enum"
}
func (e _ActuatorType) String() string {
	return "Enum.ActuatorType"
}
func (e _ActuatorType) Copy() rbx.Value {
	return e
}
func (e _ActuatorType) Name() string {
	return "ActuatorType"
}
func (e _ActuatorType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		ActuatorType(0),
		ActuatorType(1),
		ActuatorType(2),
	}
}
func (e _ActuatorType) Item(name string) rbx.EnumItem {
	switch name {
	case "None":
		return ActuatorType(0)
	case "Motor":
		return ActuatorType(1)
	case "Servo":
		return ActuatorType(2)
	}
	return nil
}

type ActuatorType uint

func (e ActuatorType) Type() string {
	return "Enum.ActuatorType"
}
func (e ActuatorType) String() string {
	return "Enum.ActuatorType." + e.Name()
}
func (e ActuatorType) Copy() rbx.Value {
	return e
}
func (e ActuatorType) Enum() rbx.Enum {
	return _ActuatorType{}
}
func (e ActuatorType) Value() int {
	return int(e)
}
func (e ActuatorType) Name() string {
	switch e {
	case 0:
		return "None"
	case 1:
		return "Motor"
	case 2:
		return "Servo"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _AlignType struct{}

func (e _AlignType) Type() string {
	return "Enum"
}
func (e _AlignType) String() string {
	return "Enum.AlignType"
}
func (e _AlignType) Copy() rbx.Value {
	return e
}
func (e _AlignType) Name() string {
	return "AlignType"
}
func (e _AlignType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		AlignType(0),
		AlignType(1),
	}
}
func (e _AlignType) Item(name string) rbx.EnumItem {
	switch name {
	case "Parallel":
		return AlignType(0)
	case "Perpendicular":
		return AlignType(1)
	}
	return nil
}

type AlignType uint

func (e AlignType) Type() string {
	return "Enum.AlignType"
}
func (e AlignType) String() string {
	return "Enum.AlignType." + e.Name()
}
func (e AlignType) Copy() rbx.Value {
	return e
}
func (e AlignType) Enum() rbx.Enum {
	return _AlignType{}
}
func (e AlignType) Value() int {
	return int(e)
}
func (e AlignType) Name() string {
	switch e {
	case 0:
		return "Parallel"
	case 1:
		return "Perpendicular"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _AnimationPriority struct{}

func (e _AnimationPriority) Type() string {
	return "Enum"
}
func (e _AnimationPriority) String() string {
	return "Enum.AnimationPriority"
}
func (e _AnimationPriority) Copy() rbx.Value {
	return e
}
func (e _AnimationPriority) Name() string {
	return "AnimationPriority"
}
func (e _AnimationPriority) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		AnimationPriority(0),
		AnimationPriority(1),
		AnimationPriority(2),
		AnimationPriority(1000),
	}
}
func (e _AnimationPriority) Item(name string) rbx.EnumItem {
	switch name {
	case "Idle":
		return AnimationPriority(0)
	case "Movement":
		return AnimationPriority(1)
	case "Action":
		return AnimationPriority(2)
	case "Core":
		return AnimationPriority(1000)
	}
	return nil
}

type AnimationPriority uint

func (e AnimationPriority) Type() string {
	return "Enum.AnimationPriority"
}
func (e AnimationPriority) String() string {
	return "Enum.AnimationPriority." + e.Name()
}
func (e AnimationPriority) Copy() rbx.Value {
	return e
}
func (e AnimationPriority) Enum() rbx.Enum {
	return _AnimationPriority{}
}
func (e AnimationPriority) Value() int {
	return int(e)
}
func (e AnimationPriority) Name() string {
	switch e {
	case 0:
		return "Idle"
	case 1:
		return "Movement"
	case 2:
		return "Action"
	case 1000:
		return "Core"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _AppShellActionType struct{}

func (e _AppShellActionType) Type() string {
	return "Enum"
}
func (e _AppShellActionType) String() string {
	return "Enum.AppShellActionType"
}
func (e _AppShellActionType) Copy() rbx.Value {
	return e
}
func (e _AppShellActionType) Name() string {
	return "AppShellActionType"
}
func (e _AppShellActionType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		AppShellActionType(0),
		AppShellActionType(1),
		AppShellActionType(2),
		AppShellActionType(3),
		AppShellActionType(4),
		AppShellActionType(5),
		AppShellActionType(6),
		AppShellActionType(7),
		AppShellActionType(8),
		AppShellActionType(9),
		AppShellActionType(10),
	}
}
func (e _AppShellActionType) Item(name string) rbx.EnumItem {
	switch name {
	case "None":
		return AppShellActionType(0)
	case "OpenApp":
		return AppShellActionType(1)
	case "TapChatTab":
		return AppShellActionType(2)
	case "TapConversationEntry":
		return AppShellActionType(3)
	case "TapAvatarTab":
		return AppShellActionType(4)
	case "ReadConversation":
		return AppShellActionType(5)
	case "TapGamePageTab":
		return AppShellActionType(6)
	case "TapHomePageTab":
		return AppShellActionType(7)
	case "GamePageLoaded":
		return AppShellActionType(8)
	case "HomePageLoaded":
		return AppShellActionType(9)
	case "AvatarEditorPageLoaded":
		return AppShellActionType(10)
	}
	return nil
}

type AppShellActionType uint

func (e AppShellActionType) Type() string {
	return "Enum.AppShellActionType"
}
func (e AppShellActionType) String() string {
	return "Enum.AppShellActionType." + e.Name()
}
func (e AppShellActionType) Copy() rbx.Value {
	return e
}
func (e AppShellActionType) Enum() rbx.Enum {
	return _AppShellActionType{}
}
func (e AppShellActionType) Value() int {
	return int(e)
}
func (e AppShellActionType) Name() string {
	switch e {
	case 0:
		return "None"
	case 1:
		return "OpenApp"
	case 2:
		return "TapChatTab"
	case 3:
		return "TapConversationEntry"
	case 4:
		return "TapAvatarTab"
	case 5:
		return "ReadConversation"
	case 6:
		return "TapGamePageTab"
	case 7:
		return "TapHomePageTab"
	case 8:
		return "GamePageLoaded"
	case 9:
		return "HomePageLoaded"
	case 10:
		return "AvatarEditorPageLoaded"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _AspectType struct{}

func (e _AspectType) Type() string {
	return "Enum"
}
func (e _AspectType) String() string {
	return "Enum.AspectType"
}
func (e _AspectType) Copy() rbx.Value {
	return e
}
func (e _AspectType) Name() string {
	return "AspectType"
}
func (e _AspectType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		AspectType(0),
		AspectType(1),
	}
}
func (e _AspectType) Item(name string) rbx.EnumItem {
	switch name {
	case "FitWithinMaxSize":
		return AspectType(0)
	case "ScaleWithParentSize":
		return AspectType(1)
	}
	return nil
}

type AspectType uint

func (e AspectType) Type() string {
	return "Enum.AspectType"
}
func (e AspectType) String() string {
	return "Enum.AspectType." + e.Name()
}
func (e AspectType) Copy() rbx.Value {
	return e
}
func (e AspectType) Enum() rbx.Enum {
	return _AspectType{}
}
func (e AspectType) Value() int {
	return int(e)
}
func (e AspectType) Name() string {
	switch e {
	case 0:
		return "FitWithinMaxSize"
	case 1:
		return "ScaleWithParentSize"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _AssetFetchStatus struct{}

func (e _AssetFetchStatus) Type() string {
	return "Enum"
}
func (e _AssetFetchStatus) String() string {
	return "Enum.AssetFetchStatus"
}
func (e _AssetFetchStatus) Copy() rbx.Value {
	return e
}
func (e _AssetFetchStatus) Name() string {
	return "AssetFetchStatus"
}
func (e _AssetFetchStatus) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		AssetFetchStatus(0),
		AssetFetchStatus(1),
	}
}
func (e _AssetFetchStatus) Item(name string) rbx.EnumItem {
	switch name {
	case "Success":
		return AssetFetchStatus(0)
	case "Failure":
		return AssetFetchStatus(1)
	}
	return nil
}

type AssetFetchStatus uint

func (e AssetFetchStatus) Type() string {
	return "Enum.AssetFetchStatus"
}
func (e AssetFetchStatus) String() string {
	return "Enum.AssetFetchStatus." + e.Name()
}
func (e AssetFetchStatus) Copy() rbx.Value {
	return e
}
func (e AssetFetchStatus) Enum() rbx.Enum {
	return _AssetFetchStatus{}
}
func (e AssetFetchStatus) Value() int {
	return int(e)
}
func (e AssetFetchStatus) Name() string {
	switch e {
	case 0:
		return "Success"
	case 1:
		return "Failure"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _AssetType struct{}

func (e _AssetType) Type() string {
	return "Enum"
}
func (e _AssetType) String() string {
	return "Enum.AssetType"
}
func (e _AssetType) Copy() rbx.Value {
	return e
}
func (e _AssetType) Name() string {
	return "AssetType"
}
func (e _AssetType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		AssetType(1),
		AssetType(2),
		AssetType(3),
		AssetType(4),
		AssetType(5),
		AssetType(8),
		AssetType(9),
		AssetType(10),
		AssetType(11),
		AssetType(12),
		AssetType(13),
		AssetType(17),
		AssetType(18),
		AssetType(19),
		AssetType(21),
		AssetType(24),
		AssetType(27),
		AssetType(28),
		AssetType(29),
		AssetType(30),
		AssetType(31),
		AssetType(32),
		AssetType(34),
		AssetType(38),
		AssetType(40),
		AssetType(41),
		AssetType(42),
		AssetType(43),
		AssetType(44),
		AssetType(45),
		AssetType(46),
		AssetType(47),
		AssetType(48),
		AssetType(49),
		AssetType(50),
		AssetType(51),
		AssetType(52),
		AssetType(53),
		AssetType(54),
		AssetType(55),
		AssetType(56),
		AssetType(57),
		AssetType(58),
		AssetType(61),
	}
}
func (e _AssetType) Item(name string) rbx.EnumItem {
	switch name {
	case "Image":
		return AssetType(1)
	case "TeeShirt":
		return AssetType(2)
	case "Audio":
		return AssetType(3)
	case "Mesh":
		return AssetType(4)
	case "Lua":
		return AssetType(5)
	case "Hat":
		return AssetType(8)
	case "Place":
		return AssetType(9)
	case "Model":
		return AssetType(10)
	case "Shirt":
		return AssetType(11)
	case "Pants":
		return AssetType(12)
	case "Decal":
		return AssetType(13)
	case "Head":
		return AssetType(17)
	case "Face":
		return AssetType(18)
	case "Gear":
		return AssetType(19)
	case "Badge":
		return AssetType(21)
	case "Animation":
		return AssetType(24)
	case "Torso":
		return AssetType(27)
	case "RightArm":
		return AssetType(28)
	case "LeftArm":
		return AssetType(29)
	case "LeftLeg":
		return AssetType(30)
	case "RightLeg":
		return AssetType(31)
	case "Package":
		return AssetType(32)
	case "GamePass":
		return AssetType(34)
	case "Plugin":
		return AssetType(38)
	case "MeshPart":
		return AssetType(40)
	case "HairAccessory":
		return AssetType(41)
	case "FaceAccessory":
		return AssetType(42)
	case "NeckAccessory":
		return AssetType(43)
	case "ShoulderAccessory":
		return AssetType(44)
	case "FrontAccessory":
		return AssetType(45)
	case "BackAccessory":
		return AssetType(46)
	case "WaistAccessory":
		return AssetType(47)
	case "ClimbAnimation":
		return AssetType(48)
	case "DeathAnimation":
		return AssetType(49)
	case "FallAnimation":
		return AssetType(50)
	case "IdleAnimation":
		return AssetType(51)
	case "JumpAnimation":
		return AssetType(52)
	case "RunAnimation":
		return AssetType(53)
	case "SwimAnimation":
		return AssetType(54)
	case "WalkAnimation":
		return AssetType(55)
	case "PoseAnimation":
		return AssetType(56)
	case "EarAccessory":
		return AssetType(57)
	case "EyeAccessory":
		return AssetType(58)
	case "EmoteAnimation":
		return AssetType(61)
	}
	return nil
}

type AssetType uint

func (e AssetType) Type() string {
	return "Enum.AssetType"
}
func (e AssetType) String() string {
	return "Enum.AssetType." + e.Name()
}
func (e AssetType) Copy() rbx.Value {
	return e
}
func (e AssetType) Enum() rbx.Enum {
	return _AssetType{}
}
func (e AssetType) Value() int {
	return int(e)
}
func (e AssetType) Name() string {
	switch e {
	case 1:
		return "Image"
	case 2:
		return "TeeShirt"
	case 3:
		return "Audio"
	case 4:
		return "Mesh"
	case 5:
		return "Lua"
	case 8:
		return "Hat"
	case 9:
		return "Place"
	case 10:
		return "Model"
	case 11:
		return "Shirt"
	case 12:
		return "Pants"
	case 13:
		return "Decal"
	case 17:
		return "Head"
	case 18:
		return "Face"
	case 19:
		return "Gear"
	case 21:
		return "Badge"
	case 24:
		return "Animation"
	case 27:
		return "Torso"
	case 28:
		return "RightArm"
	case 29:
		return "LeftArm"
	case 30:
		return "LeftLeg"
	case 31:
		return "RightLeg"
	case 32:
		return "Package"
	case 34:
		return "GamePass"
	case 38:
		return "Plugin"
	case 40:
		return "MeshPart"
	case 41:
		return "HairAccessory"
	case 42:
		return "FaceAccessory"
	case 43:
		return "NeckAccessory"
	case 44:
		return "ShoulderAccessory"
	case 45:
		return "FrontAccessory"
	case 46:
		return "BackAccessory"
	case 47:
		return "WaistAccessory"
	case 48:
		return "ClimbAnimation"
	case 49:
		return "DeathAnimation"
	case 50:
		return "FallAnimation"
	case 51:
		return "IdleAnimation"
	case 52:
		return "JumpAnimation"
	case 53:
		return "RunAnimation"
	case 54:
		return "SwimAnimation"
	case 55:
		return "WalkAnimation"
	case 56:
		return "PoseAnimation"
	case 57:
		return "EarAccessory"
	case 58:
		return "EyeAccessory"
	case 61:
		return "EmoteAnimation"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _AvatarContextMenuOption struct{}

func (e _AvatarContextMenuOption) Type() string {
	return "Enum"
}
func (e _AvatarContextMenuOption) String() string {
	return "Enum.AvatarContextMenuOption"
}
func (e _AvatarContextMenuOption) Copy() rbx.Value {
	return e
}
func (e _AvatarContextMenuOption) Name() string {
	return "AvatarContextMenuOption"
}
func (e _AvatarContextMenuOption) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		AvatarContextMenuOption(0),
		AvatarContextMenuOption(1),
		AvatarContextMenuOption(2),
		AvatarContextMenuOption(3),
	}
}
func (e _AvatarContextMenuOption) Item(name string) rbx.EnumItem {
	switch name {
	case "Friend":
		return AvatarContextMenuOption(0)
	case "Chat":
		return AvatarContextMenuOption(1)
	case "Emote":
		return AvatarContextMenuOption(2)
	case "InspectMenu":
		return AvatarContextMenuOption(3)
	}
	return nil
}

type AvatarContextMenuOption uint

func (e AvatarContextMenuOption) Type() string {
	return "Enum.AvatarContextMenuOption"
}
func (e AvatarContextMenuOption) String() string {
	return "Enum.AvatarContextMenuOption." + e.Name()
}
func (e AvatarContextMenuOption) Copy() rbx.Value {
	return e
}
func (e AvatarContextMenuOption) Enum() rbx.Enum {
	return _AvatarContextMenuOption{}
}
func (e AvatarContextMenuOption) Value() int {
	return int(e)
}
func (e AvatarContextMenuOption) Name() string {
	switch e {
	case 0:
		return "Friend"
	case 1:
		return "Chat"
	case 2:
		return "Emote"
	case 3:
		return "InspectMenu"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _AvatarJointPositionType struct{}

func (e _AvatarJointPositionType) Type() string {
	return "Enum"
}
func (e _AvatarJointPositionType) String() string {
	return "Enum.AvatarJointPositionType"
}
func (e _AvatarJointPositionType) Copy() rbx.Value {
	return e
}
func (e _AvatarJointPositionType) Name() string {
	return "AvatarJointPositionType"
}
func (e _AvatarJointPositionType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		AvatarJointPositionType(0),
		AvatarJointPositionType(1),
	}
}
func (e _AvatarJointPositionType) Item(name string) rbx.EnumItem {
	switch name {
	case "Fixed":
		return AvatarJointPositionType(0)
	case "ArtistIntent":
		return AvatarJointPositionType(1)
	}
	return nil
}

type AvatarJointPositionType uint

func (e AvatarJointPositionType) Type() string {
	return "Enum.AvatarJointPositionType"
}
func (e AvatarJointPositionType) String() string {
	return "Enum.AvatarJointPositionType." + e.Name()
}
func (e AvatarJointPositionType) Copy() rbx.Value {
	return e
}
func (e AvatarJointPositionType) Enum() rbx.Enum {
	return _AvatarJointPositionType{}
}
func (e AvatarJointPositionType) Value() int {
	return int(e)
}
func (e AvatarJointPositionType) Name() string {
	switch e {
	case 0:
		return "Fixed"
	case 1:
		return "ArtistIntent"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _Axis struct{}

func (e _Axis) Type() string {
	return "Enum"
}
func (e _Axis) String() string {
	return "Enum.Axis"
}
func (e _Axis) Copy() rbx.Value {
	return e
}
func (e _Axis) Name() string {
	return "Axis"
}
func (e _Axis) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		Axis(0),
		Axis(1),
		Axis(2),
	}
}
func (e _Axis) Item(name string) rbx.EnumItem {
	switch name {
	case "X":
		return Axis(0)
	case "Y":
		return Axis(1)
	case "Z":
		return Axis(2)
	}
	return nil
}

type Axis uint

func (e Axis) Type() string {
	return "Enum.Axis"
}
func (e Axis) String() string {
	return "Enum.Axis." + e.Name()
}
func (e Axis) Copy() rbx.Value {
	return e
}
func (e Axis) Enum() rbx.Enum {
	return _Axis{}
}
func (e Axis) Value() int {
	return int(e)
}
func (e Axis) Name() string {
	switch e {
	case 0:
		return "X"
	case 1:
		return "Y"
	case 2:
		return "Z"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _BinType struct{}

func (e _BinType) Type() string {
	return "Enum"
}
func (e _BinType) String() string {
	return "Enum.BinType"
}
func (e _BinType) Copy() rbx.Value {
	return e
}
func (e _BinType) Name() string {
	return "BinType"
}
func (e _BinType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		BinType(0),
		BinType(1),
		BinType(2),
		BinType(3),
		BinType(4),
	}
}
func (e _BinType) Item(name string) rbx.EnumItem {
	switch name {
	case "Script":
		return BinType(0)
	case "GameTool":
		return BinType(1)
	case "Grab":
		return BinType(2)
	case "Clone":
		return BinType(3)
	case "Hammer":
		return BinType(4)
	}
	return nil
}

type BinType uint

func (e BinType) Type() string {
	return "Enum.BinType"
}
func (e BinType) String() string {
	return "Enum.BinType." + e.Name()
}
func (e BinType) Copy() rbx.Value {
	return e
}
func (e BinType) Enum() rbx.Enum {
	return _BinType{}
}
func (e BinType) Value() int {
	return int(e)
}
func (e BinType) Name() string {
	switch e {
	case 0:
		return "Script"
	case 1:
		return "GameTool"
	case 2:
		return "Grab"
	case 3:
		return "Clone"
	case 4:
		return "Hammer"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _BodyPart struct{}

func (e _BodyPart) Type() string {
	return "Enum"
}
func (e _BodyPart) String() string {
	return "Enum.BodyPart"
}
func (e _BodyPart) Copy() rbx.Value {
	return e
}
func (e _BodyPart) Name() string {
	return "BodyPart"
}
func (e _BodyPart) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		BodyPart(0),
		BodyPart(1),
		BodyPart(2),
		BodyPart(3),
		BodyPart(4),
		BodyPart(5),
	}
}
func (e _BodyPart) Item(name string) rbx.EnumItem {
	switch name {
	case "Head":
		return BodyPart(0)
	case "Torso":
		return BodyPart(1)
	case "LeftArm":
		return BodyPart(2)
	case "RightArm":
		return BodyPart(3)
	case "LeftLeg":
		return BodyPart(4)
	case "RightLeg":
		return BodyPart(5)
	}
	return nil
}

type BodyPart uint

func (e BodyPart) Type() string {
	return "Enum.BodyPart"
}
func (e BodyPart) String() string {
	return "Enum.BodyPart." + e.Name()
}
func (e BodyPart) Copy() rbx.Value {
	return e
}
func (e BodyPart) Enum() rbx.Enum {
	return _BodyPart{}
}
func (e BodyPart) Value() int {
	return int(e)
}
func (e BodyPart) Name() string {
	switch e {
	case 0:
		return "Head"
	case 1:
		return "Torso"
	case 2:
		return "LeftArm"
	case 3:
		return "RightArm"
	case 4:
		return "LeftLeg"
	case 5:
		return "RightLeg"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _BodyPartR15 struct{}

func (e _BodyPartR15) Type() string {
	return "Enum"
}
func (e _BodyPartR15) String() string {
	return "Enum.BodyPartR15"
}
func (e _BodyPartR15) Copy() rbx.Value {
	return e
}
func (e _BodyPartR15) Name() string {
	return "BodyPartR15"
}
func (e _BodyPartR15) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		BodyPartR15(0),
		BodyPartR15(1),
		BodyPartR15(2),
		BodyPartR15(3),
		BodyPartR15(4),
		BodyPartR15(5),
		BodyPartR15(6),
		BodyPartR15(7),
		BodyPartR15(8),
		BodyPartR15(9),
		BodyPartR15(10),
		BodyPartR15(11),
		BodyPartR15(12),
		BodyPartR15(13),
		BodyPartR15(14),
		BodyPartR15(15),
		BodyPartR15(17),
	}
}
func (e _BodyPartR15) Item(name string) rbx.EnumItem {
	switch name {
	case "Head":
		return BodyPartR15(0)
	case "UpperTorso":
		return BodyPartR15(1)
	case "LowerTorso":
		return BodyPartR15(2)
	case "LeftFoot":
		return BodyPartR15(3)
	case "LeftLowerLeg":
		return BodyPartR15(4)
	case "LeftUpperLeg":
		return BodyPartR15(5)
	case "RightFoot":
		return BodyPartR15(6)
	case "RightLowerLeg":
		return BodyPartR15(7)
	case "RightUpperLeg":
		return BodyPartR15(8)
	case "LeftHand":
		return BodyPartR15(9)
	case "LeftLowerArm":
		return BodyPartR15(10)
	case "LeftUpperArm":
		return BodyPartR15(11)
	case "RightHand":
		return BodyPartR15(12)
	case "RightLowerArm":
		return BodyPartR15(13)
	case "RightUpperArm":
		return BodyPartR15(14)
	case "RootPart":
		return BodyPartR15(15)
	case "Unknown":
		return BodyPartR15(17)
	}
	return nil
}

type BodyPartR15 uint

func (e BodyPartR15) Type() string {
	return "Enum.BodyPartR15"
}
func (e BodyPartR15) String() string {
	return "Enum.BodyPartR15." + e.Name()
}
func (e BodyPartR15) Copy() rbx.Value {
	return e
}
func (e BodyPartR15) Enum() rbx.Enum {
	return _BodyPartR15{}
}
func (e BodyPartR15) Value() int {
	return int(e)
}
func (e BodyPartR15) Name() string {
	switch e {
	case 0:
		return "Head"
	case 1:
		return "UpperTorso"
	case 2:
		return "LowerTorso"
	case 3:
		return "LeftFoot"
	case 4:
		return "LeftLowerLeg"
	case 5:
		return "LeftUpperLeg"
	case 6:
		return "RightFoot"
	case 7:
		return "RightLowerLeg"
	case 8:
		return "RightUpperLeg"
	case 9:
		return "LeftHand"
	case 10:
		return "LeftLowerArm"
	case 11:
		return "LeftUpperArm"
	case 12:
		return "RightHand"
	case 13:
		return "RightLowerArm"
	case 14:
		return "RightUpperArm"
	case 15:
		return "RootPart"
	case 17:
		return "Unknown"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _BorderMode struct{}

func (e _BorderMode) Type() string {
	return "Enum"
}
func (e _BorderMode) String() string {
	return "Enum.BorderMode"
}
func (e _BorderMode) Copy() rbx.Value {
	return e
}
func (e _BorderMode) Name() string {
	return "BorderMode"
}
func (e _BorderMode) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		BorderMode(0),
		BorderMode(1),
		BorderMode(2),
	}
}
func (e _BorderMode) Item(name string) rbx.EnumItem {
	switch name {
	case "Outline":
		return BorderMode(0)
	case "Middle":
		return BorderMode(1)
	case "Inset":
		return BorderMode(2)
	}
	return nil
}

type BorderMode uint

func (e BorderMode) Type() string {
	return "Enum.BorderMode"
}
func (e BorderMode) String() string {
	return "Enum.BorderMode." + e.Name()
}
func (e BorderMode) Copy() rbx.Value {
	return e
}
func (e BorderMode) Enum() rbx.Enum {
	return _BorderMode{}
}
func (e BorderMode) Value() int {
	return int(e)
}
func (e BorderMode) Name() string {
	switch e {
	case 0:
		return "Outline"
	case 1:
		return "Middle"
	case 2:
		return "Inset"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _BreakReason struct{}

func (e _BreakReason) Type() string {
	return "Enum"
}
func (e _BreakReason) String() string {
	return "Enum.BreakReason"
}
func (e _BreakReason) Copy() rbx.Value {
	return e
}
func (e _BreakReason) Name() string {
	return "BreakReason"
}
func (e _BreakReason) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		BreakReason(0),
		BreakReason(1),
		BreakReason(3),
		BreakReason(2),
	}
}
func (e _BreakReason) Item(name string) rbx.EnumItem {
	switch name {
	case "Other":
		return BreakReason(0)
	case "Error":
		return BreakReason(1)
	case "UserBreakpoint":
		return BreakReason(3)
	case "SpecialBreakpoint":
		return BreakReason(2)
	}
	return nil
}

type BreakReason uint

func (e BreakReason) Type() string {
	return "Enum.BreakReason"
}
func (e BreakReason) String() string {
	return "Enum.BreakReason." + e.Name()
}
func (e BreakReason) Copy() rbx.Value {
	return e
}
func (e BreakReason) Enum() rbx.Enum {
	return _BreakReason{}
}
func (e BreakReason) Value() int {
	return int(e)
}
func (e BreakReason) Name() string {
	switch e {
	case 0:
		return "Other"
	case 1:
		return "Error"
	case 3:
		return "UserBreakpoint"
	case 2:
		return "SpecialBreakpoint"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _Button struct{}

func (e _Button) Type() string {
	return "Enum"
}
func (e _Button) String() string {
	return "Enum.Button"
}
func (e _Button) Copy() rbx.Value {
	return e
}
func (e _Button) Name() string {
	return "Button"
}
func (e _Button) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		Button(32),
		Button(8),
	}
}
func (e _Button) Item(name string) rbx.EnumItem {
	switch name {
	case "Jump":
		return Button(32)
	case "Dismount":
		return Button(8)
	}
	return nil
}

type Button uint

func (e Button) Type() string {
	return "Enum.Button"
}
func (e Button) String() string {
	return "Enum.Button." + e.Name()
}
func (e Button) Copy() rbx.Value {
	return e
}
func (e Button) Enum() rbx.Enum {
	return _Button{}
}
func (e Button) Value() int {
	return int(e)
}
func (e Button) Name() string {
	switch e {
	case 32:
		return "Jump"
	case 8:
		return "Dismount"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _ButtonStyle struct{}

func (e _ButtonStyle) Type() string {
	return "Enum"
}
func (e _ButtonStyle) String() string {
	return "Enum.ButtonStyle"
}
func (e _ButtonStyle) Copy() rbx.Value {
	return e
}
func (e _ButtonStyle) Name() string {
	return "ButtonStyle"
}
func (e _ButtonStyle) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		ButtonStyle(0),
		ButtonStyle(1),
		ButtonStyle(2),
		ButtonStyle(3),
		ButtonStyle(4),
		ButtonStyle(5),
	}
}
func (e _ButtonStyle) Item(name string) rbx.EnumItem {
	switch name {
	case "Custom":
		return ButtonStyle(0)
	case "RobloxButtonDefault":
		return ButtonStyle(1)
	case "RobloxButton":
		return ButtonStyle(2)
	case "RobloxRoundButton":
		return ButtonStyle(3)
	case "RobloxRoundDefaultButton":
		return ButtonStyle(4)
	case "RobloxRoundDropdownButton":
		return ButtonStyle(5)
	}
	return nil
}

type ButtonStyle uint

func (e ButtonStyle) Type() string {
	return "Enum.ButtonStyle"
}
func (e ButtonStyle) String() string {
	return "Enum.ButtonStyle." + e.Name()
}
func (e ButtonStyle) Copy() rbx.Value {
	return e
}
func (e ButtonStyle) Enum() rbx.Enum {
	return _ButtonStyle{}
}
func (e ButtonStyle) Value() int {
	return int(e)
}
func (e ButtonStyle) Name() string {
	switch e {
	case 0:
		return "Custom"
	case 1:
		return "RobloxButtonDefault"
	case 2:
		return "RobloxButton"
	case 3:
		return "RobloxRoundButton"
	case 4:
		return "RobloxRoundDefaultButton"
	case 5:
		return "RobloxRoundDropdownButton"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _CameraMode struct{}

func (e _CameraMode) Type() string {
	return "Enum"
}
func (e _CameraMode) String() string {
	return "Enum.CameraMode"
}
func (e _CameraMode) Copy() rbx.Value {
	return e
}
func (e _CameraMode) Name() string {
	return "CameraMode"
}
func (e _CameraMode) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		CameraMode(0),
		CameraMode(1),
	}
}
func (e _CameraMode) Item(name string) rbx.EnumItem {
	switch name {
	case "Classic":
		return CameraMode(0)
	case "LockFirstPerson":
		return CameraMode(1)
	}
	return nil
}

type CameraMode uint

func (e CameraMode) Type() string {
	return "Enum.CameraMode"
}
func (e CameraMode) String() string {
	return "Enum.CameraMode." + e.Name()
}
func (e CameraMode) Copy() rbx.Value {
	return e
}
func (e CameraMode) Enum() rbx.Enum {
	return _CameraMode{}
}
func (e CameraMode) Value() int {
	return int(e)
}
func (e CameraMode) Name() string {
	switch e {
	case 0:
		return "Classic"
	case 1:
		return "LockFirstPerson"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _CameraPanMode struct{}

func (e _CameraPanMode) Type() string {
	return "Enum"
}
func (e _CameraPanMode) String() string {
	return "Enum.CameraPanMode"
}
func (e _CameraPanMode) Copy() rbx.Value {
	return e
}
func (e _CameraPanMode) Name() string {
	return "CameraPanMode"
}
func (e _CameraPanMode) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		CameraPanMode(0),
		CameraPanMode(1),
	}
}
func (e _CameraPanMode) Item(name string) rbx.EnumItem {
	switch name {
	case "Classic":
		return CameraPanMode(0)
	case "EdgeBump":
		return CameraPanMode(1)
	}
	return nil
}

type CameraPanMode uint

func (e CameraPanMode) Type() string {
	return "Enum.CameraPanMode"
}
func (e CameraPanMode) String() string {
	return "Enum.CameraPanMode." + e.Name()
}
func (e CameraPanMode) Copy() rbx.Value {
	return e
}
func (e CameraPanMode) Enum() rbx.Enum {
	return _CameraPanMode{}
}
func (e CameraPanMode) Value() int {
	return int(e)
}
func (e CameraPanMode) Name() string {
	switch e {
	case 0:
		return "Classic"
	case 1:
		return "EdgeBump"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _CameraType struct{}

func (e _CameraType) Type() string {
	return "Enum"
}
func (e _CameraType) String() string {
	return "Enum.CameraType"
}
func (e _CameraType) Copy() rbx.Value {
	return e
}
func (e _CameraType) Name() string {
	return "CameraType"
}
func (e _CameraType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		CameraType(0),
		CameraType(2),
		CameraType(1),
		CameraType(3),
		CameraType(4),
		CameraType(5),
		CameraType(6),
		CameraType(7),
	}
}
func (e _CameraType) Item(name string) rbx.EnumItem {
	switch name {
	case "Fixed":
		return CameraType(0)
	case "Watch":
		return CameraType(2)
	case "Attach":
		return CameraType(1)
	case "Track":
		return CameraType(3)
	case "Follow":
		return CameraType(4)
	case "Custom":
		return CameraType(5)
	case "Scriptable":
		return CameraType(6)
	case "Orbital":
		return CameraType(7)
	}
	return nil
}

type CameraType uint

func (e CameraType) Type() string {
	return "Enum.CameraType"
}
func (e CameraType) String() string {
	return "Enum.CameraType." + e.Name()
}
func (e CameraType) Copy() rbx.Value {
	return e
}
func (e CameraType) Enum() rbx.Enum {
	return _CameraType{}
}
func (e CameraType) Value() int {
	return int(e)
}
func (e CameraType) Name() string {
	switch e {
	case 0:
		return "Fixed"
	case 2:
		return "Watch"
	case 1:
		return "Attach"
	case 3:
		return "Track"
	case 4:
		return "Follow"
	case 5:
		return "Custom"
	case 6:
		return "Scriptable"
	case 7:
		return "Orbital"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _CellBlock struct{}

func (e _CellBlock) Type() string {
	return "Enum"
}
func (e _CellBlock) String() string {
	return "Enum.CellBlock"
}
func (e _CellBlock) Copy() rbx.Value {
	return e
}
func (e _CellBlock) Name() string {
	return "CellBlock"
}
func (e _CellBlock) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		CellBlock(0),
		CellBlock(1),
		CellBlock(2),
		CellBlock(3),
		CellBlock(4),
	}
}
func (e _CellBlock) Item(name string) rbx.EnumItem {
	switch name {
	case "Solid":
		return CellBlock(0)
	case "VerticalWedge":
		return CellBlock(1)
	case "CornerWedge":
		return CellBlock(2)
	case "InverseCornerWedge":
		return CellBlock(3)
	case "HorizontalWedge":
		return CellBlock(4)
	}
	return nil
}

type CellBlock uint

func (e CellBlock) Type() string {
	return "Enum.CellBlock"
}
func (e CellBlock) String() string {
	return "Enum.CellBlock." + e.Name()
}
func (e CellBlock) Copy() rbx.Value {
	return e
}
func (e CellBlock) Enum() rbx.Enum {
	return _CellBlock{}
}
func (e CellBlock) Value() int {
	return int(e)
}
func (e CellBlock) Name() string {
	switch e {
	case 0:
		return "Solid"
	case 1:
		return "VerticalWedge"
	case 2:
		return "CornerWedge"
	case 3:
		return "InverseCornerWedge"
	case 4:
		return "HorizontalWedge"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _CellMaterial struct{}

func (e _CellMaterial) Type() string {
	return "Enum"
}
func (e _CellMaterial) String() string {
	return "Enum.CellMaterial"
}
func (e _CellMaterial) Copy() rbx.Value {
	return e
}
func (e _CellMaterial) Name() string {
	return "CellMaterial"
}
func (e _CellMaterial) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		CellMaterial(0),
		CellMaterial(1),
		CellMaterial(2),
		CellMaterial(3),
		CellMaterial(4),
		CellMaterial(5),
		CellMaterial(6),
		CellMaterial(7),
		CellMaterial(8),
		CellMaterial(9),
		CellMaterial(10),
		CellMaterial(11),
		CellMaterial(12),
		CellMaterial(13),
		CellMaterial(14),
		CellMaterial(15),
		CellMaterial(16),
		CellMaterial(17),
	}
}
func (e _CellMaterial) Item(name string) rbx.EnumItem {
	switch name {
	case "Empty":
		return CellMaterial(0)
	case "Grass":
		return CellMaterial(1)
	case "Sand":
		return CellMaterial(2)
	case "Brick":
		return CellMaterial(3)
	case "Granite":
		return CellMaterial(4)
	case "Asphalt":
		return CellMaterial(5)
	case "Iron":
		return CellMaterial(6)
	case "Aluminum":
		return CellMaterial(7)
	case "Gold":
		return CellMaterial(8)
	case "WoodPlank":
		return CellMaterial(9)
	case "WoodLog":
		return CellMaterial(10)
	case "Gravel":
		return CellMaterial(11)
	case "CinderBlock":
		return CellMaterial(12)
	case "MossyStone":
		return CellMaterial(13)
	case "Cement":
		return CellMaterial(14)
	case "RedPlastic":
		return CellMaterial(15)
	case "BluePlastic":
		return CellMaterial(16)
	case "Water":
		return CellMaterial(17)
	}
	return nil
}

type CellMaterial uint

func (e CellMaterial) Type() string {
	return "Enum.CellMaterial"
}
func (e CellMaterial) String() string {
	return "Enum.CellMaterial." + e.Name()
}
func (e CellMaterial) Copy() rbx.Value {
	return e
}
func (e CellMaterial) Enum() rbx.Enum {
	return _CellMaterial{}
}
func (e CellMaterial) Value() int {
	return int(e)
}
func (e CellMaterial) Name() string {
	switch e {
	case 0:
		return "Empty"
	case 1:
		return "Grass"
	case 2:
		return "Sand"
	case 3:
		return "Brick"
	case 4:
		return "Granite"
	case 5:
		return "Asphalt"
	case 6:
		return "Iron"
	case 7:
		return "Aluminum"
	case 8:
		return "Gold"
	case 9:
		return "WoodPlank"
	case 10:
		return "WoodLog"
	case 11:
		return "Gravel"
	case 12:
		return "CinderBlock"
	case 13:
		return "MossyStone"
	case 14:
		return "Cement"
	case 15:
		return "RedPlastic"
	case 16:
		return "BluePlastic"
	case 17:
		return "Water"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _CellOrientation struct{}

func (e _CellOrientation) Type() string {
	return "Enum"
}
func (e _CellOrientation) String() string {
	return "Enum.CellOrientation"
}
func (e _CellOrientation) Copy() rbx.Value {
	return e
}
func (e _CellOrientation) Name() string {
	return "CellOrientation"
}
func (e _CellOrientation) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		CellOrientation(0),
		CellOrientation(1),
		CellOrientation(2),
		CellOrientation(3),
	}
}
func (e _CellOrientation) Item(name string) rbx.EnumItem {
	switch name {
	case "NegZ":
		return CellOrientation(0)
	case "X":
		return CellOrientation(1)
	case "Z":
		return CellOrientation(2)
	case "NegX":
		return CellOrientation(3)
	}
	return nil
}

type CellOrientation uint

func (e CellOrientation) Type() string {
	return "Enum.CellOrientation"
}
func (e CellOrientation) String() string {
	return "Enum.CellOrientation." + e.Name()
}
func (e CellOrientation) Copy() rbx.Value {
	return e
}
func (e CellOrientation) Enum() rbx.Enum {
	return _CellOrientation{}
}
func (e CellOrientation) Value() int {
	return int(e)
}
func (e CellOrientation) Name() string {
	switch e {
	case 0:
		return "NegZ"
	case 1:
		return "X"
	case 2:
		return "Z"
	case 3:
		return "NegX"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _CenterDialogType struct{}

func (e _CenterDialogType) Type() string {
	return "Enum"
}
func (e _CenterDialogType) String() string {
	return "Enum.CenterDialogType"
}
func (e _CenterDialogType) Copy() rbx.Value {
	return e
}
func (e _CenterDialogType) Name() string {
	return "CenterDialogType"
}
func (e _CenterDialogType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		CenterDialogType(1),
		CenterDialogType(2),
		CenterDialogType(3),
		CenterDialogType(4),
	}
}
func (e _CenterDialogType) Item(name string) rbx.EnumItem {
	switch name {
	case "UnsolicitedDialog":
		return CenterDialogType(1)
	case "PlayerInitiatedDialog":
		return CenterDialogType(2)
	case "ModalDialog":
		return CenterDialogType(3)
	case "QuitDialog":
		return CenterDialogType(4)
	}
	return nil
}

type CenterDialogType uint

func (e CenterDialogType) Type() string {
	return "Enum.CenterDialogType"
}
func (e CenterDialogType) String() string {
	return "Enum.CenterDialogType." + e.Name()
}
func (e CenterDialogType) Copy() rbx.Value {
	return e
}
func (e CenterDialogType) Enum() rbx.Enum {
	return _CenterDialogType{}
}
func (e CenterDialogType) Value() int {
	return int(e)
}
func (e CenterDialogType) Name() string {
	switch e {
	case 1:
		return "UnsolicitedDialog"
	case 2:
		return "PlayerInitiatedDialog"
	case 3:
		return "ModalDialog"
	case 4:
		return "QuitDialog"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _ChatCallbackType struct{}

func (e _ChatCallbackType) Type() string {
	return "Enum"
}
func (e _ChatCallbackType) String() string {
	return "Enum.ChatCallbackType"
}
func (e _ChatCallbackType) Copy() rbx.Value {
	return e
}
func (e _ChatCallbackType) Name() string {
	return "ChatCallbackType"
}
func (e _ChatCallbackType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		ChatCallbackType(1),
		ChatCallbackType(2),
		ChatCallbackType(3),
		ChatCallbackType(17),
	}
}
func (e _ChatCallbackType) Item(name string) rbx.EnumItem {
	switch name {
	case "OnCreatingChatWindow":
		return ChatCallbackType(1)
	case "OnClientSendingMessage":
		return ChatCallbackType(2)
	case "OnClientFormattingMessage":
		return ChatCallbackType(3)
	case "OnServerReceivingMessage":
		return ChatCallbackType(17)
	}
	return nil
}

type ChatCallbackType uint

func (e ChatCallbackType) Type() string {
	return "Enum.ChatCallbackType"
}
func (e ChatCallbackType) String() string {
	return "Enum.ChatCallbackType." + e.Name()
}
func (e ChatCallbackType) Copy() rbx.Value {
	return e
}
func (e ChatCallbackType) Enum() rbx.Enum {
	return _ChatCallbackType{}
}
func (e ChatCallbackType) Value() int {
	return int(e)
}
func (e ChatCallbackType) Name() string {
	switch e {
	case 1:
		return "OnCreatingChatWindow"
	case 2:
		return "OnClientSendingMessage"
	case 3:
		return "OnClientFormattingMessage"
	case 17:
		return "OnServerReceivingMessage"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _ChatColor struct{}

func (e _ChatColor) Type() string {
	return "Enum"
}
func (e _ChatColor) String() string {
	return "Enum.ChatColor"
}
func (e _ChatColor) Copy() rbx.Value {
	return e
}
func (e _ChatColor) Name() string {
	return "ChatColor"
}
func (e _ChatColor) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		ChatColor(0),
		ChatColor(1),
		ChatColor(2),
		ChatColor(3),
	}
}
func (e _ChatColor) Item(name string) rbx.EnumItem {
	switch name {
	case "Blue":
		return ChatColor(0)
	case "Green":
		return ChatColor(1)
	case "Red":
		return ChatColor(2)
	case "White":
		return ChatColor(3)
	}
	return nil
}

type ChatColor uint

func (e ChatColor) Type() string {
	return "Enum.ChatColor"
}
func (e ChatColor) String() string {
	return "Enum.ChatColor." + e.Name()
}
func (e ChatColor) Copy() rbx.Value {
	return e
}
func (e ChatColor) Enum() rbx.Enum {
	return _ChatColor{}
}
func (e ChatColor) Value() int {
	return int(e)
}
func (e ChatColor) Name() string {
	switch e {
	case 0:
		return "Blue"
	case 1:
		return "Green"
	case 2:
		return "Red"
	case 3:
		return "White"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _ChatMode struct{}

func (e _ChatMode) Type() string {
	return "Enum"
}
func (e _ChatMode) String() string {
	return "Enum.ChatMode"
}
func (e _ChatMode) Copy() rbx.Value {
	return e
}
func (e _ChatMode) Name() string {
	return "ChatMode"
}
func (e _ChatMode) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		ChatMode(0),
		ChatMode(1),
	}
}
func (e _ChatMode) Item(name string) rbx.EnumItem {
	switch name {
	case "Menu":
		return ChatMode(0)
	case "TextAndMenu":
		return ChatMode(1)
	}
	return nil
}

type ChatMode uint

func (e ChatMode) Type() string {
	return "Enum.ChatMode"
}
func (e ChatMode) String() string {
	return "Enum.ChatMode." + e.Name()
}
func (e ChatMode) Copy() rbx.Value {
	return e
}
func (e ChatMode) Enum() rbx.Enum {
	return _ChatMode{}
}
func (e ChatMode) Value() int {
	return int(e)
}
func (e ChatMode) Name() string {
	switch e {
	case 0:
		return "Menu"
	case 1:
		return "TextAndMenu"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _ChatPrivacyMode struct{}

func (e _ChatPrivacyMode) Type() string {
	return "Enum"
}
func (e _ChatPrivacyMode) String() string {
	return "Enum.ChatPrivacyMode"
}
func (e _ChatPrivacyMode) Copy() rbx.Value {
	return e
}
func (e _ChatPrivacyMode) Name() string {
	return "ChatPrivacyMode"
}
func (e _ChatPrivacyMode) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		ChatPrivacyMode(0),
		ChatPrivacyMode(1),
		ChatPrivacyMode(2),
	}
}
func (e _ChatPrivacyMode) Item(name string) rbx.EnumItem {
	switch name {
	case "AllUsers":
		return ChatPrivacyMode(0)
	case "NoOne":
		return ChatPrivacyMode(1)
	case "Friends":
		return ChatPrivacyMode(2)
	}
	return nil
}

type ChatPrivacyMode uint

func (e ChatPrivacyMode) Type() string {
	return "Enum.ChatPrivacyMode"
}
func (e ChatPrivacyMode) String() string {
	return "Enum.ChatPrivacyMode." + e.Name()
}
func (e ChatPrivacyMode) Copy() rbx.Value {
	return e
}
func (e ChatPrivacyMode) Enum() rbx.Enum {
	return _ChatPrivacyMode{}
}
func (e ChatPrivacyMode) Value() int {
	return int(e)
}
func (e ChatPrivacyMode) Name() string {
	switch e {
	case 0:
		return "AllUsers"
	case 1:
		return "NoOne"
	case 2:
		return "Friends"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _ChatStyle struct{}

func (e _ChatStyle) Type() string {
	return "Enum"
}
func (e _ChatStyle) String() string {
	return "Enum.ChatStyle"
}
func (e _ChatStyle) Copy() rbx.Value {
	return e
}
func (e _ChatStyle) Name() string {
	return "ChatStyle"
}
func (e _ChatStyle) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		ChatStyle(0),
		ChatStyle(1),
		ChatStyle(2),
	}
}
func (e _ChatStyle) Item(name string) rbx.EnumItem {
	switch name {
	case "Classic":
		return ChatStyle(0)
	case "Bubble":
		return ChatStyle(1)
	case "ClassicAndBubble":
		return ChatStyle(2)
	}
	return nil
}

type ChatStyle uint

func (e ChatStyle) Type() string {
	return "Enum.ChatStyle"
}
func (e ChatStyle) String() string {
	return "Enum.ChatStyle." + e.Name()
}
func (e ChatStyle) Copy() rbx.Value {
	return e
}
func (e ChatStyle) Enum() rbx.Enum {
	return _ChatStyle{}
}
func (e ChatStyle) Value() int {
	return int(e)
}
func (e ChatStyle) Name() string {
	switch e {
	case 0:
		return "Classic"
	case 1:
		return "Bubble"
	case 2:
		return "ClassicAndBubble"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _CollisionFidelity struct{}

func (e _CollisionFidelity) Type() string {
	return "Enum"
}
func (e _CollisionFidelity) String() string {
	return "Enum.CollisionFidelity"
}
func (e _CollisionFidelity) Copy() rbx.Value {
	return e
}
func (e _CollisionFidelity) Name() string {
	return "CollisionFidelity"
}
func (e _CollisionFidelity) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		CollisionFidelity(0),
		CollisionFidelity(1),
		CollisionFidelity(2),
	}
}
func (e _CollisionFidelity) Item(name string) rbx.EnumItem {
	switch name {
	case "Default":
		return CollisionFidelity(0)
	case "Hull":
		return CollisionFidelity(1)
	case "Box":
		return CollisionFidelity(2)
	}
	return nil
}

type CollisionFidelity uint

func (e CollisionFidelity) Type() string {
	return "Enum.CollisionFidelity"
}
func (e CollisionFidelity) String() string {
	return "Enum.CollisionFidelity." + e.Name()
}
func (e CollisionFidelity) Copy() rbx.Value {
	return e
}
func (e CollisionFidelity) Enum() rbx.Enum {
	return _CollisionFidelity{}
}
func (e CollisionFidelity) Value() int {
	return int(e)
}
func (e CollisionFidelity) Name() string {
	switch e {
	case 0:
		return "Default"
	case 1:
		return "Hull"
	case 2:
		return "Box"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _ComputerCameraMovementMode struct{}

func (e _ComputerCameraMovementMode) Type() string {
	return "Enum"
}
func (e _ComputerCameraMovementMode) String() string {
	return "Enum.ComputerCameraMovementMode"
}
func (e _ComputerCameraMovementMode) Copy() rbx.Value {
	return e
}
func (e _ComputerCameraMovementMode) Name() string {
	return "ComputerCameraMovementMode"
}
func (e _ComputerCameraMovementMode) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		ComputerCameraMovementMode(0),
		ComputerCameraMovementMode(2),
		ComputerCameraMovementMode(1),
		ComputerCameraMovementMode(3),
	}
}
func (e _ComputerCameraMovementMode) Item(name string) rbx.EnumItem {
	switch name {
	case "Default":
		return ComputerCameraMovementMode(0)
	case "Follow":
		return ComputerCameraMovementMode(2)
	case "Classic":
		return ComputerCameraMovementMode(1)
	case "Orbital":
		return ComputerCameraMovementMode(3)
	}
	return nil
}

type ComputerCameraMovementMode uint

func (e ComputerCameraMovementMode) Type() string {
	return "Enum.ComputerCameraMovementMode"
}
func (e ComputerCameraMovementMode) String() string {
	return "Enum.ComputerCameraMovementMode." + e.Name()
}
func (e ComputerCameraMovementMode) Copy() rbx.Value {
	return e
}
func (e ComputerCameraMovementMode) Enum() rbx.Enum {
	return _ComputerCameraMovementMode{}
}
func (e ComputerCameraMovementMode) Value() int {
	return int(e)
}
func (e ComputerCameraMovementMode) Name() string {
	switch e {
	case 0:
		return "Default"
	case 2:
		return "Follow"
	case 1:
		return "Classic"
	case 3:
		return "Orbital"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _ComputerMovementMode struct{}

func (e _ComputerMovementMode) Type() string {
	return "Enum"
}
func (e _ComputerMovementMode) String() string {
	return "Enum.ComputerMovementMode"
}
func (e _ComputerMovementMode) Copy() rbx.Value {
	return e
}
func (e _ComputerMovementMode) Name() string {
	return "ComputerMovementMode"
}
func (e _ComputerMovementMode) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		ComputerMovementMode(0),
		ComputerMovementMode(1),
		ComputerMovementMode(2),
	}
}
func (e _ComputerMovementMode) Item(name string) rbx.EnumItem {
	switch name {
	case "Default":
		return ComputerMovementMode(0)
	case "KeyboardMouse":
		return ComputerMovementMode(1)
	case "ClickToMove":
		return ComputerMovementMode(2)
	}
	return nil
}

type ComputerMovementMode uint

func (e ComputerMovementMode) Type() string {
	return "Enum.ComputerMovementMode"
}
func (e ComputerMovementMode) String() string {
	return "Enum.ComputerMovementMode." + e.Name()
}
func (e ComputerMovementMode) Copy() rbx.Value {
	return e
}
func (e ComputerMovementMode) Enum() rbx.Enum {
	return _ComputerMovementMode{}
}
func (e ComputerMovementMode) Value() int {
	return int(e)
}
func (e ComputerMovementMode) Name() string {
	switch e {
	case 0:
		return "Default"
	case 1:
		return "KeyboardMouse"
	case 2:
		return "ClickToMove"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _ConnectionError struct{}

func (e _ConnectionError) Type() string {
	return "Enum"
}
func (e _ConnectionError) String() string {
	return "Enum.ConnectionError"
}
func (e _ConnectionError) Copy() rbx.Value {
	return e
}
func (e _ConnectionError) Name() string {
	return "ConnectionError"
}
func (e _ConnectionError) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		ConnectionError(0),
		ConnectionError(256),
		ConnectionError(257),
		ConnectionError(258),
		ConnectionError(272),
		ConnectionError(259),
		ConnectionError(260),
		ConnectionError(261),
		ConnectionError(262),
		ConnectionError(263),
		ConnectionError(264),
		ConnectionError(265),
		ConnectionError(266),
		ConnectionError(267),
		ConnectionError(268),
		ConnectionError(269),
		ConnectionError(270),
		ConnectionError(271),
		ConnectionError(273),
		ConnectionError(274),
		ConnectionError(275),
		ConnectionError(276),
		ConnectionError(277),
		ConnectionError(278),
		ConnectionError(279),
		ConnectionError(280),
		ConnectionError(281),
		ConnectionError(282),
		ConnectionError(512),
		ConnectionError(515),
		ConnectionError(516),
		ConnectionError(517),
		ConnectionError(518),
		ConnectionError(522),
		ConnectionError(523),
		ConnectionError(524),
		ConnectionError(525),
		ConnectionError(526),
		ConnectionError(527),
		ConnectionError(528),
		ConnectionError(529),
		ConnectionError(610),
		ConnectionError(611),
		ConnectionError(768),
		ConnectionError(769),
		ConnectionError(770),
		ConnectionError(771),
		ConnectionError(772),
		ConnectionError(773),
		ConnectionError(774),
		ConnectionError(775),
	}
}
func (e _ConnectionError) Item(name string) rbx.EnumItem {
	switch name {
	case "OK":
		return ConnectionError(0)
	case "DisconnectErrors":
		return ConnectionError(256)
	case "DisconnectBadhash":
		return ConnectionError(257)
	case "DisconnectSecurityKeyMismatch":
		return ConnectionError(258)
	case "DisconnectNewSecurityKeyMismatch":
		return ConnectionError(272)
	case "DisconnectProtocolMismatch":
		return ConnectionError(259)
	case "DisconnectReceivePacketError":
		return ConnectionError(260)
	case "DisconnectReceivePacketStreamError":
		return ConnectionError(261)
	case "DisconnectSendPacketError":
		return ConnectionError(262)
	case "DisconnectIllegalTeleport":
		return ConnectionError(263)
	case "DisconnectDuplicatePlayer":
		return ConnectionError(264)
	case "DisconnectDuplicateTicket":
		return ConnectionError(265)
	case "DisconnectTimeout":
		return ConnectionError(266)
	case "DisconnectLuaKick":
		return ConnectionError(267)
	case "DisconnectOnRemoteSysStats":
		return ConnectionError(268)
	case "DisconnectHashTimeout":
		return ConnectionError(269)
	case "DisconnectCloudEditKick":
		return ConnectionError(270)
	case "DisconnectPlayerless":
		return ConnectionError(271)
	case "DisconnectEvicted":
		return ConnectionError(273)
	case "DisconnectDevMaintenance":
		return ConnectionError(274)
	case "DisconnectRobloxMaintenance":
		return ConnectionError(275)
	case "DisconnectRejoin":
		return ConnectionError(276)
	case "DisconnectConnectionLost":
		return ConnectionError(277)
	case "DisconnectIdle":
		return ConnectionError(278)
	case "DisconnectRaknetErrors":
		return ConnectionError(279)
	case "DisconnectWrongVersion":
		return ConnectionError(280)
	case "DisconnectBySecurityPolicy":
		return ConnectionError(281)
	case "DisconnectBlockedIP":
		return ConnectionError(282)
	case "PlacelaunchErrors":
		return ConnectionError(512)
	case "PlacelaunchDisabled":
		return ConnectionError(515)
	case "PlacelaunchError":
		return ConnectionError(516)
	case "PlacelaunchGameEnded":
		return ConnectionError(517)
	case "PlacelaunchGameFull":
		return ConnectionError(518)
	case "PlacelaunchUserLeft":
		return ConnectionError(522)
	case "PlacelaunchRestricted":
		return ConnectionError(523)
	case "PlacelaunchUnauthorized":
		return ConnectionError(524)
	case "PlacelaunchFlooded":
		return ConnectionError(525)
	case "PlacelaunchHashExpired":
		return ConnectionError(526)
	case "PlacelaunchHashException":
		return ConnectionError(527)
	case "PlacelaunchPartyCannotFit":
		return ConnectionError(528)
	case "PlacelaunchHttpError":
		return ConnectionError(529)
	case "PlacelaunchCustomMessage":
		return ConnectionError(610)
	case "PlacelaunchOtherError":
		return ConnectionError(611)
	case "TeleportErrors":
		return ConnectionError(768)
	case "TeleportFailure":
		return ConnectionError(769)
	case "TeleportGameNotFound":
		return ConnectionError(770)
	case "TeleportGameEnded":
		return ConnectionError(771)
	case "TeleportGameFull":
		return ConnectionError(772)
	case "TeleportUnauthorized":
		return ConnectionError(773)
	case "TeleportFlooded":
		return ConnectionError(774)
	case "TeleportIsTeleporting":
		return ConnectionError(775)
	}
	return nil
}

type ConnectionError uint

func (e ConnectionError) Type() string {
	return "Enum.ConnectionError"
}
func (e ConnectionError) String() string {
	return "Enum.ConnectionError." + e.Name()
}
func (e ConnectionError) Copy() rbx.Value {
	return e
}
func (e ConnectionError) Enum() rbx.Enum {
	return _ConnectionError{}
}
func (e ConnectionError) Value() int {
	return int(e)
}
func (e ConnectionError) Name() string {
	switch e {
	case 0:
		return "OK"
	case 256:
		return "DisconnectErrors"
	case 257:
		return "DisconnectBadhash"
	case 258:
		return "DisconnectSecurityKeyMismatch"
	case 272:
		return "DisconnectNewSecurityKeyMismatch"
	case 259:
		return "DisconnectProtocolMismatch"
	case 260:
		return "DisconnectReceivePacketError"
	case 261:
		return "DisconnectReceivePacketStreamError"
	case 262:
		return "DisconnectSendPacketError"
	case 263:
		return "DisconnectIllegalTeleport"
	case 264:
		return "DisconnectDuplicatePlayer"
	case 265:
		return "DisconnectDuplicateTicket"
	case 266:
		return "DisconnectTimeout"
	case 267:
		return "DisconnectLuaKick"
	case 268:
		return "DisconnectOnRemoteSysStats"
	case 269:
		return "DisconnectHashTimeout"
	case 270:
		return "DisconnectCloudEditKick"
	case 271:
		return "DisconnectPlayerless"
	case 273:
		return "DisconnectEvicted"
	case 274:
		return "DisconnectDevMaintenance"
	case 275:
		return "DisconnectRobloxMaintenance"
	case 276:
		return "DisconnectRejoin"
	case 277:
		return "DisconnectConnectionLost"
	case 278:
		return "DisconnectIdle"
	case 279:
		return "DisconnectRaknetErrors"
	case 280:
		return "DisconnectWrongVersion"
	case 281:
		return "DisconnectBySecurityPolicy"
	case 282:
		return "DisconnectBlockedIP"
	case 512:
		return "PlacelaunchErrors"
	case 515:
		return "PlacelaunchDisabled"
	case 516:
		return "PlacelaunchError"
	case 517:
		return "PlacelaunchGameEnded"
	case 518:
		return "PlacelaunchGameFull"
	case 522:
		return "PlacelaunchUserLeft"
	case 523:
		return "PlacelaunchRestricted"
	case 524:
		return "PlacelaunchUnauthorized"
	case 525:
		return "PlacelaunchFlooded"
	case 526:
		return "PlacelaunchHashExpired"
	case 527:
		return "PlacelaunchHashException"
	case 528:
		return "PlacelaunchPartyCannotFit"
	case 529:
		return "PlacelaunchHttpError"
	case 610:
		return "PlacelaunchCustomMessage"
	case 611:
		return "PlacelaunchOtherError"
	case 768:
		return "TeleportErrors"
	case 769:
		return "TeleportFailure"
	case 770:
		return "TeleportGameNotFound"
	case 771:
		return "TeleportGameEnded"
	case 772:
		return "TeleportGameFull"
	case 773:
		return "TeleportUnauthorized"
	case 774:
		return "TeleportFlooded"
	case 775:
		return "TeleportIsTeleporting"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _ConnectionState struct{}

func (e _ConnectionState) Type() string {
	return "Enum"
}
func (e _ConnectionState) String() string {
	return "Enum.ConnectionState"
}
func (e _ConnectionState) Copy() rbx.Value {
	return e
}
func (e _ConnectionState) Name() string {
	return "ConnectionState"
}
func (e _ConnectionState) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		ConnectionState(0),
		ConnectionState(1),
	}
}
func (e _ConnectionState) Item(name string) rbx.EnumItem {
	switch name {
	case "Connected":
		return ConnectionState(0)
	case "Disconnected":
		return ConnectionState(1)
	}
	return nil
}

type ConnectionState uint

func (e ConnectionState) Type() string {
	return "Enum.ConnectionState"
}
func (e ConnectionState) String() string {
	return "Enum.ConnectionState." + e.Name()
}
func (e ConnectionState) Copy() rbx.Value {
	return e
}
func (e ConnectionState) Enum() rbx.Enum {
	return _ConnectionState{}
}
func (e ConnectionState) Value() int {
	return int(e)
}
func (e ConnectionState) Name() string {
	switch e {
	case 0:
		return "Connected"
	case 1:
		return "Disconnected"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _ContextActionPriority struct{}

func (e _ContextActionPriority) Type() string {
	return "Enum"
}
func (e _ContextActionPriority) String() string {
	return "Enum.ContextActionPriority"
}
func (e _ContextActionPriority) Copy() rbx.Value {
	return e
}
func (e _ContextActionPriority) Name() string {
	return "ContextActionPriority"
}
func (e _ContextActionPriority) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		ContextActionPriority(1000),
		ContextActionPriority(2000),
		ContextActionPriority(2000),
		ContextActionPriority(3000),
	}
}
func (e _ContextActionPriority) Item(name string) rbx.EnumItem {
	switch name {
	case "Low":
		return ContextActionPriority(1000)
	case "Medium":
		return ContextActionPriority(2000)
	case "Default":
		return ContextActionPriority(2000)
	case "High":
		return ContextActionPriority(3000)
	}
	return nil
}

type ContextActionPriority uint

func (e ContextActionPriority) Type() string {
	return "Enum.ContextActionPriority"
}
func (e ContextActionPriority) String() string {
	return "Enum.ContextActionPriority." + e.Name()
}
func (e ContextActionPriority) Copy() rbx.Value {
	return e
}
func (e ContextActionPriority) Enum() rbx.Enum {
	return _ContextActionPriority{}
}
func (e ContextActionPriority) Value() int {
	return int(e)
}
func (e ContextActionPriority) Name() string {
	switch e {
	case 1000:
		return "Low"
	case 2000:
		return "Default"
	case 3000:
		return "High"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _ContextActionResult struct{}

func (e _ContextActionResult) Type() string {
	return "Enum"
}
func (e _ContextActionResult) String() string {
	return "Enum.ContextActionResult"
}
func (e _ContextActionResult) Copy() rbx.Value {
	return e
}
func (e _ContextActionResult) Name() string {
	return "ContextActionResult"
}
func (e _ContextActionResult) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		ContextActionResult(1),
		ContextActionResult(0),
	}
}
func (e _ContextActionResult) Item(name string) rbx.EnumItem {
	switch name {
	case "Pass":
		return ContextActionResult(1)
	case "Sink":
		return ContextActionResult(0)
	}
	return nil
}

type ContextActionResult uint

func (e ContextActionResult) Type() string {
	return "Enum.ContextActionResult"
}
func (e ContextActionResult) String() string {
	return "Enum.ContextActionResult." + e.Name()
}
func (e ContextActionResult) Copy() rbx.Value {
	return e
}
func (e ContextActionResult) Enum() rbx.Enum {
	return _ContextActionResult{}
}
func (e ContextActionResult) Value() int {
	return int(e)
}
func (e ContextActionResult) Name() string {
	switch e {
	case 1:
		return "Pass"
	case 0:
		return "Sink"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _ControlMode struct{}

func (e _ControlMode) Type() string {
	return "Enum"
}
func (e _ControlMode) String() string {
	return "Enum.ControlMode"
}
func (e _ControlMode) Copy() rbx.Value {
	return e
}
func (e _ControlMode) Name() string {
	return "ControlMode"
}
func (e _ControlMode) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		ControlMode(1),
		ControlMode(0),
	}
}
func (e _ControlMode) Item(name string) rbx.EnumItem {
	switch name {
	case "MouseLockSwitch":
		return ControlMode(1)
	case "Classic":
		return ControlMode(0)
	}
	return nil
}

type ControlMode uint

func (e ControlMode) Type() string {
	return "Enum.ControlMode"
}
func (e ControlMode) String() string {
	return "Enum.ControlMode." + e.Name()
}
func (e ControlMode) Copy() rbx.Value {
	return e
}
func (e ControlMode) Enum() rbx.Enum {
	return _ControlMode{}
}
func (e ControlMode) Value() int {
	return int(e)
}
func (e ControlMode) Name() string {
	switch e {
	case 1:
		return "MouseLockSwitch"
	case 0:
		return "Classic"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _CoreGuiType struct{}

func (e _CoreGuiType) Type() string {
	return "Enum"
}
func (e _CoreGuiType) String() string {
	return "Enum.CoreGuiType"
}
func (e _CoreGuiType) Copy() rbx.Value {
	return e
}
func (e _CoreGuiType) Name() string {
	return "CoreGuiType"
}
func (e _CoreGuiType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		CoreGuiType(0),
		CoreGuiType(1),
		CoreGuiType(2),
		CoreGuiType(3),
		CoreGuiType(4),
		CoreGuiType(5),
	}
}
func (e _CoreGuiType) Item(name string) rbx.EnumItem {
	switch name {
	case "PlayerList":
		return CoreGuiType(0)
	case "Health":
		return CoreGuiType(1)
	case "Backpack":
		return CoreGuiType(2)
	case "Chat":
		return CoreGuiType(3)
	case "All":
		return CoreGuiType(4)
	case "EmotesMenu":
		return CoreGuiType(5)
	}
	return nil
}

type CoreGuiType uint

func (e CoreGuiType) Type() string {
	return "Enum.CoreGuiType"
}
func (e CoreGuiType) String() string {
	return "Enum.CoreGuiType." + e.Name()
}
func (e CoreGuiType) Copy() rbx.Value {
	return e
}
func (e CoreGuiType) Enum() rbx.Enum {
	return _CoreGuiType{}
}
func (e CoreGuiType) Value() int {
	return int(e)
}
func (e CoreGuiType) Name() string {
	switch e {
	case 0:
		return "PlayerList"
	case 1:
		return "Health"
	case 2:
		return "Backpack"
	case 3:
		return "Chat"
	case 4:
		return "All"
	case 5:
		return "EmotesMenu"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _CreatorType struct{}

func (e _CreatorType) Type() string {
	return "Enum"
}
func (e _CreatorType) String() string {
	return "Enum.CreatorType"
}
func (e _CreatorType) Copy() rbx.Value {
	return e
}
func (e _CreatorType) Name() string {
	return "CreatorType"
}
func (e _CreatorType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		CreatorType(0),
		CreatorType(1),
	}
}
func (e _CreatorType) Item(name string) rbx.EnumItem {
	switch name {
	case "User":
		return CreatorType(0)
	case "Group":
		return CreatorType(1)
	}
	return nil
}

type CreatorType uint

func (e CreatorType) Type() string {
	return "Enum.CreatorType"
}
func (e CreatorType) String() string {
	return "Enum.CreatorType." + e.Name()
}
func (e CreatorType) Copy() rbx.Value {
	return e
}
func (e CreatorType) Enum() rbx.Enum {
	return _CreatorType{}
}
func (e CreatorType) Value() int {
	return int(e)
}
func (e CreatorType) Name() string {
	switch e {
	case 0:
		return "User"
	case 1:
		return "Group"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _CurrencyType struct{}

func (e _CurrencyType) Type() string {
	return "Enum"
}
func (e _CurrencyType) String() string {
	return "Enum.CurrencyType"
}
func (e _CurrencyType) Copy() rbx.Value {
	return e
}
func (e _CurrencyType) Name() string {
	return "CurrencyType"
}
func (e _CurrencyType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		CurrencyType(0),
		CurrencyType(1),
		CurrencyType(2),
	}
}
func (e _CurrencyType) Item(name string) rbx.EnumItem {
	switch name {
	case "Default":
		return CurrencyType(0)
	case "Robux":
		return CurrencyType(1)
	case "Tix":
		return CurrencyType(2)
	}
	return nil
}

type CurrencyType uint

func (e CurrencyType) Type() string {
	return "Enum.CurrencyType"
}
func (e CurrencyType) String() string {
	return "Enum.CurrencyType." + e.Name()
}
func (e CurrencyType) Copy() rbx.Value {
	return e
}
func (e CurrencyType) Enum() rbx.Enum {
	return _CurrencyType{}
}
func (e CurrencyType) Value() int {
	return int(e)
}
func (e CurrencyType) Name() string {
	switch e {
	case 0:
		return "Default"
	case 1:
		return "Robux"
	case 2:
		return "Tix"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _CustomCameraMode struct{}

func (e _CustomCameraMode) Type() string {
	return "Enum"
}
func (e _CustomCameraMode) String() string {
	return "Enum.CustomCameraMode"
}
func (e _CustomCameraMode) Copy() rbx.Value {
	return e
}
func (e _CustomCameraMode) Name() string {
	return "CustomCameraMode"
}
func (e _CustomCameraMode) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		CustomCameraMode(0),
		CustomCameraMode(2),
		CustomCameraMode(1),
	}
}
func (e _CustomCameraMode) Item(name string) rbx.EnumItem {
	switch name {
	case "Default":
		return CustomCameraMode(0)
	case "Follow":
		return CustomCameraMode(2)
	case "Classic":
		return CustomCameraMode(1)
	}
	return nil
}

type CustomCameraMode uint

func (e CustomCameraMode) Type() string {
	return "Enum.CustomCameraMode"
}
func (e CustomCameraMode) String() string {
	return "Enum.CustomCameraMode." + e.Name()
}
func (e CustomCameraMode) Copy() rbx.Value {
	return e
}
func (e CustomCameraMode) Enum() rbx.Enum {
	return _CustomCameraMode{}
}
func (e CustomCameraMode) Value() int {
	return int(e)
}
func (e CustomCameraMode) Name() string {
	switch e {
	case 0:
		return "Default"
	case 2:
		return "Follow"
	case 1:
		return "Classic"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _DataStoreRequestType struct{}

func (e _DataStoreRequestType) Type() string {
	return "Enum"
}
func (e _DataStoreRequestType) String() string {
	return "Enum.DataStoreRequestType"
}
func (e _DataStoreRequestType) Copy() rbx.Value {
	return e
}
func (e _DataStoreRequestType) Name() string {
	return "DataStoreRequestType"
}
func (e _DataStoreRequestType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		DataStoreRequestType(0),
		DataStoreRequestType(1),
		DataStoreRequestType(2),
		DataStoreRequestType(3),
		DataStoreRequestType(4),
		DataStoreRequestType(5),
	}
}
func (e _DataStoreRequestType) Item(name string) rbx.EnumItem {
	switch name {
	case "GetAsync":
		return DataStoreRequestType(0)
	case "SetIncrementAsync":
		return DataStoreRequestType(1)
	case "UpdateAsync":
		return DataStoreRequestType(2)
	case "GetSortedAsync":
		return DataStoreRequestType(3)
	case "SetIncrementSortedAsync":
		return DataStoreRequestType(4)
	case "OnUpdate":
		return DataStoreRequestType(5)
	}
	return nil
}

type DataStoreRequestType uint

func (e DataStoreRequestType) Type() string {
	return "Enum.DataStoreRequestType"
}
func (e DataStoreRequestType) String() string {
	return "Enum.DataStoreRequestType." + e.Name()
}
func (e DataStoreRequestType) Copy() rbx.Value {
	return e
}
func (e DataStoreRequestType) Enum() rbx.Enum {
	return _DataStoreRequestType{}
}
func (e DataStoreRequestType) Value() int {
	return int(e)
}
func (e DataStoreRequestType) Name() string {
	switch e {
	case 0:
		return "GetAsync"
	case 1:
		return "SetIncrementAsync"
	case 2:
		return "UpdateAsync"
	case 3:
		return "GetSortedAsync"
	case 4:
		return "SetIncrementSortedAsync"
	case 5:
		return "OnUpdate"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _DateTimeKind struct{}

func (e _DateTimeKind) Type() string {
	return "Enum"
}
func (e _DateTimeKind) String() string {
	return "Enum.DateTimeKind"
}
func (e _DateTimeKind) Copy() rbx.Value {
	return e
}
func (e _DateTimeKind) Name() string {
	return "DateTimeKind"
}
func (e _DateTimeKind) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		DateTimeKind(0),
		DateTimeKind(1),
	}
}
func (e _DateTimeKind) Item(name string) rbx.EnumItem {
	switch name {
	case "Utc":
		return DateTimeKind(0)
	case "Local":
		return DateTimeKind(1)
	}
	return nil
}

type DateTimeKind uint

func (e DateTimeKind) Type() string {
	return "Enum.DateTimeKind"
}
func (e DateTimeKind) String() string {
	return "Enum.DateTimeKind." + e.Name()
}
func (e DateTimeKind) Copy() rbx.Value {
	return e
}
func (e DateTimeKind) Enum() rbx.Enum {
	return _DateTimeKind{}
}
func (e DateTimeKind) Value() int {
	return int(e)
}
func (e DateTimeKind) Name() string {
	switch e {
	case 0:
		return "Utc"
	case 1:
		return "Local"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _DevCameraOcclusionMode struct{}

func (e _DevCameraOcclusionMode) Type() string {
	return "Enum"
}
func (e _DevCameraOcclusionMode) String() string {
	return "Enum.DevCameraOcclusionMode"
}
func (e _DevCameraOcclusionMode) Copy() rbx.Value {
	return e
}
func (e _DevCameraOcclusionMode) Name() string {
	return "DevCameraOcclusionMode"
}
func (e _DevCameraOcclusionMode) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		DevCameraOcclusionMode(0),
		DevCameraOcclusionMode(1),
	}
}
func (e _DevCameraOcclusionMode) Item(name string) rbx.EnumItem {
	switch name {
	case "Zoom":
		return DevCameraOcclusionMode(0)
	case "Invisicam":
		return DevCameraOcclusionMode(1)
	}
	return nil
}

type DevCameraOcclusionMode uint

func (e DevCameraOcclusionMode) Type() string {
	return "Enum.DevCameraOcclusionMode"
}
func (e DevCameraOcclusionMode) String() string {
	return "Enum.DevCameraOcclusionMode." + e.Name()
}
func (e DevCameraOcclusionMode) Copy() rbx.Value {
	return e
}
func (e DevCameraOcclusionMode) Enum() rbx.Enum {
	return _DevCameraOcclusionMode{}
}
func (e DevCameraOcclusionMode) Value() int {
	return int(e)
}
func (e DevCameraOcclusionMode) Name() string {
	switch e {
	case 0:
		return "Zoom"
	case 1:
		return "Invisicam"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _DevComputerCameraMovementMode struct{}

func (e _DevComputerCameraMovementMode) Type() string {
	return "Enum"
}
func (e _DevComputerCameraMovementMode) String() string {
	return "Enum.DevComputerCameraMovementMode"
}
func (e _DevComputerCameraMovementMode) Copy() rbx.Value {
	return e
}
func (e _DevComputerCameraMovementMode) Name() string {
	return "DevComputerCameraMovementMode"
}
func (e _DevComputerCameraMovementMode) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		DevComputerCameraMovementMode(0),
		DevComputerCameraMovementMode(1),
		DevComputerCameraMovementMode(2),
		DevComputerCameraMovementMode(3),
	}
}
func (e _DevComputerCameraMovementMode) Item(name string) rbx.EnumItem {
	switch name {
	case "UserChoice":
		return DevComputerCameraMovementMode(0)
	case "Classic":
		return DevComputerCameraMovementMode(1)
	case "Follow":
		return DevComputerCameraMovementMode(2)
	case "Orbital":
		return DevComputerCameraMovementMode(3)
	}
	return nil
}

type DevComputerCameraMovementMode uint

func (e DevComputerCameraMovementMode) Type() string {
	return "Enum.DevComputerCameraMovementMode"
}
func (e DevComputerCameraMovementMode) String() string {
	return "Enum.DevComputerCameraMovementMode." + e.Name()
}
func (e DevComputerCameraMovementMode) Copy() rbx.Value {
	return e
}
func (e DevComputerCameraMovementMode) Enum() rbx.Enum {
	return _DevComputerCameraMovementMode{}
}
func (e DevComputerCameraMovementMode) Value() int {
	return int(e)
}
func (e DevComputerCameraMovementMode) Name() string {
	switch e {
	case 0:
		return "UserChoice"
	case 1:
		return "Classic"
	case 2:
		return "Follow"
	case 3:
		return "Orbital"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _DevComputerMovementMode struct{}

func (e _DevComputerMovementMode) Type() string {
	return "Enum"
}
func (e _DevComputerMovementMode) String() string {
	return "Enum.DevComputerMovementMode"
}
func (e _DevComputerMovementMode) Copy() rbx.Value {
	return e
}
func (e _DevComputerMovementMode) Name() string {
	return "DevComputerMovementMode"
}
func (e _DevComputerMovementMode) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		DevComputerMovementMode(0),
		DevComputerMovementMode(1),
		DevComputerMovementMode(2),
		DevComputerMovementMode(3),
	}
}
func (e _DevComputerMovementMode) Item(name string) rbx.EnumItem {
	switch name {
	case "UserChoice":
		return DevComputerMovementMode(0)
	case "KeyboardMouse":
		return DevComputerMovementMode(1)
	case "ClickToMove":
		return DevComputerMovementMode(2)
	case "Scriptable":
		return DevComputerMovementMode(3)
	}
	return nil
}

type DevComputerMovementMode uint

func (e DevComputerMovementMode) Type() string {
	return "Enum.DevComputerMovementMode"
}
func (e DevComputerMovementMode) String() string {
	return "Enum.DevComputerMovementMode." + e.Name()
}
func (e DevComputerMovementMode) Copy() rbx.Value {
	return e
}
func (e DevComputerMovementMode) Enum() rbx.Enum {
	return _DevComputerMovementMode{}
}
func (e DevComputerMovementMode) Value() int {
	return int(e)
}
func (e DevComputerMovementMode) Name() string {
	switch e {
	case 0:
		return "UserChoice"
	case 1:
		return "KeyboardMouse"
	case 2:
		return "ClickToMove"
	case 3:
		return "Scriptable"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _DevTouchCameraMovementMode struct{}

func (e _DevTouchCameraMovementMode) Type() string {
	return "Enum"
}
func (e _DevTouchCameraMovementMode) String() string {
	return "Enum.DevTouchCameraMovementMode"
}
func (e _DevTouchCameraMovementMode) Copy() rbx.Value {
	return e
}
func (e _DevTouchCameraMovementMode) Name() string {
	return "DevTouchCameraMovementMode"
}
func (e _DevTouchCameraMovementMode) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		DevTouchCameraMovementMode(0),
		DevTouchCameraMovementMode(1),
		DevTouchCameraMovementMode(2),
		DevTouchCameraMovementMode(3),
	}
}
func (e _DevTouchCameraMovementMode) Item(name string) rbx.EnumItem {
	switch name {
	case "UserChoice":
		return DevTouchCameraMovementMode(0)
	case "Classic":
		return DevTouchCameraMovementMode(1)
	case "Follow":
		return DevTouchCameraMovementMode(2)
	case "Orbital":
		return DevTouchCameraMovementMode(3)
	}
	return nil
}

type DevTouchCameraMovementMode uint

func (e DevTouchCameraMovementMode) Type() string {
	return "Enum.DevTouchCameraMovementMode"
}
func (e DevTouchCameraMovementMode) String() string {
	return "Enum.DevTouchCameraMovementMode." + e.Name()
}
func (e DevTouchCameraMovementMode) Copy() rbx.Value {
	return e
}
func (e DevTouchCameraMovementMode) Enum() rbx.Enum {
	return _DevTouchCameraMovementMode{}
}
func (e DevTouchCameraMovementMode) Value() int {
	return int(e)
}
func (e DevTouchCameraMovementMode) Name() string {
	switch e {
	case 0:
		return "UserChoice"
	case 1:
		return "Classic"
	case 2:
		return "Follow"
	case 3:
		return "Orbital"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _DevTouchMovementMode struct{}

func (e _DevTouchMovementMode) Type() string {
	return "Enum"
}
func (e _DevTouchMovementMode) String() string {
	return "Enum.DevTouchMovementMode"
}
func (e _DevTouchMovementMode) Copy() rbx.Value {
	return e
}
func (e _DevTouchMovementMode) Name() string {
	return "DevTouchMovementMode"
}
func (e _DevTouchMovementMode) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		DevTouchMovementMode(0),
		DevTouchMovementMode(1),
		DevTouchMovementMode(2),
		DevTouchMovementMode(3),
		DevTouchMovementMode(4),
		DevTouchMovementMode(5),
		DevTouchMovementMode(6),
	}
}
func (e _DevTouchMovementMode) Item(name string) rbx.EnumItem {
	switch name {
	case "UserChoice":
		return DevTouchMovementMode(0)
	case "Thumbstick":
		return DevTouchMovementMode(1)
	case "DPad":
		return DevTouchMovementMode(2)
	case "Thumbpad":
		return DevTouchMovementMode(3)
	case "ClickToMove":
		return DevTouchMovementMode(4)
	case "Scriptable":
		return DevTouchMovementMode(5)
	case "DynamicThumbstick":
		return DevTouchMovementMode(6)
	}
	return nil
}

type DevTouchMovementMode uint

func (e DevTouchMovementMode) Type() string {
	return "Enum.DevTouchMovementMode"
}
func (e DevTouchMovementMode) String() string {
	return "Enum.DevTouchMovementMode." + e.Name()
}
func (e DevTouchMovementMode) Copy() rbx.Value {
	return e
}
func (e DevTouchMovementMode) Enum() rbx.Enum {
	return _DevTouchMovementMode{}
}
func (e DevTouchMovementMode) Value() int {
	return int(e)
}
func (e DevTouchMovementMode) Name() string {
	switch e {
	case 0:
		return "UserChoice"
	case 1:
		return "Thumbstick"
	case 2:
		return "DPad"
	case 3:
		return "Thumbpad"
	case 4:
		return "ClickToMove"
	case 5:
		return "Scriptable"
	case 6:
		return "DynamicThumbstick"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _DeveloperMemoryTag struct{}

func (e _DeveloperMemoryTag) Type() string {
	return "Enum"
}
func (e _DeveloperMemoryTag) String() string {
	return "Enum.DeveloperMemoryTag"
}
func (e _DeveloperMemoryTag) Copy() rbx.Value {
	return e
}
func (e _DeveloperMemoryTag) Name() string {
	return "DeveloperMemoryTag"
}
func (e _DeveloperMemoryTag) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		DeveloperMemoryTag(0),
		DeveloperMemoryTag(1),
		DeveloperMemoryTag(2),
		DeveloperMemoryTag(3),
		DeveloperMemoryTag(4),
		DeveloperMemoryTag(5),
		DeveloperMemoryTag(6),
		DeveloperMemoryTag(7),
		DeveloperMemoryTag(8),
		DeveloperMemoryTag(9),
		DeveloperMemoryTag(10),
		DeveloperMemoryTag(11),
		DeveloperMemoryTag(12),
		DeveloperMemoryTag(13),
		DeveloperMemoryTag(14),
		DeveloperMemoryTag(15),
		DeveloperMemoryTag(16),
		DeveloperMemoryTag(17),
		DeveloperMemoryTag(18),
		DeveloperMemoryTag(20),
		DeveloperMemoryTag(21),
		DeveloperMemoryTag(22),
	}
}
func (e _DeveloperMemoryTag) Item(name string) rbx.EnumItem {
	switch name {
	case "Internal":
		return DeveloperMemoryTag(0)
	case "HttpCache":
		return DeveloperMemoryTag(1)
	case "Instances":
		return DeveloperMemoryTag(2)
	case "Signals":
		return DeveloperMemoryTag(3)
	case "LuaHeap":
		return DeveloperMemoryTag(4)
	case "Script":
		return DeveloperMemoryTag(5)
	case "PhysicsCollision":
		return DeveloperMemoryTag(6)
	case "PhysicsParts":
		return DeveloperMemoryTag(7)
	case "GraphicsSolidModels":
		return DeveloperMemoryTag(8)
	case "GraphicsMeshParts":
		return DeveloperMemoryTag(9)
	case "GraphicsParticles":
		return DeveloperMemoryTag(10)
	case "GraphicsParts":
		return DeveloperMemoryTag(11)
	case "GraphicsSpatialHash":
		return DeveloperMemoryTag(12)
	case "GraphicsTerrain":
		return DeveloperMemoryTag(13)
	case "GraphicsTexture":
		return DeveloperMemoryTag(14)
	case "GraphicsTextureCharacter":
		return DeveloperMemoryTag(15)
	case "Sounds":
		return DeveloperMemoryTag(16)
	case "StreamingSounds":
		return DeveloperMemoryTag(17)
	case "TerrainVoxels":
		return DeveloperMemoryTag(18)
	case "Gui":
		return DeveloperMemoryTag(20)
	case "Animation":
		return DeveloperMemoryTag(21)
	case "Navigation":
		return DeveloperMemoryTag(22)
	}
	return nil
}

type DeveloperMemoryTag uint

func (e DeveloperMemoryTag) Type() string {
	return "Enum.DeveloperMemoryTag"
}
func (e DeveloperMemoryTag) String() string {
	return "Enum.DeveloperMemoryTag." + e.Name()
}
func (e DeveloperMemoryTag) Copy() rbx.Value {
	return e
}
func (e DeveloperMemoryTag) Enum() rbx.Enum {
	return _DeveloperMemoryTag{}
}
func (e DeveloperMemoryTag) Value() int {
	return int(e)
}
func (e DeveloperMemoryTag) Name() string {
	switch e {
	case 0:
		return "Internal"
	case 1:
		return "HttpCache"
	case 2:
		return "Instances"
	case 3:
		return "Signals"
	case 4:
		return "LuaHeap"
	case 5:
		return "Script"
	case 6:
		return "PhysicsCollision"
	case 7:
		return "PhysicsParts"
	case 8:
		return "GraphicsSolidModels"
	case 9:
		return "GraphicsMeshParts"
	case 10:
		return "GraphicsParticles"
	case 11:
		return "GraphicsParts"
	case 12:
		return "GraphicsSpatialHash"
	case 13:
		return "GraphicsTerrain"
	case 14:
		return "GraphicsTexture"
	case 15:
		return "GraphicsTextureCharacter"
	case 16:
		return "Sounds"
	case 17:
		return "StreamingSounds"
	case 18:
		return "TerrainVoxels"
	case 20:
		return "Gui"
	case 21:
		return "Animation"
	case 22:
		return "Navigation"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _DeviceType struct{}

func (e _DeviceType) Type() string {
	return "Enum"
}
func (e _DeviceType) String() string {
	return "Enum.DeviceType"
}
func (e _DeviceType) Copy() rbx.Value {
	return e
}
func (e _DeviceType) Name() string {
	return "DeviceType"
}
func (e _DeviceType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		DeviceType(0),
		DeviceType(1),
		DeviceType(2),
		DeviceType(3),
	}
}
func (e _DeviceType) Item(name string) rbx.EnumItem {
	switch name {
	case "Unknown":
		return DeviceType(0)
	case "Desktop":
		return DeviceType(1)
	case "Tablet":
		return DeviceType(2)
	case "Phone":
		return DeviceType(3)
	}
	return nil
}

type DeviceType uint

func (e DeviceType) Type() string {
	return "Enum.DeviceType"
}
func (e DeviceType) String() string {
	return "Enum.DeviceType." + e.Name()
}
func (e DeviceType) Copy() rbx.Value {
	return e
}
func (e DeviceType) Enum() rbx.Enum {
	return _DeviceType{}
}
func (e DeviceType) Value() int {
	return int(e)
}
func (e DeviceType) Name() string {
	switch e {
	case 0:
		return "Unknown"
	case 1:
		return "Desktop"
	case 2:
		return "Tablet"
	case 3:
		return "Phone"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _DialogBehaviorType struct{}

func (e _DialogBehaviorType) Type() string {
	return "Enum"
}
func (e _DialogBehaviorType) String() string {
	return "Enum.DialogBehaviorType"
}
func (e _DialogBehaviorType) Copy() rbx.Value {
	return e
}
func (e _DialogBehaviorType) Name() string {
	return "DialogBehaviorType"
}
func (e _DialogBehaviorType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		DialogBehaviorType(0),
		DialogBehaviorType(1),
	}
}
func (e _DialogBehaviorType) Item(name string) rbx.EnumItem {
	switch name {
	case "SinglePlayer":
		return DialogBehaviorType(0)
	case "MultiplePlayers":
		return DialogBehaviorType(1)
	}
	return nil
}

type DialogBehaviorType uint

func (e DialogBehaviorType) Type() string {
	return "Enum.DialogBehaviorType"
}
func (e DialogBehaviorType) String() string {
	return "Enum.DialogBehaviorType." + e.Name()
}
func (e DialogBehaviorType) Copy() rbx.Value {
	return e
}
func (e DialogBehaviorType) Enum() rbx.Enum {
	return _DialogBehaviorType{}
}
func (e DialogBehaviorType) Value() int {
	return int(e)
}
func (e DialogBehaviorType) Name() string {
	switch e {
	case 0:
		return "SinglePlayer"
	case 1:
		return "MultiplePlayers"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _DialogPurpose struct{}

func (e _DialogPurpose) Type() string {
	return "Enum"
}
func (e _DialogPurpose) String() string {
	return "Enum.DialogPurpose"
}
func (e _DialogPurpose) Copy() rbx.Value {
	return e
}
func (e _DialogPurpose) Name() string {
	return "DialogPurpose"
}
func (e _DialogPurpose) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		DialogPurpose(0),
		DialogPurpose(1),
		DialogPurpose(2),
	}
}
func (e _DialogPurpose) Item(name string) rbx.EnumItem {
	switch name {
	case "Quest":
		return DialogPurpose(0)
	case "Help":
		return DialogPurpose(1)
	case "Shop":
		return DialogPurpose(2)
	}
	return nil
}

type DialogPurpose uint

func (e DialogPurpose) Type() string {
	return "Enum.DialogPurpose"
}
func (e DialogPurpose) String() string {
	return "Enum.DialogPurpose." + e.Name()
}
func (e DialogPurpose) Copy() rbx.Value {
	return e
}
func (e DialogPurpose) Enum() rbx.Enum {
	return _DialogPurpose{}
}
func (e DialogPurpose) Value() int {
	return int(e)
}
func (e DialogPurpose) Name() string {
	switch e {
	case 0:
		return "Quest"
	case 1:
		return "Help"
	case 2:
		return "Shop"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _DialogTone struct{}

func (e _DialogTone) Type() string {
	return "Enum"
}
func (e _DialogTone) String() string {
	return "Enum.DialogTone"
}
func (e _DialogTone) Copy() rbx.Value {
	return e
}
func (e _DialogTone) Name() string {
	return "DialogTone"
}
func (e _DialogTone) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		DialogTone(0),
		DialogTone(1),
		DialogTone(2),
	}
}
func (e _DialogTone) Item(name string) rbx.EnumItem {
	switch name {
	case "Neutral":
		return DialogTone(0)
	case "Friendly":
		return DialogTone(1)
	case "Enemy":
		return DialogTone(2)
	}
	return nil
}

type DialogTone uint

func (e DialogTone) Type() string {
	return "Enum.DialogTone"
}
func (e DialogTone) String() string {
	return "Enum.DialogTone." + e.Name()
}
func (e DialogTone) Copy() rbx.Value {
	return e
}
func (e DialogTone) Enum() rbx.Enum {
	return _DialogTone{}
}
func (e DialogTone) Value() int {
	return int(e)
}
func (e DialogTone) Name() string {
	switch e {
	case 0:
		return "Neutral"
	case 1:
		return "Friendly"
	case 2:
		return "Enemy"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _DominantAxis struct{}

func (e _DominantAxis) Type() string {
	return "Enum"
}
func (e _DominantAxis) String() string {
	return "Enum.DominantAxis"
}
func (e _DominantAxis) Copy() rbx.Value {
	return e
}
func (e _DominantAxis) Name() string {
	return "DominantAxis"
}
func (e _DominantAxis) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		DominantAxis(0),
		DominantAxis(1),
	}
}
func (e _DominantAxis) Item(name string) rbx.EnumItem {
	switch name {
	case "Width":
		return DominantAxis(0)
	case "Height":
		return DominantAxis(1)
	}
	return nil
}

type DominantAxis uint

func (e DominantAxis) Type() string {
	return "Enum.DominantAxis"
}
func (e DominantAxis) String() string {
	return "Enum.DominantAxis." + e.Name()
}
func (e DominantAxis) Copy() rbx.Value {
	return e
}
func (e DominantAxis) Enum() rbx.Enum {
	return _DominantAxis{}
}
func (e DominantAxis) Value() int {
	return int(e)
}
func (e DominantAxis) Name() string {
	switch e {
	case 0:
		return "Width"
	case 1:
		return "Height"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _DraftStatusCode struct{}

func (e _DraftStatusCode) Type() string {
	return "Enum"
}
func (e _DraftStatusCode) String() string {
	return "Enum.DraftStatusCode"
}
func (e _DraftStatusCode) Copy() rbx.Value {
	return e
}
func (e _DraftStatusCode) Name() string {
	return "DraftStatusCode"
}
func (e _DraftStatusCode) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		DraftStatusCode(0),
		DraftStatusCode(1),
		DraftStatusCode(2),
	}
}
func (e _DraftStatusCode) Item(name string) rbx.EnumItem {
	switch name {
	case "OK":
		return DraftStatusCode(0)
	case "DraftOutdated":
		return DraftStatusCode(1)
	case "ScriptRemoved":
		return DraftStatusCode(2)
	}
	return nil
}

type DraftStatusCode uint

func (e DraftStatusCode) Type() string {
	return "Enum.DraftStatusCode"
}
func (e DraftStatusCode) String() string {
	return "Enum.DraftStatusCode." + e.Name()
}
func (e DraftStatusCode) Copy() rbx.Value {
	return e
}
func (e DraftStatusCode) Enum() rbx.Enum {
	return _DraftStatusCode{}
}
func (e DraftStatusCode) Value() int {
	return int(e)
}
func (e DraftStatusCode) Name() string {
	switch e {
	case 0:
		return "OK"
	case 1:
		return "DraftOutdated"
	case 2:
		return "ScriptRemoved"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _EasingDirection struct{}

func (e _EasingDirection) Type() string {
	return "Enum"
}
func (e _EasingDirection) String() string {
	return "Enum.EasingDirection"
}
func (e _EasingDirection) Copy() rbx.Value {
	return e
}
func (e _EasingDirection) Name() string {
	return "EasingDirection"
}
func (e _EasingDirection) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		EasingDirection(0),
		EasingDirection(1),
		EasingDirection(2),
	}
}
func (e _EasingDirection) Item(name string) rbx.EnumItem {
	switch name {
	case "In":
		return EasingDirection(0)
	case "Out":
		return EasingDirection(1)
	case "InOut":
		return EasingDirection(2)
	}
	return nil
}

type EasingDirection uint

func (e EasingDirection) Type() string {
	return "Enum.EasingDirection"
}
func (e EasingDirection) String() string {
	return "Enum.EasingDirection." + e.Name()
}
func (e EasingDirection) Copy() rbx.Value {
	return e
}
func (e EasingDirection) Enum() rbx.Enum {
	return _EasingDirection{}
}
func (e EasingDirection) Value() int {
	return int(e)
}
func (e EasingDirection) Name() string {
	switch e {
	case 0:
		return "In"
	case 1:
		return "Out"
	case 2:
		return "InOut"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _EasingStyle struct{}

func (e _EasingStyle) Type() string {
	return "Enum"
}
func (e _EasingStyle) String() string {
	return "Enum.EasingStyle"
}
func (e _EasingStyle) Copy() rbx.Value {
	return e
}
func (e _EasingStyle) Name() string {
	return "EasingStyle"
}
func (e _EasingStyle) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		EasingStyle(0),
		EasingStyle(1),
		EasingStyle(2),
		EasingStyle(3),
		EasingStyle(4),
		EasingStyle(5),
		EasingStyle(6),
		EasingStyle(7),
		EasingStyle(8),
		EasingStyle(9),
		EasingStyle(10),
	}
}
func (e _EasingStyle) Item(name string) rbx.EnumItem {
	switch name {
	case "Linear":
		return EasingStyle(0)
	case "Sine":
		return EasingStyle(1)
	case "Back":
		return EasingStyle(2)
	case "Quad":
		return EasingStyle(3)
	case "Quart":
		return EasingStyle(4)
	case "Quint":
		return EasingStyle(5)
	case "Bounce":
		return EasingStyle(6)
	case "Elastic":
		return EasingStyle(7)
	case "Exponential":
		return EasingStyle(8)
	case "Circular":
		return EasingStyle(9)
	case "Cubic":
		return EasingStyle(10)
	}
	return nil
}

type EasingStyle uint

func (e EasingStyle) Type() string {
	return "Enum.EasingStyle"
}
func (e EasingStyle) String() string {
	return "Enum.EasingStyle." + e.Name()
}
func (e EasingStyle) Copy() rbx.Value {
	return e
}
func (e EasingStyle) Enum() rbx.Enum {
	return _EasingStyle{}
}
func (e EasingStyle) Value() int {
	return int(e)
}
func (e EasingStyle) Name() string {
	switch e {
	case 0:
		return "Linear"
	case 1:
		return "Sine"
	case 2:
		return "Back"
	case 3:
		return "Quad"
	case 4:
		return "Quart"
	case 5:
		return "Quint"
	case 6:
		return "Bounce"
	case 7:
		return "Elastic"
	case 8:
		return "Exponential"
	case 9:
		return "Circular"
	case 10:
		return "Cubic"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _ElasticBehavior struct{}

func (e _ElasticBehavior) Type() string {
	return "Enum"
}
func (e _ElasticBehavior) String() string {
	return "Enum.ElasticBehavior"
}
func (e _ElasticBehavior) Copy() rbx.Value {
	return e
}
func (e _ElasticBehavior) Name() string {
	return "ElasticBehavior"
}
func (e _ElasticBehavior) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		ElasticBehavior(0),
		ElasticBehavior(1),
		ElasticBehavior(2),
	}
}
func (e _ElasticBehavior) Item(name string) rbx.EnumItem {
	switch name {
	case "WhenScrollable":
		return ElasticBehavior(0)
	case "Always":
		return ElasticBehavior(1)
	case "Never":
		return ElasticBehavior(2)
	}
	return nil
}

type ElasticBehavior uint

func (e ElasticBehavior) Type() string {
	return "Enum.ElasticBehavior"
}
func (e ElasticBehavior) String() string {
	return "Enum.ElasticBehavior." + e.Name()
}
func (e ElasticBehavior) Copy() rbx.Value {
	return e
}
func (e ElasticBehavior) Enum() rbx.Enum {
	return _ElasticBehavior{}
}
func (e ElasticBehavior) Value() int {
	return int(e)
}
func (e ElasticBehavior) Name() string {
	switch e {
	case 0:
		return "WhenScrollable"
	case 1:
		return "Always"
	case 2:
		return "Never"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _EnviromentalPhysicsThrottle struct{}

func (e _EnviromentalPhysicsThrottle) Type() string {
	return "Enum"
}
func (e _EnviromentalPhysicsThrottle) String() string {
	return "Enum.EnviromentalPhysicsThrottle"
}
func (e _EnviromentalPhysicsThrottle) Copy() rbx.Value {
	return e
}
func (e _EnviromentalPhysicsThrottle) Name() string {
	return "EnviromentalPhysicsThrottle"
}
func (e _EnviromentalPhysicsThrottle) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		EnviromentalPhysicsThrottle(0),
		EnviromentalPhysicsThrottle(1),
		EnviromentalPhysicsThrottle(2),
		EnviromentalPhysicsThrottle(3),
		EnviromentalPhysicsThrottle(4),
		EnviromentalPhysicsThrottle(5),
		EnviromentalPhysicsThrottle(6),
	}
}
func (e _EnviromentalPhysicsThrottle) Item(name string) rbx.EnumItem {
	switch name {
	case "DefaultAuto":
		return EnviromentalPhysicsThrottle(0)
	case "Disabled":
		return EnviromentalPhysicsThrottle(1)
	case "Always":
		return EnviromentalPhysicsThrottle(2)
	case "Skip2":
		return EnviromentalPhysicsThrottle(3)
	case "Skip4":
		return EnviromentalPhysicsThrottle(4)
	case "Skip8":
		return EnviromentalPhysicsThrottle(5)
	case "Skip16":
		return EnviromentalPhysicsThrottle(6)
	}
	return nil
}

type EnviromentalPhysicsThrottle uint

func (e EnviromentalPhysicsThrottle) Type() string {
	return "Enum.EnviromentalPhysicsThrottle"
}
func (e EnviromentalPhysicsThrottle) String() string {
	return "Enum.EnviromentalPhysicsThrottle." + e.Name()
}
func (e EnviromentalPhysicsThrottle) Copy() rbx.Value {
	return e
}
func (e EnviromentalPhysicsThrottle) Enum() rbx.Enum {
	return _EnviromentalPhysicsThrottle{}
}
func (e EnviromentalPhysicsThrottle) Value() int {
	return int(e)
}
func (e EnviromentalPhysicsThrottle) Name() string {
	switch e {
	case 0:
		return "DefaultAuto"
	case 1:
		return "Disabled"
	case 2:
		return "Always"
	case 3:
		return "Skip2"
	case 4:
		return "Skip4"
	case 5:
		return "Skip8"
	case 6:
		return "Skip16"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _ExplosionType struct{}

func (e _ExplosionType) Type() string {
	return "Enum"
}
func (e _ExplosionType) String() string {
	return "Enum.ExplosionType"
}
func (e _ExplosionType) Copy() rbx.Value {
	return e
}
func (e _ExplosionType) Name() string {
	return "ExplosionType"
}
func (e _ExplosionType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		ExplosionType(0),
		ExplosionType(1),
	}
}
func (e _ExplosionType) Item(name string) rbx.EnumItem {
	switch name {
	case "NoCraters":
		return ExplosionType(0)
	case "Craters":
		return ExplosionType(1)
	}
	return nil
}

type ExplosionType uint

func (e ExplosionType) Type() string {
	return "Enum.ExplosionType"
}
func (e ExplosionType) String() string {
	return "Enum.ExplosionType." + e.Name()
}
func (e ExplosionType) Copy() rbx.Value {
	return e
}
func (e ExplosionType) Enum() rbx.Enum {
	return _ExplosionType{}
}
func (e ExplosionType) Value() int {
	return int(e)
}
func (e ExplosionType) Name() string {
	switch e {
	case 0:
		return "NoCraters"
	case 1:
		return "Craters"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _FillDirection struct{}

func (e _FillDirection) Type() string {
	return "Enum"
}
func (e _FillDirection) String() string {
	return "Enum.FillDirection"
}
func (e _FillDirection) Copy() rbx.Value {
	return e
}
func (e _FillDirection) Name() string {
	return "FillDirection"
}
func (e _FillDirection) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		FillDirection(0),
		FillDirection(1),
	}
}
func (e _FillDirection) Item(name string) rbx.EnumItem {
	switch name {
	case "Horizontal":
		return FillDirection(0)
	case "Vertical":
		return FillDirection(1)
	}
	return nil
}

type FillDirection uint

func (e FillDirection) Type() string {
	return "Enum.FillDirection"
}
func (e FillDirection) String() string {
	return "Enum.FillDirection." + e.Name()
}
func (e FillDirection) Copy() rbx.Value {
	return e
}
func (e FillDirection) Enum() rbx.Enum {
	return _FillDirection{}
}
func (e FillDirection) Value() int {
	return int(e)
}
func (e FillDirection) Name() string {
	switch e {
	case 0:
		return "Horizontal"
	case 1:
		return "Vertical"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _FilterResult struct{}

func (e _FilterResult) Type() string {
	return "Enum"
}
func (e _FilterResult) String() string {
	return "Enum.FilterResult"
}
func (e _FilterResult) Copy() rbx.Value {
	return e
}
func (e _FilterResult) Name() string {
	return "FilterResult"
}
func (e _FilterResult) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		FilterResult(1),
		FilterResult(0),
	}
}
func (e _FilterResult) Item(name string) rbx.EnumItem {
	switch name {
	case "Rejected":
		return FilterResult(1)
	case "Accepted":
		return FilterResult(0)
	}
	return nil
}

type FilterResult uint

func (e FilterResult) Type() string {
	return "Enum.FilterResult"
}
func (e FilterResult) String() string {
	return "Enum.FilterResult." + e.Name()
}
func (e FilterResult) Copy() rbx.Value {
	return e
}
func (e FilterResult) Enum() rbx.Enum {
	return _FilterResult{}
}
func (e FilterResult) Value() int {
	return int(e)
}
func (e FilterResult) Name() string {
	switch e {
	case 1:
		return "Rejected"
	case 0:
		return "Accepted"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _Font struct{}

func (e _Font) Type() string {
	return "Enum"
}
func (e _Font) String() string {
	return "Enum.Font"
}
func (e _Font) Copy() rbx.Value {
	return e
}
func (e _Font) Name() string {
	return "Font"
}
func (e _Font) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		Font(0),
		Font(1),
		Font(2),
		Font(3),
		Font(4),
		Font(16),
		Font(5),
		Font(6),
		Font(7),
		Font(8),
		Font(9),
		Font(10),
		Font(11),
		Font(12),
		Font(13),
		Font(14),
		Font(15),
		Font(17),
		Font(18),
		Font(19),
		Font(20),
	}
}
func (e _Font) Item(name string) rbx.EnumItem {
	switch name {
	case "Legacy":
		return Font(0)
	case "Arial":
		return Font(1)
	case "ArialBold":
		return Font(2)
	case "SourceSans":
		return Font(3)
	case "SourceSansBold":
		return Font(4)
	case "SourceSansSemibold":
		return Font(16)
	case "SourceSansLight":
		return Font(5)
	case "SourceSansItalic":
		return Font(6)
	case "Bodoni":
		return Font(7)
	case "Garamond":
		return Font(8)
	case "Cartoon":
		return Font(9)
	case "Code":
		return Font(10)
	case "Highway":
		return Font(11)
	case "SciFi":
		return Font(12)
	case "Arcade":
		return Font(13)
	case "Fantasy":
		return Font(14)
	case "Antique":
		return Font(15)
	case "Gotham":
		return Font(17)
	case "GothamSemibold":
		return Font(18)
	case "GothamBold":
		return Font(19)
	case "GothamBlack":
		return Font(20)
	}
	return nil
}

type Font uint

func (e Font) Type() string {
	return "Enum.Font"
}
func (e Font) String() string {
	return "Enum.Font." + e.Name()
}
func (e Font) Copy() rbx.Value {
	return e
}
func (e Font) Enum() rbx.Enum {
	return _Font{}
}
func (e Font) Value() int {
	return int(e)
}
func (e Font) Name() string {
	switch e {
	case 0:
		return "Legacy"
	case 1:
		return "Arial"
	case 2:
		return "ArialBold"
	case 3:
		return "SourceSans"
	case 4:
		return "SourceSansBold"
	case 16:
		return "SourceSansSemibold"
	case 5:
		return "SourceSansLight"
	case 6:
		return "SourceSansItalic"
	case 7:
		return "Bodoni"
	case 8:
		return "Garamond"
	case 9:
		return "Cartoon"
	case 10:
		return "Code"
	case 11:
		return "Highway"
	case 12:
		return "SciFi"
	case 13:
		return "Arcade"
	case 14:
		return "Fantasy"
	case 15:
		return "Antique"
	case 17:
		return "Gotham"
	case 18:
		return "GothamSemibold"
	case 19:
		return "GothamBold"
	case 20:
		return "GothamBlack"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _FontSize struct{}

func (e _FontSize) Type() string {
	return "Enum"
}
func (e _FontSize) String() string {
	return "Enum.FontSize"
}
func (e _FontSize) Copy() rbx.Value {
	return e
}
func (e _FontSize) Name() string {
	return "FontSize"
}
func (e _FontSize) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		FontSize(0),
		FontSize(1),
		FontSize(2),
		FontSize(3),
		FontSize(4),
		FontSize(5),
		FontSize(6),
		FontSize(7),
		FontSize(8),
		FontSize(9),
		FontSize(10),
		FontSize(11),
		FontSize(12),
		FontSize(13),
		FontSize(14),
	}
}
func (e _FontSize) Item(name string) rbx.EnumItem {
	switch name {
	case "Size8":
		return FontSize(0)
	case "Size9":
		return FontSize(1)
	case "Size10":
		return FontSize(2)
	case "Size11":
		return FontSize(3)
	case "Size12":
		return FontSize(4)
	case "Size14":
		return FontSize(5)
	case "Size18":
		return FontSize(6)
	case "Size24":
		return FontSize(7)
	case "Size36":
		return FontSize(8)
	case "Size48":
		return FontSize(9)
	case "Size28":
		return FontSize(10)
	case "Size32":
		return FontSize(11)
	case "Size42":
		return FontSize(12)
	case "Size60":
		return FontSize(13)
	case "Size96":
		return FontSize(14)
	}
	return nil
}

type FontSize uint

func (e FontSize) Type() string {
	return "Enum.FontSize"
}
func (e FontSize) String() string {
	return "Enum.FontSize." + e.Name()
}
func (e FontSize) Copy() rbx.Value {
	return e
}
func (e FontSize) Enum() rbx.Enum {
	return _FontSize{}
}
func (e FontSize) Value() int {
	return int(e)
}
func (e FontSize) Name() string {
	switch e {
	case 0:
		return "Size8"
	case 1:
		return "Size9"
	case 2:
		return "Size10"
	case 3:
		return "Size11"
	case 4:
		return "Size12"
	case 5:
		return "Size14"
	case 6:
		return "Size18"
	case 7:
		return "Size24"
	case 8:
		return "Size36"
	case 9:
		return "Size48"
	case 10:
		return "Size28"
	case 11:
		return "Size32"
	case 12:
		return "Size42"
	case 13:
		return "Size60"
	case 14:
		return "Size96"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _FormFactor struct{}

func (e _FormFactor) Type() string {
	return "Enum"
}
func (e _FormFactor) String() string {
	return "Enum.FormFactor"
}
func (e _FormFactor) Copy() rbx.Value {
	return e
}
func (e _FormFactor) Name() string {
	return "FormFactor"
}
func (e _FormFactor) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		FormFactor(0),
		FormFactor(1),
		FormFactor(2),
		FormFactor(3),
	}
}
func (e _FormFactor) Item(name string) rbx.EnumItem {
	switch name {
	case "Symmetric":
		return FormFactor(0)
	case "Brick":
		return FormFactor(1)
	case "Plate":
		return FormFactor(2)
	case "Custom":
		return FormFactor(3)
	}
	return nil
}

type FormFactor uint

func (e FormFactor) Type() string {
	return "Enum.FormFactor"
}
func (e FormFactor) String() string {
	return "Enum.FormFactor." + e.Name()
}
func (e FormFactor) Copy() rbx.Value {
	return e
}
func (e FormFactor) Enum() rbx.Enum {
	return _FormFactor{}
}
func (e FormFactor) Value() int {
	return int(e)
}
func (e FormFactor) Name() string {
	switch e {
	case 0:
		return "Symmetric"
	case 1:
		return "Brick"
	case 2:
		return "Plate"
	case 3:
		return "Custom"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _FrameStyle struct{}

func (e _FrameStyle) Type() string {
	return "Enum"
}
func (e _FrameStyle) String() string {
	return "Enum.FrameStyle"
}
func (e _FrameStyle) Copy() rbx.Value {
	return e
}
func (e _FrameStyle) Name() string {
	return "FrameStyle"
}
func (e _FrameStyle) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		FrameStyle(0),
		FrameStyle(1),
		FrameStyle(2),
		FrameStyle(3),
		FrameStyle(4),
		FrameStyle(5),
		FrameStyle(6),
	}
}
func (e _FrameStyle) Item(name string) rbx.EnumItem {
	switch name {
	case "Custom":
		return FrameStyle(0)
	case "ChatBlue":
		return FrameStyle(1)
	case "RobloxSquare":
		return FrameStyle(2)
	case "RobloxRound":
		return FrameStyle(3)
	case "ChatGreen":
		return FrameStyle(4)
	case "ChatRed":
		return FrameStyle(5)
	case "DropShadow":
		return FrameStyle(6)
	}
	return nil
}

type FrameStyle uint

func (e FrameStyle) Type() string {
	return "Enum.FrameStyle"
}
func (e FrameStyle) String() string {
	return "Enum.FrameStyle." + e.Name()
}
func (e FrameStyle) Copy() rbx.Value {
	return e
}
func (e FrameStyle) Enum() rbx.Enum {
	return _FrameStyle{}
}
func (e FrameStyle) Value() int {
	return int(e)
}
func (e FrameStyle) Name() string {
	switch e {
	case 0:
		return "Custom"
	case 1:
		return "ChatBlue"
	case 2:
		return "RobloxSquare"
	case 3:
		return "RobloxRound"
	case 4:
		return "ChatGreen"
	case 5:
		return "ChatRed"
	case 6:
		return "DropShadow"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _FramerateManagerMode struct{}

func (e _FramerateManagerMode) Type() string {
	return "Enum"
}
func (e _FramerateManagerMode) String() string {
	return "Enum.FramerateManagerMode"
}
func (e _FramerateManagerMode) Copy() rbx.Value {
	return e
}
func (e _FramerateManagerMode) Name() string {
	return "FramerateManagerMode"
}
func (e _FramerateManagerMode) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		FramerateManagerMode(0),
		FramerateManagerMode(1),
		FramerateManagerMode(2),
	}
}
func (e _FramerateManagerMode) Item(name string) rbx.EnumItem {
	switch name {
	case "Automatic":
		return FramerateManagerMode(0)
	case "On":
		return FramerateManagerMode(1)
	case "Off":
		return FramerateManagerMode(2)
	}
	return nil
}

type FramerateManagerMode uint

func (e FramerateManagerMode) Type() string {
	return "Enum.FramerateManagerMode"
}
func (e FramerateManagerMode) String() string {
	return "Enum.FramerateManagerMode." + e.Name()
}
func (e FramerateManagerMode) Copy() rbx.Value {
	return e
}
func (e FramerateManagerMode) Enum() rbx.Enum {
	return _FramerateManagerMode{}
}
func (e FramerateManagerMode) Value() int {
	return int(e)
}
func (e FramerateManagerMode) Name() string {
	switch e {
	case 0:
		return "Automatic"
	case 1:
		return "On"
	case 2:
		return "Off"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _FriendRequestEvent struct{}

func (e _FriendRequestEvent) Type() string {
	return "Enum"
}
func (e _FriendRequestEvent) String() string {
	return "Enum.FriendRequestEvent"
}
func (e _FriendRequestEvent) Copy() rbx.Value {
	return e
}
func (e _FriendRequestEvent) Name() string {
	return "FriendRequestEvent"
}
func (e _FriendRequestEvent) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		FriendRequestEvent(0),
		FriendRequestEvent(1),
		FriendRequestEvent(2),
		FriendRequestEvent(3),
	}
}
func (e _FriendRequestEvent) Item(name string) rbx.EnumItem {
	switch name {
	case "Issue":
		return FriendRequestEvent(0)
	case "Revoke":
		return FriendRequestEvent(1)
	case "Accept":
		return FriendRequestEvent(2)
	case "Deny":
		return FriendRequestEvent(3)
	}
	return nil
}

type FriendRequestEvent uint

func (e FriendRequestEvent) Type() string {
	return "Enum.FriendRequestEvent"
}
func (e FriendRequestEvent) String() string {
	return "Enum.FriendRequestEvent." + e.Name()
}
func (e FriendRequestEvent) Copy() rbx.Value {
	return e
}
func (e FriendRequestEvent) Enum() rbx.Enum {
	return _FriendRequestEvent{}
}
func (e FriendRequestEvent) Value() int {
	return int(e)
}
func (e FriendRequestEvent) Name() string {
	switch e {
	case 0:
		return "Issue"
	case 1:
		return "Revoke"
	case 2:
		return "Accept"
	case 3:
		return "Deny"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _FriendStatus struct{}

func (e _FriendStatus) Type() string {
	return "Enum"
}
func (e _FriendStatus) String() string {
	return "Enum.FriendStatus"
}
func (e _FriendStatus) Copy() rbx.Value {
	return e
}
func (e _FriendStatus) Name() string {
	return "FriendStatus"
}
func (e _FriendStatus) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		FriendStatus(0),
		FriendStatus(1),
		FriendStatus(2),
		FriendStatus(3),
		FriendStatus(4),
	}
}
func (e _FriendStatus) Item(name string) rbx.EnumItem {
	switch name {
	case "Unknown":
		return FriendStatus(0)
	case "NotFriend":
		return FriendStatus(1)
	case "Friend":
		return FriendStatus(2)
	case "FriendRequestSent":
		return FriendStatus(3)
	case "FriendRequestReceived":
		return FriendStatus(4)
	}
	return nil
}

type FriendStatus uint

func (e FriendStatus) Type() string {
	return "Enum.FriendStatus"
}
func (e FriendStatus) String() string {
	return "Enum.FriendStatus." + e.Name()
}
func (e FriendStatus) Copy() rbx.Value {
	return e
}
func (e FriendStatus) Enum() rbx.Enum {
	return _FriendStatus{}
}
func (e FriendStatus) Value() int {
	return int(e)
}
func (e FriendStatus) Name() string {
	switch e {
	case 0:
		return "Unknown"
	case 1:
		return "NotFriend"
	case 2:
		return "Friend"
	case 3:
		return "FriendRequestSent"
	case 4:
		return "FriendRequestReceived"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _FunctionalTestResult struct{}

func (e _FunctionalTestResult) Type() string {
	return "Enum"
}
func (e _FunctionalTestResult) String() string {
	return "Enum.FunctionalTestResult"
}
func (e _FunctionalTestResult) Copy() rbx.Value {
	return e
}
func (e _FunctionalTestResult) Name() string {
	return "FunctionalTestResult"
}
func (e _FunctionalTestResult) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		FunctionalTestResult(0),
		FunctionalTestResult(1),
		FunctionalTestResult(2),
	}
}
func (e _FunctionalTestResult) Item(name string) rbx.EnumItem {
	switch name {
	case "Passed":
		return FunctionalTestResult(0)
	case "Warning":
		return FunctionalTestResult(1)
	case "Error":
		return FunctionalTestResult(2)
	}
	return nil
}

type FunctionalTestResult uint

func (e FunctionalTestResult) Type() string {
	return "Enum.FunctionalTestResult"
}
func (e FunctionalTestResult) String() string {
	return "Enum.FunctionalTestResult." + e.Name()
}
func (e FunctionalTestResult) Copy() rbx.Value {
	return e
}
func (e FunctionalTestResult) Enum() rbx.Enum {
	return _FunctionalTestResult{}
}
func (e FunctionalTestResult) Value() int {
	return int(e)
}
func (e FunctionalTestResult) Name() string {
	switch e {
	case 0:
		return "Passed"
	case 1:
		return "Warning"
	case 2:
		return "Error"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _GameAvatarType struct{}

func (e _GameAvatarType) Type() string {
	return "Enum"
}
func (e _GameAvatarType) String() string {
	return "Enum.GameAvatarType"
}
func (e _GameAvatarType) Copy() rbx.Value {
	return e
}
func (e _GameAvatarType) Name() string {
	return "GameAvatarType"
}
func (e _GameAvatarType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		GameAvatarType(0),
		GameAvatarType(1),
		GameAvatarType(2),
	}
}
func (e _GameAvatarType) Item(name string) rbx.EnumItem {
	switch name {
	case "R6":
		return GameAvatarType(0)
	case "R15":
		return GameAvatarType(1)
	case "PlayerChoice":
		return GameAvatarType(2)
	}
	return nil
}

type GameAvatarType uint

func (e GameAvatarType) Type() string {
	return "Enum.GameAvatarType"
}
func (e GameAvatarType) String() string {
	return "Enum.GameAvatarType." + e.Name()
}
func (e GameAvatarType) Copy() rbx.Value {
	return e
}
func (e GameAvatarType) Enum() rbx.Enum {
	return _GameAvatarType{}
}
func (e GameAvatarType) Value() int {
	return int(e)
}
func (e GameAvatarType) Name() string {
	switch e {
	case 0:
		return "R6"
	case 1:
		return "R15"
	case 2:
		return "PlayerChoice"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _GearGenreSetting struct{}

func (e _GearGenreSetting) Type() string {
	return "Enum"
}
func (e _GearGenreSetting) String() string {
	return "Enum.GearGenreSetting"
}
func (e _GearGenreSetting) Copy() rbx.Value {
	return e
}
func (e _GearGenreSetting) Name() string {
	return "GearGenreSetting"
}
func (e _GearGenreSetting) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		GearGenreSetting(0),
		GearGenreSetting(1),
	}
}
func (e _GearGenreSetting) Item(name string) rbx.EnumItem {
	switch name {
	case "AllGenres":
		return GearGenreSetting(0)
	case "MatchingGenreOnly":
		return GearGenreSetting(1)
	}
	return nil
}

type GearGenreSetting uint

func (e GearGenreSetting) Type() string {
	return "Enum.GearGenreSetting"
}
func (e GearGenreSetting) String() string {
	return "Enum.GearGenreSetting." + e.Name()
}
func (e GearGenreSetting) Copy() rbx.Value {
	return e
}
func (e GearGenreSetting) Enum() rbx.Enum {
	return _GearGenreSetting{}
}
func (e GearGenreSetting) Value() int {
	return int(e)
}
func (e GearGenreSetting) Name() string {
	switch e {
	case 0:
		return "AllGenres"
	case 1:
		return "MatchingGenreOnly"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _GearType struct{}

func (e _GearType) Type() string {
	return "Enum"
}
func (e _GearType) String() string {
	return "Enum.GearType"
}
func (e _GearType) Copy() rbx.Value {
	return e
}
func (e _GearType) Name() string {
	return "GearType"
}
func (e _GearType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		GearType(0),
		GearType(1),
		GearType(2),
		GearType(3),
		GearType(4),
		GearType(5),
		GearType(6),
		GearType(7),
		GearType(8),
	}
}
func (e _GearType) Item(name string) rbx.EnumItem {
	switch name {
	case "MeleeWeapons":
		return GearType(0)
	case "RangedWeapons":
		return GearType(1)
	case "Explosives":
		return GearType(2)
	case "PowerUps":
		return GearType(3)
	case "NavigationEnhancers":
		return GearType(4)
	case "MusicalInstruments":
		return GearType(5)
	case "SocialItems":
		return GearType(6)
	case "BuildingTools":
		return GearType(7)
	case "Transport":
		return GearType(8)
	}
	return nil
}

type GearType uint

func (e GearType) Type() string {
	return "Enum.GearType"
}
func (e GearType) String() string {
	return "Enum.GearType." + e.Name()
}
func (e GearType) Copy() rbx.Value {
	return e
}
func (e GearType) Enum() rbx.Enum {
	return _GearType{}
}
func (e GearType) Value() int {
	return int(e)
}
func (e GearType) Name() string {
	switch e {
	case 0:
		return "MeleeWeapons"
	case 1:
		return "RangedWeapons"
	case 2:
		return "Explosives"
	case 3:
		return "PowerUps"
	case 4:
		return "NavigationEnhancers"
	case 5:
		return "MusicalInstruments"
	case 6:
		return "SocialItems"
	case 7:
		return "BuildingTools"
	case 8:
		return "Transport"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _Genre struct{}

func (e _Genre) Type() string {
	return "Enum"
}
func (e _Genre) String() string {
	return "Enum.Genre"
}
func (e _Genre) Copy() rbx.Value {
	return e
}
func (e _Genre) Name() string {
	return "Genre"
}
func (e _Genre) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		Genre(0),
		Genre(1),
		Genre(2),
		Genre(3),
		Genre(4),
		Genre(5),
		Genre(6),
		Genre(7),
		Genre(8),
		Genre(9),
		Genre(10),
		Genre(11),
		Genre(12),
		Genre(13),
	}
}
func (e _Genre) Item(name string) rbx.EnumItem {
	switch name {
	case "All":
		return Genre(0)
	case "TownAndCity":
		return Genre(1)
	case "Fantasy":
		return Genre(2)
	case "SciFi":
		return Genre(3)
	case "Ninja":
		return Genre(4)
	case "Scary":
		return Genre(5)
	case "Pirate":
		return Genre(6)
	case "Adventure":
		return Genre(7)
	case "Sports":
		return Genre(8)
	case "Funny":
		return Genre(9)
	case "WildWest":
		return Genre(10)
	case "War":
		return Genre(11)
	case "SkatePark":
		return Genre(12)
	case "Tutorial":
		return Genre(13)
	}
	return nil
}

type Genre uint

func (e Genre) Type() string {
	return "Enum.Genre"
}
func (e Genre) String() string {
	return "Enum.Genre." + e.Name()
}
func (e Genre) Copy() rbx.Value {
	return e
}
func (e Genre) Enum() rbx.Enum {
	return _Genre{}
}
func (e Genre) Value() int {
	return int(e)
}
func (e Genre) Name() string {
	switch e {
	case 0:
		return "All"
	case 1:
		return "TownAndCity"
	case 2:
		return "Fantasy"
	case 3:
		return "SciFi"
	case 4:
		return "Ninja"
	case 5:
		return "Scary"
	case 6:
		return "Pirate"
	case 7:
		return "Adventure"
	case 8:
		return "Sports"
	case 9:
		return "Funny"
	case 10:
		return "WildWest"
	case 11:
		return "War"
	case 12:
		return "SkatePark"
	case 13:
		return "Tutorial"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _GraphicsMode struct{}

func (e _GraphicsMode) Type() string {
	return "Enum"
}
func (e _GraphicsMode) String() string {
	return "Enum.GraphicsMode"
}
func (e _GraphicsMode) Copy() rbx.Value {
	return e
}
func (e _GraphicsMode) Name() string {
	return "GraphicsMode"
}
func (e _GraphicsMode) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		GraphicsMode(1),
		GraphicsMode(3),
		GraphicsMode(2),
		GraphicsMode(4),
		GraphicsMode(5),
		GraphicsMode(6),
		GraphicsMode(7),
	}
}
func (e _GraphicsMode) Item(name string) rbx.EnumItem {
	switch name {
	case "Automatic":
		return GraphicsMode(1)
	case "Direct3D9":
		return GraphicsMode(3)
	case "Direct3D11":
		return GraphicsMode(2)
	case "OpenGL":
		return GraphicsMode(4)
	case "Metal":
		return GraphicsMode(5)
	case "Vulkan":
		return GraphicsMode(6)
	case "NoGraphics":
		return GraphicsMode(7)
	}
	return nil
}

type GraphicsMode uint

func (e GraphicsMode) Type() string {
	return "Enum.GraphicsMode"
}
func (e GraphicsMode) String() string {
	return "Enum.GraphicsMode." + e.Name()
}
func (e GraphicsMode) Copy() rbx.Value {
	return e
}
func (e GraphicsMode) Enum() rbx.Enum {
	return _GraphicsMode{}
}
func (e GraphicsMode) Value() int {
	return int(e)
}
func (e GraphicsMode) Name() string {
	switch e {
	case 1:
		return "Automatic"
	case 3:
		return "Direct3D9"
	case 2:
		return "Direct3D11"
	case 4:
		return "OpenGL"
	case 5:
		return "Metal"
	case 6:
		return "Vulkan"
	case 7:
		return "NoGraphics"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _HandlesStyle struct{}

func (e _HandlesStyle) Type() string {
	return "Enum"
}
func (e _HandlesStyle) String() string {
	return "Enum.HandlesStyle"
}
func (e _HandlesStyle) Copy() rbx.Value {
	return e
}
func (e _HandlesStyle) Name() string {
	return "HandlesStyle"
}
func (e _HandlesStyle) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		HandlesStyle(0),
		HandlesStyle(1),
	}
}
func (e _HandlesStyle) Item(name string) rbx.EnumItem {
	switch name {
	case "Resize":
		return HandlesStyle(0)
	case "Movement":
		return HandlesStyle(1)
	}
	return nil
}

type HandlesStyle uint

func (e HandlesStyle) Type() string {
	return "Enum.HandlesStyle"
}
func (e HandlesStyle) String() string {
	return "Enum.HandlesStyle." + e.Name()
}
func (e HandlesStyle) Copy() rbx.Value {
	return e
}
func (e HandlesStyle) Enum() rbx.Enum {
	return _HandlesStyle{}
}
func (e HandlesStyle) Value() int {
	return int(e)
}
func (e HandlesStyle) Name() string {
	switch e {
	case 0:
		return "Resize"
	case 1:
		return "Movement"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _HorizontalAlignment struct{}

func (e _HorizontalAlignment) Type() string {
	return "Enum"
}
func (e _HorizontalAlignment) String() string {
	return "Enum.HorizontalAlignment"
}
func (e _HorizontalAlignment) Copy() rbx.Value {
	return e
}
func (e _HorizontalAlignment) Name() string {
	return "HorizontalAlignment"
}
func (e _HorizontalAlignment) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		HorizontalAlignment(0),
		HorizontalAlignment(1),
		HorizontalAlignment(2),
	}
}
func (e _HorizontalAlignment) Item(name string) rbx.EnumItem {
	switch name {
	case "Center":
		return HorizontalAlignment(0)
	case "Left":
		return HorizontalAlignment(1)
	case "Right":
		return HorizontalAlignment(2)
	}
	return nil
}

type HorizontalAlignment uint

func (e HorizontalAlignment) Type() string {
	return "Enum.HorizontalAlignment"
}
func (e HorizontalAlignment) String() string {
	return "Enum.HorizontalAlignment." + e.Name()
}
func (e HorizontalAlignment) Copy() rbx.Value {
	return e
}
func (e HorizontalAlignment) Enum() rbx.Enum {
	return _HorizontalAlignment{}
}
func (e HorizontalAlignment) Value() int {
	return int(e)
}
func (e HorizontalAlignment) Name() string {
	switch e {
	case 0:
		return "Center"
	case 1:
		return "Left"
	case 2:
		return "Right"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _HoverAnimateSpeed struct{}

func (e _HoverAnimateSpeed) Type() string {
	return "Enum"
}
func (e _HoverAnimateSpeed) String() string {
	return "Enum.HoverAnimateSpeed"
}
func (e _HoverAnimateSpeed) Copy() rbx.Value {
	return e
}
func (e _HoverAnimateSpeed) Name() string {
	return "HoverAnimateSpeed"
}
func (e _HoverAnimateSpeed) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		HoverAnimateSpeed(0),
		HoverAnimateSpeed(1),
		HoverAnimateSpeed(2),
		HoverAnimateSpeed(3),
		HoverAnimateSpeed(4),
	}
}
func (e _HoverAnimateSpeed) Item(name string) rbx.EnumItem {
	switch name {
	case "VerySlow":
		return HoverAnimateSpeed(0)
	case "Slow":
		return HoverAnimateSpeed(1)
	case "Medium":
		return HoverAnimateSpeed(2)
	case "Fast":
		return HoverAnimateSpeed(3)
	case "VeryFast":
		return HoverAnimateSpeed(4)
	}
	return nil
}

type HoverAnimateSpeed uint

func (e HoverAnimateSpeed) Type() string {
	return "Enum.HoverAnimateSpeed"
}
func (e HoverAnimateSpeed) String() string {
	return "Enum.HoverAnimateSpeed." + e.Name()
}
func (e HoverAnimateSpeed) Copy() rbx.Value {
	return e
}
func (e HoverAnimateSpeed) Enum() rbx.Enum {
	return _HoverAnimateSpeed{}
}
func (e HoverAnimateSpeed) Value() int {
	return int(e)
}
func (e HoverAnimateSpeed) Name() string {
	switch e {
	case 0:
		return "VerySlow"
	case 1:
		return "Slow"
	case 2:
		return "Medium"
	case 3:
		return "Fast"
	case 4:
		return "VeryFast"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _HttpCachePolicy struct{}

func (e _HttpCachePolicy) Type() string {
	return "Enum"
}
func (e _HttpCachePolicy) String() string {
	return "Enum.HttpCachePolicy"
}
func (e _HttpCachePolicy) Copy() rbx.Value {
	return e
}
func (e _HttpCachePolicy) Name() string {
	return "HttpCachePolicy"
}
func (e _HttpCachePolicy) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		HttpCachePolicy(0),
		HttpCachePolicy(1),
		HttpCachePolicy(2),
		HttpCachePolicy(3),
		HttpCachePolicy(4),
	}
}
func (e _HttpCachePolicy) Item(name string) rbx.EnumItem {
	switch name {
	case "None":
		return HttpCachePolicy(0)
	case "Full":
		return HttpCachePolicy(1)
	case "DataOnly":
		return HttpCachePolicy(2)
	case "Default":
		return HttpCachePolicy(3)
	case "InternalRedirectRefresh":
		return HttpCachePolicy(4)
	}
	return nil
}

type HttpCachePolicy uint

func (e HttpCachePolicy) Type() string {
	return "Enum.HttpCachePolicy"
}
func (e HttpCachePolicy) String() string {
	return "Enum.HttpCachePolicy." + e.Name()
}
func (e HttpCachePolicy) Copy() rbx.Value {
	return e
}
func (e HttpCachePolicy) Enum() rbx.Enum {
	return _HttpCachePolicy{}
}
func (e HttpCachePolicy) Value() int {
	return int(e)
}
func (e HttpCachePolicy) Name() string {
	switch e {
	case 0:
		return "None"
	case 1:
		return "Full"
	case 2:
		return "DataOnly"
	case 3:
		return "Default"
	case 4:
		return "InternalRedirectRefresh"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _HttpContentType struct{}

func (e _HttpContentType) Type() string {
	return "Enum"
}
func (e _HttpContentType) String() string {
	return "Enum.HttpContentType"
}
func (e _HttpContentType) Copy() rbx.Value {
	return e
}
func (e _HttpContentType) Name() string {
	return "HttpContentType"
}
func (e _HttpContentType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		HttpContentType(0),
		HttpContentType(1),
		HttpContentType(2),
		HttpContentType(3),
		HttpContentType(4),
	}
}
func (e _HttpContentType) Item(name string) rbx.EnumItem {
	switch name {
	case "ApplicationJson":
		return HttpContentType(0)
	case "ApplicationXml":
		return HttpContentType(1)
	case "ApplicationUrlEncoded":
		return HttpContentType(2)
	case "TextPlain":
		return HttpContentType(3)
	case "TextXml":
		return HttpContentType(4)
	}
	return nil
}

type HttpContentType uint

func (e HttpContentType) Type() string {
	return "Enum.HttpContentType"
}
func (e HttpContentType) String() string {
	return "Enum.HttpContentType." + e.Name()
}
func (e HttpContentType) Copy() rbx.Value {
	return e
}
func (e HttpContentType) Enum() rbx.Enum {
	return _HttpContentType{}
}
func (e HttpContentType) Value() int {
	return int(e)
}
func (e HttpContentType) Name() string {
	switch e {
	case 0:
		return "ApplicationJson"
	case 1:
		return "ApplicationXml"
	case 2:
		return "ApplicationUrlEncoded"
	case 3:
		return "TextPlain"
	case 4:
		return "TextXml"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _HttpError struct{}

func (e _HttpError) Type() string {
	return "Enum"
}
func (e _HttpError) String() string {
	return "Enum.HttpError"
}
func (e _HttpError) Copy() rbx.Value {
	return e
}
func (e _HttpError) Name() string {
	return "HttpError"
}
func (e _HttpError) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		HttpError(0),
		HttpError(1),
		HttpError(2),
		HttpError(3),
		HttpError(4),
		HttpError(5),
		HttpError(6),
		HttpError(7),
		HttpError(8),
		HttpError(9),
		HttpError(10),
		HttpError(11),
	}
}
func (e _HttpError) Item(name string) rbx.EnumItem {
	switch name {
	case "OK":
		return HttpError(0)
	case "InvalidUrl":
		return HttpError(1)
	case "DnsResolve":
		return HttpError(2)
	case "ConnectFail":
		return HttpError(3)
	case "OutOfMemory":
		return HttpError(4)
	case "TimedOut":
		return HttpError(5)
	case "TooManyRedirects":
		return HttpError(6)
	case "InvalidRedirect":
		return HttpError(7)
	case "NetFail":
		return HttpError(8)
	case "Aborted":
		return HttpError(9)
	case "SslConnectFail":
		return HttpError(10)
	case "Unknown":
		return HttpError(11)
	}
	return nil
}

type HttpError uint

func (e HttpError) Type() string {
	return "Enum.HttpError"
}
func (e HttpError) String() string {
	return "Enum.HttpError." + e.Name()
}
func (e HttpError) Copy() rbx.Value {
	return e
}
func (e HttpError) Enum() rbx.Enum {
	return _HttpError{}
}
func (e HttpError) Value() int {
	return int(e)
}
func (e HttpError) Name() string {
	switch e {
	case 0:
		return "OK"
	case 1:
		return "InvalidUrl"
	case 2:
		return "DnsResolve"
	case 3:
		return "ConnectFail"
	case 4:
		return "OutOfMemory"
	case 5:
		return "TimedOut"
	case 6:
		return "TooManyRedirects"
	case 7:
		return "InvalidRedirect"
	case 8:
		return "NetFail"
	case 9:
		return "Aborted"
	case 10:
		return "SslConnectFail"
	case 11:
		return "Unknown"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _HttpRequestType struct{}

func (e _HttpRequestType) Type() string {
	return "Enum"
}
func (e _HttpRequestType) String() string {
	return "Enum.HttpRequestType"
}
func (e _HttpRequestType) Copy() rbx.Value {
	return e
}
func (e _HttpRequestType) Name() string {
	return "HttpRequestType"
}
func (e _HttpRequestType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		HttpRequestType(0),
		HttpRequestType(2),
		HttpRequestType(7),
		HttpRequestType(15),
		HttpRequestType(16),
		HttpRequestType(22),
		HttpRequestType(24),
	}
}
func (e _HttpRequestType) Item(name string) rbx.EnumItem {
	switch name {
	case "Default":
		return HttpRequestType(0)
	case "MarketplaceService":
		return HttpRequestType(2)
	case "Players":
		return HttpRequestType(7)
	case "Chat":
		return HttpRequestType(15)
	case "Avatar":
		return HttpRequestType(16)
	case "Analytics":
		return HttpRequestType(22)
	case "Localization":
		return HttpRequestType(24)
	}
	return nil
}

type HttpRequestType uint

func (e HttpRequestType) Type() string {
	return "Enum.HttpRequestType"
}
func (e HttpRequestType) String() string {
	return "Enum.HttpRequestType." + e.Name()
}
func (e HttpRequestType) Copy() rbx.Value {
	return e
}
func (e HttpRequestType) Enum() rbx.Enum {
	return _HttpRequestType{}
}
func (e HttpRequestType) Value() int {
	return int(e)
}
func (e HttpRequestType) Name() string {
	switch e {
	case 0:
		return "Default"
	case 2:
		return "MarketplaceService"
	case 7:
		return "Players"
	case 15:
		return "Chat"
	case 16:
		return "Avatar"
	case 22:
		return "Analytics"
	case 24:
		return "Localization"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _HumanoidCollisionType struct{}

func (e _HumanoidCollisionType) Type() string {
	return "Enum"
}
func (e _HumanoidCollisionType) String() string {
	return "Enum.HumanoidCollisionType"
}
func (e _HumanoidCollisionType) Copy() rbx.Value {
	return e
}
func (e _HumanoidCollisionType) Name() string {
	return "HumanoidCollisionType"
}
func (e _HumanoidCollisionType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		HumanoidCollisionType(0),
		HumanoidCollisionType(1),
	}
}
func (e _HumanoidCollisionType) Item(name string) rbx.EnumItem {
	switch name {
	case "OuterBox":
		return HumanoidCollisionType(0)
	case "InnerBox":
		return HumanoidCollisionType(1)
	}
	return nil
}

type HumanoidCollisionType uint

func (e HumanoidCollisionType) Type() string {
	return "Enum.HumanoidCollisionType"
}
func (e HumanoidCollisionType) String() string {
	return "Enum.HumanoidCollisionType." + e.Name()
}
func (e HumanoidCollisionType) Copy() rbx.Value {
	return e
}
func (e HumanoidCollisionType) Enum() rbx.Enum {
	return _HumanoidCollisionType{}
}
func (e HumanoidCollisionType) Value() int {
	return int(e)
}
func (e HumanoidCollisionType) Name() string {
	switch e {
	case 0:
		return "OuterBox"
	case 1:
		return "InnerBox"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _HumanoidDisplayDistanceType struct{}

func (e _HumanoidDisplayDistanceType) Type() string {
	return "Enum"
}
func (e _HumanoidDisplayDistanceType) String() string {
	return "Enum.HumanoidDisplayDistanceType"
}
func (e _HumanoidDisplayDistanceType) Copy() rbx.Value {
	return e
}
func (e _HumanoidDisplayDistanceType) Name() string {
	return "HumanoidDisplayDistanceType"
}
func (e _HumanoidDisplayDistanceType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		HumanoidDisplayDistanceType(0),
		HumanoidDisplayDistanceType(1),
		HumanoidDisplayDistanceType(2),
	}
}
func (e _HumanoidDisplayDistanceType) Item(name string) rbx.EnumItem {
	switch name {
	case "Viewer":
		return HumanoidDisplayDistanceType(0)
	case "Subject":
		return HumanoidDisplayDistanceType(1)
	case "None":
		return HumanoidDisplayDistanceType(2)
	}
	return nil
}

type HumanoidDisplayDistanceType uint

func (e HumanoidDisplayDistanceType) Type() string {
	return "Enum.HumanoidDisplayDistanceType"
}
func (e HumanoidDisplayDistanceType) String() string {
	return "Enum.HumanoidDisplayDistanceType." + e.Name()
}
func (e HumanoidDisplayDistanceType) Copy() rbx.Value {
	return e
}
func (e HumanoidDisplayDistanceType) Enum() rbx.Enum {
	return _HumanoidDisplayDistanceType{}
}
func (e HumanoidDisplayDistanceType) Value() int {
	return int(e)
}
func (e HumanoidDisplayDistanceType) Name() string {
	switch e {
	case 0:
		return "Viewer"
	case 1:
		return "Subject"
	case 2:
		return "None"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _HumanoidHealthDisplayType struct{}

func (e _HumanoidHealthDisplayType) Type() string {
	return "Enum"
}
func (e _HumanoidHealthDisplayType) String() string {
	return "Enum.HumanoidHealthDisplayType"
}
func (e _HumanoidHealthDisplayType) Copy() rbx.Value {
	return e
}
func (e _HumanoidHealthDisplayType) Name() string {
	return "HumanoidHealthDisplayType"
}
func (e _HumanoidHealthDisplayType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		HumanoidHealthDisplayType(0),
		HumanoidHealthDisplayType(1),
		HumanoidHealthDisplayType(2),
	}
}
func (e _HumanoidHealthDisplayType) Item(name string) rbx.EnumItem {
	switch name {
	case "DisplayWhenDamaged":
		return HumanoidHealthDisplayType(0)
	case "AlwaysOn":
		return HumanoidHealthDisplayType(1)
	case "AlwaysOff":
		return HumanoidHealthDisplayType(2)
	}
	return nil
}

type HumanoidHealthDisplayType uint

func (e HumanoidHealthDisplayType) Type() string {
	return "Enum.HumanoidHealthDisplayType"
}
func (e HumanoidHealthDisplayType) String() string {
	return "Enum.HumanoidHealthDisplayType." + e.Name()
}
func (e HumanoidHealthDisplayType) Copy() rbx.Value {
	return e
}
func (e HumanoidHealthDisplayType) Enum() rbx.Enum {
	return _HumanoidHealthDisplayType{}
}
func (e HumanoidHealthDisplayType) Value() int {
	return int(e)
}
func (e HumanoidHealthDisplayType) Name() string {
	switch e {
	case 0:
		return "DisplayWhenDamaged"
	case 1:
		return "AlwaysOn"
	case 2:
		return "AlwaysOff"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _HumanoidRigType struct{}

func (e _HumanoidRigType) Type() string {
	return "Enum"
}
func (e _HumanoidRigType) String() string {
	return "Enum.HumanoidRigType"
}
func (e _HumanoidRigType) Copy() rbx.Value {
	return e
}
func (e _HumanoidRigType) Name() string {
	return "HumanoidRigType"
}
func (e _HumanoidRigType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		HumanoidRigType(0),
		HumanoidRigType(1),
	}
}
func (e _HumanoidRigType) Item(name string) rbx.EnumItem {
	switch name {
	case "R6":
		return HumanoidRigType(0)
	case "R15":
		return HumanoidRigType(1)
	}
	return nil
}

type HumanoidRigType uint

func (e HumanoidRigType) Type() string {
	return "Enum.HumanoidRigType"
}
func (e HumanoidRigType) String() string {
	return "Enum.HumanoidRigType." + e.Name()
}
func (e HumanoidRigType) Copy() rbx.Value {
	return e
}
func (e HumanoidRigType) Enum() rbx.Enum {
	return _HumanoidRigType{}
}
func (e HumanoidRigType) Value() int {
	return int(e)
}
func (e HumanoidRigType) Name() string {
	switch e {
	case 0:
		return "R6"
	case 1:
		return "R15"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _HumanoidStateType struct{}

func (e _HumanoidStateType) Type() string {
	return "Enum"
}
func (e _HumanoidStateType) String() string {
	return "Enum.HumanoidStateType"
}
func (e _HumanoidStateType) Copy() rbx.Value {
	return e
}
func (e _HumanoidStateType) Name() string {
	return "HumanoidStateType"
}
func (e _HumanoidStateType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		HumanoidStateType(0),
		HumanoidStateType(8),
		HumanoidStateType(10),
		HumanoidStateType(12),
		HumanoidStateType(11),
		HumanoidStateType(1),
		HumanoidStateType(2),
		HumanoidStateType(3),
		HumanoidStateType(7),
		HumanoidStateType(6),
		HumanoidStateType(5),
		HumanoidStateType(13),
		HumanoidStateType(14),
		HumanoidStateType(15),
		HumanoidStateType(4),
		HumanoidStateType(16),
		HumanoidStateType(18),
	}
}
func (e _HumanoidStateType) Item(name string) rbx.EnumItem {
	switch name {
	case "FallingDown":
		return HumanoidStateType(0)
	case "Running":
		return HumanoidStateType(8)
	case "RunningNoPhysics":
		return HumanoidStateType(10)
	case "Climbing":
		return HumanoidStateType(12)
	case "StrafingNoPhysics":
		return HumanoidStateType(11)
	case "Ragdoll":
		return HumanoidStateType(1)
	case "GettingUp":
		return HumanoidStateType(2)
	case "Jumping":
		return HumanoidStateType(3)
	case "Landed":
		return HumanoidStateType(7)
	case "Flying":
		return HumanoidStateType(6)
	case "Freefall":
		return HumanoidStateType(5)
	case "Seated":
		return HumanoidStateType(13)
	case "PlatformStanding":
		return HumanoidStateType(14)
	case "Dead":
		return HumanoidStateType(15)
	case "Swimming":
		return HumanoidStateType(4)
	case "Physics":
		return HumanoidStateType(16)
	case "None":
		return HumanoidStateType(18)
	}
	return nil
}

type HumanoidStateType uint

func (e HumanoidStateType) Type() string {
	return "Enum.HumanoidStateType"
}
func (e HumanoidStateType) String() string {
	return "Enum.HumanoidStateType." + e.Name()
}
func (e HumanoidStateType) Copy() rbx.Value {
	return e
}
func (e HumanoidStateType) Enum() rbx.Enum {
	return _HumanoidStateType{}
}
func (e HumanoidStateType) Value() int {
	return int(e)
}
func (e HumanoidStateType) Name() string {
	switch e {
	case 0:
		return "FallingDown"
	case 8:
		return "Running"
	case 10:
		return "RunningNoPhysics"
	case 12:
		return "Climbing"
	case 11:
		return "StrafingNoPhysics"
	case 1:
		return "Ragdoll"
	case 2:
		return "GettingUp"
	case 3:
		return "Jumping"
	case 7:
		return "Landed"
	case 6:
		return "Flying"
	case 5:
		return "Freefall"
	case 13:
		return "Seated"
	case 14:
		return "PlatformStanding"
	case 15:
		return "Dead"
	case 4:
		return "Swimming"
	case 16:
		return "Physics"
	case 18:
		return "None"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _InOut struct{}

func (e _InOut) Type() string {
	return "Enum"
}
func (e _InOut) String() string {
	return "Enum.InOut"
}
func (e _InOut) Copy() rbx.Value {
	return e
}
func (e _InOut) Name() string {
	return "InOut"
}
func (e _InOut) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		InOut(0),
		InOut(1),
		InOut(2),
	}
}
func (e _InOut) Item(name string) rbx.EnumItem {
	switch name {
	case "Edge":
		return InOut(0)
	case "Inset":
		return InOut(1)
	case "Center":
		return InOut(2)
	}
	return nil
}

type InOut uint

func (e InOut) Type() string {
	return "Enum.InOut"
}
func (e InOut) String() string {
	return "Enum.InOut." + e.Name()
}
func (e InOut) Copy() rbx.Value {
	return e
}
func (e InOut) Enum() rbx.Enum {
	return _InOut{}
}
func (e InOut) Value() int {
	return int(e)
}
func (e InOut) Name() string {
	switch e {
	case 0:
		return "Edge"
	case 1:
		return "Inset"
	case 2:
		return "Center"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _InfoType struct{}

func (e _InfoType) Type() string {
	return "Enum"
}
func (e _InfoType) String() string {
	return "Enum.InfoType"
}
func (e _InfoType) Copy() rbx.Value {
	return e
}
func (e _InfoType) Name() string {
	return "InfoType"
}
func (e _InfoType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		InfoType(0),
		InfoType(1),
		InfoType(2),
		InfoType(3),
		InfoType(4),
	}
}
func (e _InfoType) Item(name string) rbx.EnumItem {
	switch name {
	case "Asset":
		return InfoType(0)
	case "Product":
		return InfoType(1)
	case "GamePass":
		return InfoType(2)
	case "Subscription":
		return InfoType(3)
	case "Bundle":
		return InfoType(4)
	}
	return nil
}

type InfoType uint

func (e InfoType) Type() string {
	return "Enum.InfoType"
}
func (e InfoType) String() string {
	return "Enum.InfoType." + e.Name()
}
func (e InfoType) Copy() rbx.Value {
	return e
}
func (e InfoType) Enum() rbx.Enum {
	return _InfoType{}
}
func (e InfoType) Value() int {
	return int(e)
}
func (e InfoType) Name() string {
	switch e {
	case 0:
		return "Asset"
	case 1:
		return "Product"
	case 2:
		return "GamePass"
	case 3:
		return "Subscription"
	case 4:
		return "Bundle"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _InitialDockState struct{}

func (e _InitialDockState) Type() string {
	return "Enum"
}
func (e _InitialDockState) String() string {
	return "Enum.InitialDockState"
}
func (e _InitialDockState) Copy() rbx.Value {
	return e
}
func (e _InitialDockState) Name() string {
	return "InitialDockState"
}
func (e _InitialDockState) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		InitialDockState(0),
		InitialDockState(1),
		InitialDockState(2),
		InitialDockState(3),
		InitialDockState(4),
	}
}
func (e _InitialDockState) Item(name string) rbx.EnumItem {
	switch name {
	case "Top":
		return InitialDockState(0)
	case "Bottom":
		return InitialDockState(1)
	case "Left":
		return InitialDockState(2)
	case "Right":
		return InitialDockState(3)
	case "Float":
		return InitialDockState(4)
	}
	return nil
}

type InitialDockState uint

func (e InitialDockState) Type() string {
	return "Enum.InitialDockState"
}
func (e InitialDockState) String() string {
	return "Enum.InitialDockState." + e.Name()
}
func (e InitialDockState) Copy() rbx.Value {
	return e
}
func (e InitialDockState) Enum() rbx.Enum {
	return _InitialDockState{}
}
func (e InitialDockState) Value() int {
	return int(e)
}
func (e InitialDockState) Name() string {
	switch e {
	case 0:
		return "Top"
	case 1:
		return "Bottom"
	case 2:
		return "Left"
	case 3:
		return "Right"
	case 4:
		return "Float"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _InlineAlignment struct{}

func (e _InlineAlignment) Type() string {
	return "Enum"
}
func (e _InlineAlignment) String() string {
	return "Enum.InlineAlignment"
}
func (e _InlineAlignment) Copy() rbx.Value {
	return e
}
func (e _InlineAlignment) Name() string {
	return "InlineAlignment"
}
func (e _InlineAlignment) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		InlineAlignment(0),
		InlineAlignment(1),
		InlineAlignment(2),
	}
}
func (e _InlineAlignment) Item(name string) rbx.EnumItem {
	switch name {
	case "Bottom":
		return InlineAlignment(0)
	case "Center":
		return InlineAlignment(1)
	case "Top":
		return InlineAlignment(2)
	}
	return nil
}

type InlineAlignment uint

func (e InlineAlignment) Type() string {
	return "Enum.InlineAlignment"
}
func (e InlineAlignment) String() string {
	return "Enum.InlineAlignment." + e.Name()
}
func (e InlineAlignment) Copy() rbx.Value {
	return e
}
func (e InlineAlignment) Enum() rbx.Enum {
	return _InlineAlignment{}
}
func (e InlineAlignment) Value() int {
	return int(e)
}
func (e InlineAlignment) Name() string {
	switch e {
	case 0:
		return "Bottom"
	case 1:
		return "Center"
	case 2:
		return "Top"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _InputType struct{}

func (e _InputType) Type() string {
	return "Enum"
}
func (e _InputType) String() string {
	return "Enum.InputType"
}
func (e _InputType) Copy() rbx.Value {
	return e
}
func (e _InputType) Name() string {
	return "InputType"
}
func (e _InputType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		InputType(0),
		InputType(12),
		InputType(13),
	}
}
func (e _InputType) Item(name string) rbx.EnumItem {
	switch name {
	case "NoInput":
		return InputType(0)
	case "Constant":
		return InputType(12)
	case "Sin":
		return InputType(13)
	}
	return nil
}

type InputType uint

func (e InputType) Type() string {
	return "Enum.InputType"
}
func (e InputType) String() string {
	return "Enum.InputType." + e.Name()
}
func (e InputType) Copy() rbx.Value {
	return e
}
func (e InputType) Enum() rbx.Enum {
	return _InputType{}
}
func (e InputType) Value() int {
	return int(e)
}
func (e InputType) Name() string {
	switch e {
	case 0:
		return "NoInput"
	case 12:
		return "Constant"
	case 13:
		return "Sin"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _JointCreationMode struct{}

func (e _JointCreationMode) Type() string {
	return "Enum"
}
func (e _JointCreationMode) String() string {
	return "Enum.JointCreationMode"
}
func (e _JointCreationMode) Copy() rbx.Value {
	return e
}
func (e _JointCreationMode) Name() string {
	return "JointCreationMode"
}
func (e _JointCreationMode) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		JointCreationMode(0),
		JointCreationMode(1),
		JointCreationMode(2),
	}
}
func (e _JointCreationMode) Item(name string) rbx.EnumItem {
	switch name {
	case "All":
		return JointCreationMode(0)
	case "Surface":
		return JointCreationMode(1)
	case "None":
		return JointCreationMode(2)
	}
	return nil
}

type JointCreationMode uint

func (e JointCreationMode) Type() string {
	return "Enum.JointCreationMode"
}
func (e JointCreationMode) String() string {
	return "Enum.JointCreationMode." + e.Name()
}
func (e JointCreationMode) Copy() rbx.Value {
	return e
}
func (e JointCreationMode) Enum() rbx.Enum {
	return _JointCreationMode{}
}
func (e JointCreationMode) Value() int {
	return int(e)
}
func (e JointCreationMode) Name() string {
	switch e {
	case 0:
		return "All"
	case 1:
		return "Surface"
	case 2:
		return "None"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _KeyCode struct{}

func (e _KeyCode) Type() string {
	return "Enum"
}
func (e _KeyCode) String() string {
	return "Enum.KeyCode"
}
func (e _KeyCode) Copy() rbx.Value {
	return e
}
func (e _KeyCode) Name() string {
	return "KeyCode"
}
func (e _KeyCode) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		KeyCode(0),
		KeyCode(8),
		KeyCode(9),
		KeyCode(12),
		KeyCode(13),
		KeyCode(19),
		KeyCode(27),
		KeyCode(32),
		KeyCode(34),
		KeyCode(35),
		KeyCode(36),
		KeyCode(37),
		KeyCode(38),
		KeyCode(39),
		KeyCode(40),
		KeyCode(41),
		KeyCode(42),
		KeyCode(43),
		KeyCode(44),
		KeyCode(45),
		KeyCode(46),
		KeyCode(47),
		KeyCode(48),
		KeyCode(49),
		KeyCode(50),
		KeyCode(51),
		KeyCode(52),
		KeyCode(53),
		KeyCode(54),
		KeyCode(55),
		KeyCode(56),
		KeyCode(57),
		KeyCode(58),
		KeyCode(59),
		KeyCode(60),
		KeyCode(61),
		KeyCode(62),
		KeyCode(63),
		KeyCode(64),
		KeyCode(91),
		KeyCode(92),
		KeyCode(93),
		KeyCode(94),
		KeyCode(95),
		KeyCode(96),
		KeyCode(97),
		KeyCode(98),
		KeyCode(99),
		KeyCode(100),
		KeyCode(101),
		KeyCode(102),
		KeyCode(103),
		KeyCode(104),
		KeyCode(105),
		KeyCode(106),
		KeyCode(107),
		KeyCode(108),
		KeyCode(109),
		KeyCode(110),
		KeyCode(111),
		KeyCode(112),
		KeyCode(113),
		KeyCode(114),
		KeyCode(115),
		KeyCode(116),
		KeyCode(117),
		KeyCode(118),
		KeyCode(119),
		KeyCode(120),
		KeyCode(121),
		KeyCode(122),
		KeyCode(123),
		KeyCode(124),
		KeyCode(125),
		KeyCode(126),
		KeyCode(127),
		KeyCode(256),
		KeyCode(257),
		KeyCode(258),
		KeyCode(259),
		KeyCode(260),
		KeyCode(261),
		KeyCode(262),
		KeyCode(263),
		KeyCode(264),
		KeyCode(265),
		KeyCode(266),
		KeyCode(267),
		KeyCode(268),
		KeyCode(269),
		KeyCode(270),
		KeyCode(271),
		KeyCode(272),
		KeyCode(273),
		KeyCode(274),
		KeyCode(275),
		KeyCode(276),
		KeyCode(277),
		KeyCode(278),
		KeyCode(279),
		KeyCode(280),
		KeyCode(281),
		KeyCode(304),
		KeyCode(303),
		KeyCode(310),
		KeyCode(309),
		KeyCode(308),
		KeyCode(307),
		KeyCode(306),
		KeyCode(305),
		KeyCode(301),
		KeyCode(300),
		KeyCode(302),
		KeyCode(311),
		KeyCode(312),
		KeyCode(313),
		KeyCode(314),
		KeyCode(315),
		KeyCode(316),
		KeyCode(317),
		KeyCode(318),
		KeyCode(319),
		KeyCode(320),
		KeyCode(321),
		KeyCode(322),
		KeyCode(282),
		KeyCode(283),
		KeyCode(284),
		KeyCode(285),
		KeyCode(286),
		KeyCode(287),
		KeyCode(288),
		KeyCode(289),
		KeyCode(290),
		KeyCode(291),
		KeyCode(292),
		KeyCode(293),
		KeyCode(294),
		KeyCode(295),
		KeyCode(296),
		KeyCode(160),
		KeyCode(161),
		KeyCode(162),
		KeyCode(163),
		KeyCode(164),
		KeyCode(165),
		KeyCode(166),
		KeyCode(167),
		KeyCode(168),
		KeyCode(169),
		KeyCode(170),
		KeyCode(171),
		KeyCode(172),
		KeyCode(173),
		KeyCode(174),
		KeyCode(175),
		KeyCode(176),
		KeyCode(177),
		KeyCode(178),
		KeyCode(179),
		KeyCode(180),
		KeyCode(181),
		KeyCode(182),
		KeyCode(183),
		KeyCode(184),
		KeyCode(185),
		KeyCode(186),
		KeyCode(187),
		KeyCode(188),
		KeyCode(189),
		KeyCode(190),
		KeyCode(191),
		KeyCode(192),
		KeyCode(193),
		KeyCode(194),
		KeyCode(195),
		KeyCode(196),
		KeyCode(197),
		KeyCode(198),
		KeyCode(199),
		KeyCode(200),
		KeyCode(201),
		KeyCode(202),
		KeyCode(203),
		KeyCode(204),
		KeyCode(205),
		KeyCode(206),
		KeyCode(207),
		KeyCode(208),
		KeyCode(209),
		KeyCode(210),
		KeyCode(211),
		KeyCode(212),
		KeyCode(213),
		KeyCode(214),
		KeyCode(215),
		KeyCode(216),
		KeyCode(217),
		KeyCode(218),
		KeyCode(219),
		KeyCode(220),
		KeyCode(221),
		KeyCode(222),
		KeyCode(223),
		KeyCode(224),
		KeyCode(225),
		KeyCode(226),
		KeyCode(227),
		KeyCode(228),
		KeyCode(229),
		KeyCode(230),
		KeyCode(231),
		KeyCode(232),
		KeyCode(233),
		KeyCode(234),
		KeyCode(235),
		KeyCode(236),
		KeyCode(237),
		KeyCode(238),
		KeyCode(239),
		KeyCode(240),
		KeyCode(241),
		KeyCode(242),
		KeyCode(243),
		KeyCode(244),
		KeyCode(245),
		KeyCode(246),
		KeyCode(247),
		KeyCode(248),
		KeyCode(249),
		KeyCode(250),
		KeyCode(251),
		KeyCode(252),
		KeyCode(253),
		KeyCode(254),
		KeyCode(255),
		KeyCode(1000),
		KeyCode(1001),
		KeyCode(1002),
		KeyCode(1003),
		KeyCode(1004),
		KeyCode(1005),
		KeyCode(1006),
		KeyCode(1007),
		KeyCode(1008),
		KeyCode(1009),
		KeyCode(1010),
		KeyCode(1011),
		KeyCode(1012),
		KeyCode(1013),
		KeyCode(1014),
		KeyCode(1015),
		KeyCode(1016),
		KeyCode(1017),
	}
}
func (e _KeyCode) Item(name string) rbx.EnumItem {
	switch name {
	case "Unknown":
		return KeyCode(0)
	case "Backspace":
		return KeyCode(8)
	case "Tab":
		return KeyCode(9)
	case "Clear":
		return KeyCode(12)
	case "Return":
		return KeyCode(13)
	case "Pause":
		return KeyCode(19)
	case "Escape":
		return KeyCode(27)
	case "Space":
		return KeyCode(32)
	case "QuotedDouble":
		return KeyCode(34)
	case "Hash":
		return KeyCode(35)
	case "Dollar":
		return KeyCode(36)
	case "Percent":
		return KeyCode(37)
	case "Ampersand":
		return KeyCode(38)
	case "Quote":
		return KeyCode(39)
	case "LeftParenthesis":
		return KeyCode(40)
	case "RightParenthesis":
		return KeyCode(41)
	case "Asterisk":
		return KeyCode(42)
	case "Plus":
		return KeyCode(43)
	case "Comma":
		return KeyCode(44)
	case "Minus":
		return KeyCode(45)
	case "Period":
		return KeyCode(46)
	case "Slash":
		return KeyCode(47)
	case "Zero":
		return KeyCode(48)
	case "One":
		return KeyCode(49)
	case "Two":
		return KeyCode(50)
	case "Three":
		return KeyCode(51)
	case "Four":
		return KeyCode(52)
	case "Five":
		return KeyCode(53)
	case "Six":
		return KeyCode(54)
	case "Seven":
		return KeyCode(55)
	case "Eight":
		return KeyCode(56)
	case "Nine":
		return KeyCode(57)
	case "Colon":
		return KeyCode(58)
	case "Semicolon":
		return KeyCode(59)
	case "LessThan":
		return KeyCode(60)
	case "Equals":
		return KeyCode(61)
	case "GreaterThan":
		return KeyCode(62)
	case "Question":
		return KeyCode(63)
	case "At":
		return KeyCode(64)
	case "LeftBracket":
		return KeyCode(91)
	case "BackSlash":
		return KeyCode(92)
	case "RightBracket":
		return KeyCode(93)
	case "Caret":
		return KeyCode(94)
	case "Underscore":
		return KeyCode(95)
	case "Backquote":
		return KeyCode(96)
	case "A":
		return KeyCode(97)
	case "B":
		return KeyCode(98)
	case "C":
		return KeyCode(99)
	case "D":
		return KeyCode(100)
	case "E":
		return KeyCode(101)
	case "F":
		return KeyCode(102)
	case "G":
		return KeyCode(103)
	case "H":
		return KeyCode(104)
	case "I":
		return KeyCode(105)
	case "J":
		return KeyCode(106)
	case "K":
		return KeyCode(107)
	case "L":
		return KeyCode(108)
	case "M":
		return KeyCode(109)
	case "N":
		return KeyCode(110)
	case "O":
		return KeyCode(111)
	case "P":
		return KeyCode(112)
	case "Q":
		return KeyCode(113)
	case "R":
		return KeyCode(114)
	case "S":
		return KeyCode(115)
	case "T":
		return KeyCode(116)
	case "U":
		return KeyCode(117)
	case "V":
		return KeyCode(118)
	case "W":
		return KeyCode(119)
	case "X":
		return KeyCode(120)
	case "Y":
		return KeyCode(121)
	case "Z":
		return KeyCode(122)
	case "LeftCurly":
		return KeyCode(123)
	case "Pipe":
		return KeyCode(124)
	case "RightCurly":
		return KeyCode(125)
	case "Tilde":
		return KeyCode(126)
	case "Delete":
		return KeyCode(127)
	case "KeypadZero":
		return KeyCode(256)
	case "KeypadOne":
		return KeyCode(257)
	case "KeypadTwo":
		return KeyCode(258)
	case "KeypadThree":
		return KeyCode(259)
	case "KeypadFour":
		return KeyCode(260)
	case "KeypadFive":
		return KeyCode(261)
	case "KeypadSix":
		return KeyCode(262)
	case "KeypadSeven":
		return KeyCode(263)
	case "KeypadEight":
		return KeyCode(264)
	case "KeypadNine":
		return KeyCode(265)
	case "KeypadPeriod":
		return KeyCode(266)
	case "KeypadDivide":
		return KeyCode(267)
	case "KeypadMultiply":
		return KeyCode(268)
	case "KeypadMinus":
		return KeyCode(269)
	case "KeypadPlus":
		return KeyCode(270)
	case "KeypadEnter":
		return KeyCode(271)
	case "KeypadEquals":
		return KeyCode(272)
	case "Up":
		return KeyCode(273)
	case "Down":
		return KeyCode(274)
	case "Right":
		return KeyCode(275)
	case "Left":
		return KeyCode(276)
	case "Insert":
		return KeyCode(277)
	case "Home":
		return KeyCode(278)
	case "End":
		return KeyCode(279)
	case "PageUp":
		return KeyCode(280)
	case "PageDown":
		return KeyCode(281)
	case "LeftShift":
		return KeyCode(304)
	case "RightShift":
		return KeyCode(303)
	case "LeftMeta":
		return KeyCode(310)
	case "RightMeta":
		return KeyCode(309)
	case "LeftAlt":
		return KeyCode(308)
	case "RightAlt":
		return KeyCode(307)
	case "LeftControl":
		return KeyCode(306)
	case "RightControl":
		return KeyCode(305)
	case "CapsLock":
		return KeyCode(301)
	case "NumLock":
		return KeyCode(300)
	case "ScrollLock":
		return KeyCode(302)
	case "LeftSuper":
		return KeyCode(311)
	case "RightSuper":
		return KeyCode(312)
	case "Mode":
		return KeyCode(313)
	case "Compose":
		return KeyCode(314)
	case "Help":
		return KeyCode(315)
	case "Print":
		return KeyCode(316)
	case "SysReq":
		return KeyCode(317)
	case "Break":
		return KeyCode(318)
	case "Menu":
		return KeyCode(319)
	case "Power":
		return KeyCode(320)
	case "Euro":
		return KeyCode(321)
	case "Undo":
		return KeyCode(322)
	case "F1":
		return KeyCode(282)
	case "F2":
		return KeyCode(283)
	case "F3":
		return KeyCode(284)
	case "F4":
		return KeyCode(285)
	case "F5":
		return KeyCode(286)
	case "F6":
		return KeyCode(287)
	case "F7":
		return KeyCode(288)
	case "F8":
		return KeyCode(289)
	case "F9":
		return KeyCode(290)
	case "F10":
		return KeyCode(291)
	case "F11":
		return KeyCode(292)
	case "F12":
		return KeyCode(293)
	case "F13":
		return KeyCode(294)
	case "F14":
		return KeyCode(295)
	case "F15":
		return KeyCode(296)
	case "World0":
		return KeyCode(160)
	case "World1":
		return KeyCode(161)
	case "World2":
		return KeyCode(162)
	case "World3":
		return KeyCode(163)
	case "World4":
		return KeyCode(164)
	case "World5":
		return KeyCode(165)
	case "World6":
		return KeyCode(166)
	case "World7":
		return KeyCode(167)
	case "World8":
		return KeyCode(168)
	case "World9":
		return KeyCode(169)
	case "World10":
		return KeyCode(170)
	case "World11":
		return KeyCode(171)
	case "World12":
		return KeyCode(172)
	case "World13":
		return KeyCode(173)
	case "World14":
		return KeyCode(174)
	case "World15":
		return KeyCode(175)
	case "World16":
		return KeyCode(176)
	case "World17":
		return KeyCode(177)
	case "World18":
		return KeyCode(178)
	case "World19":
		return KeyCode(179)
	case "World20":
		return KeyCode(180)
	case "World21":
		return KeyCode(181)
	case "World22":
		return KeyCode(182)
	case "World23":
		return KeyCode(183)
	case "World24":
		return KeyCode(184)
	case "World25":
		return KeyCode(185)
	case "World26":
		return KeyCode(186)
	case "World27":
		return KeyCode(187)
	case "World28":
		return KeyCode(188)
	case "World29":
		return KeyCode(189)
	case "World30":
		return KeyCode(190)
	case "World31":
		return KeyCode(191)
	case "World32":
		return KeyCode(192)
	case "World33":
		return KeyCode(193)
	case "World34":
		return KeyCode(194)
	case "World35":
		return KeyCode(195)
	case "World36":
		return KeyCode(196)
	case "World37":
		return KeyCode(197)
	case "World38":
		return KeyCode(198)
	case "World39":
		return KeyCode(199)
	case "World40":
		return KeyCode(200)
	case "World41":
		return KeyCode(201)
	case "World42":
		return KeyCode(202)
	case "World43":
		return KeyCode(203)
	case "World44":
		return KeyCode(204)
	case "World45":
		return KeyCode(205)
	case "World46":
		return KeyCode(206)
	case "World47":
		return KeyCode(207)
	case "World48":
		return KeyCode(208)
	case "World49":
		return KeyCode(209)
	case "World50":
		return KeyCode(210)
	case "World51":
		return KeyCode(211)
	case "World52":
		return KeyCode(212)
	case "World53":
		return KeyCode(213)
	case "World54":
		return KeyCode(214)
	case "World55":
		return KeyCode(215)
	case "World56":
		return KeyCode(216)
	case "World57":
		return KeyCode(217)
	case "World58":
		return KeyCode(218)
	case "World59":
		return KeyCode(219)
	case "World60":
		return KeyCode(220)
	case "World61":
		return KeyCode(221)
	case "World62":
		return KeyCode(222)
	case "World63":
		return KeyCode(223)
	case "World64":
		return KeyCode(224)
	case "World65":
		return KeyCode(225)
	case "World66":
		return KeyCode(226)
	case "World67":
		return KeyCode(227)
	case "World68":
		return KeyCode(228)
	case "World69":
		return KeyCode(229)
	case "World70":
		return KeyCode(230)
	case "World71":
		return KeyCode(231)
	case "World72":
		return KeyCode(232)
	case "World73":
		return KeyCode(233)
	case "World74":
		return KeyCode(234)
	case "World75":
		return KeyCode(235)
	case "World76":
		return KeyCode(236)
	case "World77":
		return KeyCode(237)
	case "World78":
		return KeyCode(238)
	case "World79":
		return KeyCode(239)
	case "World80":
		return KeyCode(240)
	case "World81":
		return KeyCode(241)
	case "World82":
		return KeyCode(242)
	case "World83":
		return KeyCode(243)
	case "World84":
		return KeyCode(244)
	case "World85":
		return KeyCode(245)
	case "World86":
		return KeyCode(246)
	case "World87":
		return KeyCode(247)
	case "World88":
		return KeyCode(248)
	case "World89":
		return KeyCode(249)
	case "World90":
		return KeyCode(250)
	case "World91":
		return KeyCode(251)
	case "World92":
		return KeyCode(252)
	case "World93":
		return KeyCode(253)
	case "World94":
		return KeyCode(254)
	case "World95":
		return KeyCode(255)
	case "ButtonX":
		return KeyCode(1000)
	case "ButtonY":
		return KeyCode(1001)
	case "ButtonA":
		return KeyCode(1002)
	case "ButtonB":
		return KeyCode(1003)
	case "ButtonR1":
		return KeyCode(1004)
	case "ButtonL1":
		return KeyCode(1005)
	case "ButtonR2":
		return KeyCode(1006)
	case "ButtonL2":
		return KeyCode(1007)
	case "ButtonR3":
		return KeyCode(1008)
	case "ButtonL3":
		return KeyCode(1009)
	case "ButtonStart":
		return KeyCode(1010)
	case "ButtonSelect":
		return KeyCode(1011)
	case "DPadLeft":
		return KeyCode(1012)
	case "DPadRight":
		return KeyCode(1013)
	case "DPadUp":
		return KeyCode(1014)
	case "DPadDown":
		return KeyCode(1015)
	case "Thumbstick1":
		return KeyCode(1016)
	case "Thumbstick2":
		return KeyCode(1017)
	}
	return nil
}

type KeyCode uint

func (e KeyCode) Type() string {
	return "Enum.KeyCode"
}
func (e KeyCode) String() string {
	return "Enum.KeyCode." + e.Name()
}
func (e KeyCode) Copy() rbx.Value {
	return e
}
func (e KeyCode) Enum() rbx.Enum {
	return _KeyCode{}
}
func (e KeyCode) Value() int {
	return int(e)
}
func (e KeyCode) Name() string {
	switch e {
	case 0:
		return "Unknown"
	case 8:
		return "Backspace"
	case 9:
		return "Tab"
	case 12:
		return "Clear"
	case 13:
		return "Return"
	case 19:
		return "Pause"
	case 27:
		return "Escape"
	case 32:
		return "Space"
	case 34:
		return "QuotedDouble"
	case 35:
		return "Hash"
	case 36:
		return "Dollar"
	case 37:
		return "Percent"
	case 38:
		return "Ampersand"
	case 39:
		return "Quote"
	case 40:
		return "LeftParenthesis"
	case 41:
		return "RightParenthesis"
	case 42:
		return "Asterisk"
	case 43:
		return "Plus"
	case 44:
		return "Comma"
	case 45:
		return "Minus"
	case 46:
		return "Period"
	case 47:
		return "Slash"
	case 48:
		return "Zero"
	case 49:
		return "One"
	case 50:
		return "Two"
	case 51:
		return "Three"
	case 52:
		return "Four"
	case 53:
		return "Five"
	case 54:
		return "Six"
	case 55:
		return "Seven"
	case 56:
		return "Eight"
	case 57:
		return "Nine"
	case 58:
		return "Colon"
	case 59:
		return "Semicolon"
	case 60:
		return "LessThan"
	case 61:
		return "Equals"
	case 62:
		return "GreaterThan"
	case 63:
		return "Question"
	case 64:
		return "At"
	case 91:
		return "LeftBracket"
	case 92:
		return "BackSlash"
	case 93:
		return "RightBracket"
	case 94:
		return "Caret"
	case 95:
		return "Underscore"
	case 96:
		return "Backquote"
	case 97:
		return "A"
	case 98:
		return "B"
	case 99:
		return "C"
	case 100:
		return "D"
	case 101:
		return "E"
	case 102:
		return "F"
	case 103:
		return "G"
	case 104:
		return "H"
	case 105:
		return "I"
	case 106:
		return "J"
	case 107:
		return "K"
	case 108:
		return "L"
	case 109:
		return "M"
	case 110:
		return "N"
	case 111:
		return "O"
	case 112:
		return "P"
	case 113:
		return "Q"
	case 114:
		return "R"
	case 115:
		return "S"
	case 116:
		return "T"
	case 117:
		return "U"
	case 118:
		return "V"
	case 119:
		return "W"
	case 120:
		return "X"
	case 121:
		return "Y"
	case 122:
		return "Z"
	case 123:
		return "LeftCurly"
	case 124:
		return "Pipe"
	case 125:
		return "RightCurly"
	case 126:
		return "Tilde"
	case 127:
		return "Delete"
	case 256:
		return "KeypadZero"
	case 257:
		return "KeypadOne"
	case 258:
		return "KeypadTwo"
	case 259:
		return "KeypadThree"
	case 260:
		return "KeypadFour"
	case 261:
		return "KeypadFive"
	case 262:
		return "KeypadSix"
	case 263:
		return "KeypadSeven"
	case 264:
		return "KeypadEight"
	case 265:
		return "KeypadNine"
	case 266:
		return "KeypadPeriod"
	case 267:
		return "KeypadDivide"
	case 268:
		return "KeypadMultiply"
	case 269:
		return "KeypadMinus"
	case 270:
		return "KeypadPlus"
	case 271:
		return "KeypadEnter"
	case 272:
		return "KeypadEquals"
	case 273:
		return "Up"
	case 274:
		return "Down"
	case 275:
		return "Right"
	case 276:
		return "Left"
	case 277:
		return "Insert"
	case 278:
		return "Home"
	case 279:
		return "End"
	case 280:
		return "PageUp"
	case 281:
		return "PageDown"
	case 304:
		return "LeftShift"
	case 303:
		return "RightShift"
	case 310:
		return "LeftMeta"
	case 309:
		return "RightMeta"
	case 308:
		return "LeftAlt"
	case 307:
		return "RightAlt"
	case 306:
		return "LeftControl"
	case 305:
		return "RightControl"
	case 301:
		return "CapsLock"
	case 300:
		return "NumLock"
	case 302:
		return "ScrollLock"
	case 311:
		return "LeftSuper"
	case 312:
		return "RightSuper"
	case 313:
		return "Mode"
	case 314:
		return "Compose"
	case 315:
		return "Help"
	case 316:
		return "Print"
	case 317:
		return "SysReq"
	case 318:
		return "Break"
	case 319:
		return "Menu"
	case 320:
		return "Power"
	case 321:
		return "Euro"
	case 322:
		return "Undo"
	case 282:
		return "F1"
	case 283:
		return "F2"
	case 284:
		return "F3"
	case 285:
		return "F4"
	case 286:
		return "F5"
	case 287:
		return "F6"
	case 288:
		return "F7"
	case 289:
		return "F8"
	case 290:
		return "F9"
	case 291:
		return "F10"
	case 292:
		return "F11"
	case 293:
		return "F12"
	case 294:
		return "F13"
	case 295:
		return "F14"
	case 296:
		return "F15"
	case 160:
		return "World0"
	case 161:
		return "World1"
	case 162:
		return "World2"
	case 163:
		return "World3"
	case 164:
		return "World4"
	case 165:
		return "World5"
	case 166:
		return "World6"
	case 167:
		return "World7"
	case 168:
		return "World8"
	case 169:
		return "World9"
	case 170:
		return "World10"
	case 171:
		return "World11"
	case 172:
		return "World12"
	case 173:
		return "World13"
	case 174:
		return "World14"
	case 175:
		return "World15"
	case 176:
		return "World16"
	case 177:
		return "World17"
	case 178:
		return "World18"
	case 179:
		return "World19"
	case 180:
		return "World20"
	case 181:
		return "World21"
	case 182:
		return "World22"
	case 183:
		return "World23"
	case 184:
		return "World24"
	case 185:
		return "World25"
	case 186:
		return "World26"
	case 187:
		return "World27"
	case 188:
		return "World28"
	case 189:
		return "World29"
	case 190:
		return "World30"
	case 191:
		return "World31"
	case 192:
		return "World32"
	case 193:
		return "World33"
	case 194:
		return "World34"
	case 195:
		return "World35"
	case 196:
		return "World36"
	case 197:
		return "World37"
	case 198:
		return "World38"
	case 199:
		return "World39"
	case 200:
		return "World40"
	case 201:
		return "World41"
	case 202:
		return "World42"
	case 203:
		return "World43"
	case 204:
		return "World44"
	case 205:
		return "World45"
	case 206:
		return "World46"
	case 207:
		return "World47"
	case 208:
		return "World48"
	case 209:
		return "World49"
	case 210:
		return "World50"
	case 211:
		return "World51"
	case 212:
		return "World52"
	case 213:
		return "World53"
	case 214:
		return "World54"
	case 215:
		return "World55"
	case 216:
		return "World56"
	case 217:
		return "World57"
	case 218:
		return "World58"
	case 219:
		return "World59"
	case 220:
		return "World60"
	case 221:
		return "World61"
	case 222:
		return "World62"
	case 223:
		return "World63"
	case 224:
		return "World64"
	case 225:
		return "World65"
	case 226:
		return "World66"
	case 227:
		return "World67"
	case 228:
		return "World68"
	case 229:
		return "World69"
	case 230:
		return "World70"
	case 231:
		return "World71"
	case 232:
		return "World72"
	case 233:
		return "World73"
	case 234:
		return "World74"
	case 235:
		return "World75"
	case 236:
		return "World76"
	case 237:
		return "World77"
	case 238:
		return "World78"
	case 239:
		return "World79"
	case 240:
		return "World80"
	case 241:
		return "World81"
	case 242:
		return "World82"
	case 243:
		return "World83"
	case 244:
		return "World84"
	case 245:
		return "World85"
	case 246:
		return "World86"
	case 247:
		return "World87"
	case 248:
		return "World88"
	case 249:
		return "World89"
	case 250:
		return "World90"
	case 251:
		return "World91"
	case 252:
		return "World92"
	case 253:
		return "World93"
	case 254:
		return "World94"
	case 255:
		return "World95"
	case 1000:
		return "ButtonX"
	case 1001:
		return "ButtonY"
	case 1002:
		return "ButtonA"
	case 1003:
		return "ButtonB"
	case 1004:
		return "ButtonR1"
	case 1005:
		return "ButtonL1"
	case 1006:
		return "ButtonR2"
	case 1007:
		return "ButtonL2"
	case 1008:
		return "ButtonR3"
	case 1009:
		return "ButtonL3"
	case 1010:
		return "ButtonStart"
	case 1011:
		return "ButtonSelect"
	case 1012:
		return "DPadLeft"
	case 1013:
		return "DPadRight"
	case 1014:
		return "DPadUp"
	case 1015:
		return "DPadDown"
	case 1016:
		return "Thumbstick1"
	case 1017:
		return "Thumbstick2"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _KeywordFilterType struct{}

func (e _KeywordFilterType) Type() string {
	return "Enum"
}
func (e _KeywordFilterType) String() string {
	return "Enum.KeywordFilterType"
}
func (e _KeywordFilterType) Copy() rbx.Value {
	return e
}
func (e _KeywordFilterType) Name() string {
	return "KeywordFilterType"
}
func (e _KeywordFilterType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		KeywordFilterType(0),
		KeywordFilterType(1),
	}
}
func (e _KeywordFilterType) Item(name string) rbx.EnumItem {
	switch name {
	case "Include":
		return KeywordFilterType(0)
	case "Exclude":
		return KeywordFilterType(1)
	}
	return nil
}

type KeywordFilterType uint

func (e KeywordFilterType) Type() string {
	return "Enum.KeywordFilterType"
}
func (e KeywordFilterType) String() string {
	return "Enum.KeywordFilterType." + e.Name()
}
func (e KeywordFilterType) Copy() rbx.Value {
	return e
}
func (e KeywordFilterType) Enum() rbx.Enum {
	return _KeywordFilterType{}
}
func (e KeywordFilterType) Value() int {
	return int(e)
}
func (e KeywordFilterType) Name() string {
	switch e {
	case 0:
		return "Include"
	case 1:
		return "Exclude"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _Language struct{}

func (e _Language) Type() string {
	return "Enum"
}
func (e _Language) String() string {
	return "Enum.Language"
}
func (e _Language) Copy() rbx.Value {
	return e
}
func (e _Language) Name() string {
	return "Language"
}
func (e _Language) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		Language(0),
	}
}
func (e _Language) Item(name string) rbx.EnumItem {
	switch name {
	case "Default":
		return Language(0)
	}
	return nil
}

type Language uint

func (e Language) Type() string {
	return "Enum.Language"
}
func (e Language) String() string {
	return "Enum.Language." + e.Name()
}
func (e Language) Copy() rbx.Value {
	return e
}
func (e Language) Enum() rbx.Enum {
	return _Language{}
}
func (e Language) Value() int {
	return int(e)
}
func (e Language) Name() string {
	switch e {
	case 0:
		return "Default"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _LanguagePreference struct{}

func (e _LanguagePreference) Type() string {
	return "Enum"
}
func (e _LanguagePreference) String() string {
	return "Enum.LanguagePreference"
}
func (e _LanguagePreference) Copy() rbx.Value {
	return e
}
func (e _LanguagePreference) Name() string {
	return "LanguagePreference"
}
func (e _LanguagePreference) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		LanguagePreference(0),
		LanguagePreference(1),
		LanguagePreference(2),
	}
}
func (e _LanguagePreference) Item(name string) rbx.EnumItem {
	switch name {
	case "SystemDefault":
		return LanguagePreference(0)
	case "English":
		return LanguagePreference(1)
	case "SimplifiedChinese":
		return LanguagePreference(2)
	}
	return nil
}

type LanguagePreference uint

func (e LanguagePreference) Type() string {
	return "Enum.LanguagePreference"
}
func (e LanguagePreference) String() string {
	return "Enum.LanguagePreference." + e.Name()
}
func (e LanguagePreference) Copy() rbx.Value {
	return e
}
func (e LanguagePreference) Enum() rbx.Enum {
	return _LanguagePreference{}
}
func (e LanguagePreference) Value() int {
	return int(e)
}
func (e LanguagePreference) Name() string {
	switch e {
	case 0:
		return "SystemDefault"
	case 1:
		return "English"
	case 2:
		return "SimplifiedChinese"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _LeftRight struct{}

func (e _LeftRight) Type() string {
	return "Enum"
}
func (e _LeftRight) String() string {
	return "Enum.LeftRight"
}
func (e _LeftRight) Copy() rbx.Value {
	return e
}
func (e _LeftRight) Name() string {
	return "LeftRight"
}
func (e _LeftRight) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		LeftRight(0),
		LeftRight(1),
		LeftRight(2),
	}
}
func (e _LeftRight) Item(name string) rbx.EnumItem {
	switch name {
	case "Left":
		return LeftRight(0)
	case "Center":
		return LeftRight(1)
	case "Right":
		return LeftRight(2)
	}
	return nil
}

type LeftRight uint

func (e LeftRight) Type() string {
	return "Enum.LeftRight"
}
func (e LeftRight) String() string {
	return "Enum.LeftRight." + e.Name()
}
func (e LeftRight) Copy() rbx.Value {
	return e
}
func (e LeftRight) Enum() rbx.Enum {
	return _LeftRight{}
}
func (e LeftRight) Value() int {
	return int(e)
}
func (e LeftRight) Name() string {
	switch e {
	case 0:
		return "Left"
	case 1:
		return "Center"
	case 2:
		return "Right"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _LevelOfDetailSetting struct{}

func (e _LevelOfDetailSetting) Type() string {
	return "Enum"
}
func (e _LevelOfDetailSetting) String() string {
	return "Enum.LevelOfDetailSetting"
}
func (e _LevelOfDetailSetting) Copy() rbx.Value {
	return e
}
func (e _LevelOfDetailSetting) Name() string {
	return "LevelOfDetailSetting"
}
func (e _LevelOfDetailSetting) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		LevelOfDetailSetting(2),
		LevelOfDetailSetting(1),
		LevelOfDetailSetting(0),
	}
}
func (e _LevelOfDetailSetting) Item(name string) rbx.EnumItem {
	switch name {
	case "High":
		return LevelOfDetailSetting(2)
	case "Medium":
		return LevelOfDetailSetting(1)
	case "Low":
		return LevelOfDetailSetting(0)
	}
	return nil
}

type LevelOfDetailSetting uint

func (e LevelOfDetailSetting) Type() string {
	return "Enum.LevelOfDetailSetting"
}
func (e LevelOfDetailSetting) String() string {
	return "Enum.LevelOfDetailSetting." + e.Name()
}
func (e LevelOfDetailSetting) Copy() rbx.Value {
	return e
}
func (e LevelOfDetailSetting) Enum() rbx.Enum {
	return _LevelOfDetailSetting{}
}
func (e LevelOfDetailSetting) Value() int {
	return int(e)
}
func (e LevelOfDetailSetting) Name() string {
	switch e {
	case 2:
		return "High"
	case 1:
		return "Medium"
	case 0:
		return "Low"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _Limb struct{}

func (e _Limb) Type() string {
	return "Enum"
}
func (e _Limb) String() string {
	return "Enum.Limb"
}
func (e _Limb) Copy() rbx.Value {
	return e
}
func (e _Limb) Name() string {
	return "Limb"
}
func (e _Limb) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		Limb(0),
		Limb(1),
		Limb(2),
		Limb(3),
		Limb(4),
		Limb(5),
		Limb(6),
	}
}
func (e _Limb) Item(name string) rbx.EnumItem {
	switch name {
	case "Head":
		return Limb(0)
	case "Torso":
		return Limb(1)
	case "LeftArm":
		return Limb(2)
	case "RightArm":
		return Limb(3)
	case "LeftLeg":
		return Limb(4)
	case "RightLeg":
		return Limb(5)
	case "Unknown":
		return Limb(6)
	}
	return nil
}

type Limb uint

func (e Limb) Type() string {
	return "Enum.Limb"
}
func (e Limb) String() string {
	return "Enum.Limb." + e.Name()
}
func (e Limb) Copy() rbx.Value {
	return e
}
func (e Limb) Enum() rbx.Enum {
	return _Limb{}
}
func (e Limb) Value() int {
	return int(e)
}
func (e Limb) Name() string {
	switch e {
	case 0:
		return "Head"
	case 1:
		return "Torso"
	case 2:
		return "LeftArm"
	case 3:
		return "RightArm"
	case 4:
		return "LeftLeg"
	case 5:
		return "RightLeg"
	case 6:
		return "Unknown"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _ListDisplayMode struct{}

func (e _ListDisplayMode) Type() string {
	return "Enum"
}
func (e _ListDisplayMode) String() string {
	return "Enum.ListDisplayMode"
}
func (e _ListDisplayMode) Copy() rbx.Value {
	return e
}
func (e _ListDisplayMode) Name() string {
	return "ListDisplayMode"
}
func (e _ListDisplayMode) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		ListDisplayMode(0),
		ListDisplayMode(1),
	}
}
func (e _ListDisplayMode) Item(name string) rbx.EnumItem {
	switch name {
	case "Horizontal":
		return ListDisplayMode(0)
	case "Vertical":
		return ListDisplayMode(1)
	}
	return nil
}

type ListDisplayMode uint

func (e ListDisplayMode) Type() string {
	return "Enum.ListDisplayMode"
}
func (e ListDisplayMode) String() string {
	return "Enum.ListDisplayMode." + e.Name()
}
func (e ListDisplayMode) Copy() rbx.Value {
	return e
}
func (e ListDisplayMode) Enum() rbx.Enum {
	return _ListDisplayMode{}
}
func (e ListDisplayMode) Value() int {
	return int(e)
}
func (e ListDisplayMode) Name() string {
	switch e {
	case 0:
		return "Horizontal"
	case 1:
		return "Vertical"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _ListenerType struct{}

func (e _ListenerType) Type() string {
	return "Enum"
}
func (e _ListenerType) String() string {
	return "Enum.ListenerType"
}
func (e _ListenerType) Copy() rbx.Value {
	return e
}
func (e _ListenerType) Name() string {
	return "ListenerType"
}
func (e _ListenerType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		ListenerType(0),
		ListenerType(1),
		ListenerType(2),
		ListenerType(3),
	}
}
func (e _ListenerType) Item(name string) rbx.EnumItem {
	switch name {
	case "Camera":
		return ListenerType(0)
	case "CFrame":
		return ListenerType(1)
	case "ObjectPosition":
		return ListenerType(2)
	case "ObjectCFrame":
		return ListenerType(3)
	}
	return nil
}

type ListenerType uint

func (e ListenerType) Type() string {
	return "Enum.ListenerType"
}
func (e ListenerType) String() string {
	return "Enum.ListenerType." + e.Name()
}
func (e ListenerType) Copy() rbx.Value {
	return e
}
func (e ListenerType) Enum() rbx.Enum {
	return _ListenerType{}
}
func (e ListenerType) Value() int {
	return int(e)
}
func (e ListenerType) Name() string {
	switch e {
	case 0:
		return "Camera"
	case 1:
		return "CFrame"
	case 2:
		return "ObjectPosition"
	case 3:
		return "ObjectCFrame"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _Material struct{}

func (e _Material) Type() string {
	return "Enum"
}
func (e _Material) String() string {
	return "Enum.Material"
}
func (e _Material) Copy() rbx.Value {
	return e
}
func (e _Material) Name() string {
	return "Material"
}
func (e _Material) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		Material(256),
		Material(512),
		Material(800),
		Material(816),
		Material(1040),
		Material(1056),
		Material(1072),
		Material(1280),
		Material(1536),
		Material(784),
		Material(832),
		Material(848),
		Material(864),
		Material(1296),
		Material(1312),
		Material(272),
		Material(1088),
		Material(528),
		Material(880),
		Material(1792),
		Material(2048),
		Material(896),
		Material(1552),
		Material(1328),
		Material(912),
		Material(1344),
		Material(788),
		Material(1360),
		Material(804),
		Material(288),
		Material(1568),
		Material(1376),
		Material(1284),
		Material(1392),
		Material(820),
		Material(836),
		Material(1584),
	}
}
func (e _Material) Item(name string) rbx.EnumItem {
	switch name {
	case "Plastic":
		return Material(256)
	case "Wood":
		return Material(512)
	case "Slate":
		return Material(800)
	case "Concrete":
		return Material(816)
	case "CorrodedMetal":
		return Material(1040)
	case "DiamondPlate":
		return Material(1056)
	case "Foil":
		return Material(1072)
	case "Grass":
		return Material(1280)
	case "Ice":
		return Material(1536)
	case "Marble":
		return Material(784)
	case "Granite":
		return Material(832)
	case "Brick":
		return Material(848)
	case "Pebble":
		return Material(864)
	case "Sand":
		return Material(1296)
	case "Fabric":
		return Material(1312)
	case "SmoothPlastic":
		return Material(272)
	case "Metal":
		return Material(1088)
	case "WoodPlanks":
		return Material(528)
	case "Cobblestone":
		return Material(880)
	case "Air":
		return Material(1792)
	case "Water":
		return Material(2048)
	case "Rock":
		return Material(896)
	case "Glacier":
		return Material(1552)
	case "Snow":
		return Material(1328)
	case "Sandstone":
		return Material(912)
	case "Mud":
		return Material(1344)
	case "Basalt":
		return Material(788)
	case "Ground":
		return Material(1360)
	case "CrackedLava":
		return Material(804)
	case "Neon":
		return Material(288)
	case "Glass":
		return Material(1568)
	case "Asphalt":
		return Material(1376)
	case "LeafyGrass":
		return Material(1284)
	case "Salt":
		return Material(1392)
	case "Limestone":
		return Material(820)
	case "Pavement":
		return Material(836)
	case "ForceField":
		return Material(1584)
	}
	return nil
}

type Material uint

func (e Material) Type() string {
	return "Enum.Material"
}
func (e Material) String() string {
	return "Enum.Material." + e.Name()
}
func (e Material) Copy() rbx.Value {
	return e
}
func (e Material) Enum() rbx.Enum {
	return _Material{}
}
func (e Material) Value() int {
	return int(e)
}
func (e Material) Name() string {
	switch e {
	case 256:
		return "Plastic"
	case 512:
		return "Wood"
	case 800:
		return "Slate"
	case 816:
		return "Concrete"
	case 1040:
		return "CorrodedMetal"
	case 1056:
		return "DiamondPlate"
	case 1072:
		return "Foil"
	case 1280:
		return "Grass"
	case 1536:
		return "Ice"
	case 784:
		return "Marble"
	case 832:
		return "Granite"
	case 848:
		return "Brick"
	case 864:
		return "Pebble"
	case 1296:
		return "Sand"
	case 1312:
		return "Fabric"
	case 272:
		return "SmoothPlastic"
	case 1088:
		return "Metal"
	case 528:
		return "WoodPlanks"
	case 880:
		return "Cobblestone"
	case 1792:
		return "Air"
	case 2048:
		return "Water"
	case 896:
		return "Rock"
	case 1552:
		return "Glacier"
	case 1328:
		return "Snow"
	case 912:
		return "Sandstone"
	case 1344:
		return "Mud"
	case 788:
		return "Basalt"
	case 1360:
		return "Ground"
	case 804:
		return "CrackedLava"
	case 288:
		return "Neon"
	case 1568:
		return "Glass"
	case 1376:
		return "Asphalt"
	case 1284:
		return "LeafyGrass"
	case 1392:
		return "Salt"
	case 820:
		return "Limestone"
	case 836:
		return "Pavement"
	case 1584:
		return "ForceField"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _MembershipType struct{}

func (e _MembershipType) Type() string {
	return "Enum"
}
func (e _MembershipType) String() string {
	return "Enum.MembershipType"
}
func (e _MembershipType) Copy() rbx.Value {
	return e
}
func (e _MembershipType) Name() string {
	return "MembershipType"
}
func (e _MembershipType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		MembershipType(0),
		MembershipType(1),
		MembershipType(2),
		MembershipType(3),
		MembershipType(4),
	}
}
func (e _MembershipType) Item(name string) rbx.EnumItem {
	switch name {
	case "None":
		return MembershipType(0)
	case "BuildersClub":
		return MembershipType(1)
	case "TurboBuildersClub":
		return MembershipType(2)
	case "OutrageousBuildersClub":
		return MembershipType(3)
	case "Premium":
		return MembershipType(4)
	}
	return nil
}

type MembershipType uint

func (e MembershipType) Type() string {
	return "Enum.MembershipType"
}
func (e MembershipType) String() string {
	return "Enum.MembershipType." + e.Name()
}
func (e MembershipType) Copy() rbx.Value {
	return e
}
func (e MembershipType) Enum() rbx.Enum {
	return _MembershipType{}
}
func (e MembershipType) Value() int {
	return int(e)
}
func (e MembershipType) Name() string {
	switch e {
	case 0:
		return "None"
	case 1:
		return "BuildersClub"
	case 2:
		return "TurboBuildersClub"
	case 3:
		return "OutrageousBuildersClub"
	case 4:
		return "Premium"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _MeshType struct{}

func (e _MeshType) Type() string {
	return "Enum"
}
func (e _MeshType) String() string {
	return "Enum.MeshType"
}
func (e _MeshType) Copy() rbx.Value {
	return e
}
func (e _MeshType) Name() string {
	return "MeshType"
}
func (e _MeshType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		MeshType(0),
		MeshType(1),
		MeshType(2),
		MeshType(7),
		MeshType(8),
		MeshType(9),
		MeshType(10),
		MeshType(11),
		MeshType(6),
		MeshType(3),
		MeshType(4),
		MeshType(5),
	}
}
func (e _MeshType) Item(name string) rbx.EnumItem {
	switch name {
	case "Head":
		return MeshType(0)
	case "Torso":
		return MeshType(1)
	case "Wedge":
		return MeshType(2)
	case "Prism":
		return MeshType(7)
	case "Pyramid":
		return MeshType(8)
	case "ParallelRamp":
		return MeshType(9)
	case "RightAngleRamp":
		return MeshType(10)
	case "CornerWedge":
		return MeshType(11)
	case "Brick":
		return MeshType(6)
	case "Sphere":
		return MeshType(3)
	case "Cylinder":
		return MeshType(4)
	case "FileMesh":
		return MeshType(5)
	}
	return nil
}

type MeshType uint

func (e MeshType) Type() string {
	return "Enum.MeshType"
}
func (e MeshType) String() string {
	return "Enum.MeshType." + e.Name()
}
func (e MeshType) Copy() rbx.Value {
	return e
}
func (e MeshType) Enum() rbx.Enum {
	return _MeshType{}
}
func (e MeshType) Value() int {
	return int(e)
}
func (e MeshType) Name() string {
	switch e {
	case 0:
		return "Head"
	case 1:
		return "Torso"
	case 2:
		return "Wedge"
	case 7:
		return "Prism"
	case 8:
		return "Pyramid"
	case 9:
		return "ParallelRamp"
	case 10:
		return "RightAngleRamp"
	case 11:
		return "CornerWedge"
	case 6:
		return "Brick"
	case 3:
		return "Sphere"
	case 4:
		return "Cylinder"
	case 5:
		return "FileMesh"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _MessageType struct{}

func (e _MessageType) Type() string {
	return "Enum"
}
func (e _MessageType) String() string {
	return "Enum.MessageType"
}
func (e _MessageType) Copy() rbx.Value {
	return e
}
func (e _MessageType) Name() string {
	return "MessageType"
}
func (e _MessageType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		MessageType(0),
		MessageType(1),
		MessageType(2),
		MessageType(3),
	}
}
func (e _MessageType) Item(name string) rbx.EnumItem {
	switch name {
	case "MessageOutput":
		return MessageType(0)
	case "MessageInfo":
		return MessageType(1)
	case "MessageWarning":
		return MessageType(2)
	case "MessageError":
		return MessageType(3)
	}
	return nil
}

type MessageType uint

func (e MessageType) Type() string {
	return "Enum.MessageType"
}
func (e MessageType) String() string {
	return "Enum.MessageType." + e.Name()
}
func (e MessageType) Copy() rbx.Value {
	return e
}
func (e MessageType) Enum() rbx.Enum {
	return _MessageType{}
}
func (e MessageType) Value() int {
	return int(e)
}
func (e MessageType) Name() string {
	switch e {
	case 0:
		return "MessageOutput"
	case 1:
		return "MessageInfo"
	case 2:
		return "MessageWarning"
	case 3:
		return "MessageError"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _ModifierKey struct{}

func (e _ModifierKey) Type() string {
	return "Enum"
}
func (e _ModifierKey) String() string {
	return "Enum.ModifierKey"
}
func (e _ModifierKey) Copy() rbx.Value {
	return e
}
func (e _ModifierKey) Name() string {
	return "ModifierKey"
}
func (e _ModifierKey) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		ModifierKey(2),
		ModifierKey(1),
		ModifierKey(3),
		ModifierKey(0),
	}
}
func (e _ModifierKey) Item(name string) rbx.EnumItem {
	switch name {
	case "Alt":
		return ModifierKey(2)
	case "Ctrl":
		return ModifierKey(1)
	case "Meta":
		return ModifierKey(3)
	case "Shift":
		return ModifierKey(0)
	}
	return nil
}

type ModifierKey uint

func (e ModifierKey) Type() string {
	return "Enum.ModifierKey"
}
func (e ModifierKey) String() string {
	return "Enum.ModifierKey." + e.Name()
}
func (e ModifierKey) Copy() rbx.Value {
	return e
}
func (e ModifierKey) Enum() rbx.Enum {
	return _ModifierKey{}
}
func (e ModifierKey) Value() int {
	return int(e)
}
func (e ModifierKey) Name() string {
	switch e {
	case 2:
		return "Alt"
	case 1:
		return "Ctrl"
	case 3:
		return "Meta"
	case 0:
		return "Shift"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _MouseBehavior struct{}

func (e _MouseBehavior) Type() string {
	return "Enum"
}
func (e _MouseBehavior) String() string {
	return "Enum.MouseBehavior"
}
func (e _MouseBehavior) Copy() rbx.Value {
	return e
}
func (e _MouseBehavior) Name() string {
	return "MouseBehavior"
}
func (e _MouseBehavior) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		MouseBehavior(0),
		MouseBehavior(1),
		MouseBehavior(2),
	}
}
func (e _MouseBehavior) Item(name string) rbx.EnumItem {
	switch name {
	case "Default":
		return MouseBehavior(0)
	case "LockCenter":
		return MouseBehavior(1)
	case "LockCurrentPosition":
		return MouseBehavior(2)
	}
	return nil
}

type MouseBehavior uint

func (e MouseBehavior) Type() string {
	return "Enum.MouseBehavior"
}
func (e MouseBehavior) String() string {
	return "Enum.MouseBehavior." + e.Name()
}
func (e MouseBehavior) Copy() rbx.Value {
	return e
}
func (e MouseBehavior) Enum() rbx.Enum {
	return _MouseBehavior{}
}
func (e MouseBehavior) Value() int {
	return int(e)
}
func (e MouseBehavior) Name() string {
	switch e {
	case 0:
		return "Default"
	case 1:
		return "LockCenter"
	case 2:
		return "LockCurrentPosition"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _MoveState struct{}

func (e _MoveState) Type() string {
	return "Enum"
}
func (e _MoveState) String() string {
	return "Enum.MoveState"
}
func (e _MoveState) Copy() rbx.Value {
	return e
}
func (e _MoveState) Name() string {
	return "MoveState"
}
func (e _MoveState) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		MoveState(0),
		MoveState(1),
		MoveState(2),
		MoveState(3),
		MoveState(4),
	}
}
func (e _MoveState) Item(name string) rbx.EnumItem {
	switch name {
	case "Stopped":
		return MoveState(0)
	case "Coasting":
		return MoveState(1)
	case "Pushing":
		return MoveState(2)
	case "Stopping":
		return MoveState(3)
	case "AirFree":
		return MoveState(4)
	}
	return nil
}

type MoveState uint

func (e MoveState) Type() string {
	return "Enum.MoveState"
}
func (e MoveState) String() string {
	return "Enum.MoveState." + e.Name()
}
func (e MoveState) Copy() rbx.Value {
	return e
}
func (e MoveState) Enum() rbx.Enum {
	return _MoveState{}
}
func (e MoveState) Value() int {
	return int(e)
}
func (e MoveState) Name() string {
	switch e {
	case 0:
		return "Stopped"
	case 1:
		return "Coasting"
	case 2:
		return "Pushing"
	case 3:
		return "Stopping"
	case 4:
		return "AirFree"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _NameOcclusion struct{}

func (e _NameOcclusion) Type() string {
	return "Enum"
}
func (e _NameOcclusion) String() string {
	return "Enum.NameOcclusion"
}
func (e _NameOcclusion) Copy() rbx.Value {
	return e
}
func (e _NameOcclusion) Name() string {
	return "NameOcclusion"
}
func (e _NameOcclusion) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		NameOcclusion(2),
		NameOcclusion(1),
		NameOcclusion(0),
	}
}
func (e _NameOcclusion) Item(name string) rbx.EnumItem {
	switch name {
	case "OccludeAll":
		return NameOcclusion(2)
	case "EnemyOcclusion":
		return NameOcclusion(1)
	case "NoOcclusion":
		return NameOcclusion(0)
	}
	return nil
}

type NameOcclusion uint

func (e NameOcclusion) Type() string {
	return "Enum.NameOcclusion"
}
func (e NameOcclusion) String() string {
	return "Enum.NameOcclusion." + e.Name()
}
func (e NameOcclusion) Copy() rbx.Value {
	return e
}
func (e NameOcclusion) Enum() rbx.Enum {
	return _NameOcclusion{}
}
func (e NameOcclusion) Value() int {
	return int(e)
}
func (e NameOcclusion) Name() string {
	switch e {
	case 2:
		return "OccludeAll"
	case 1:
		return "EnemyOcclusion"
	case 0:
		return "NoOcclusion"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _NetworkOwnership struct{}

func (e _NetworkOwnership) Type() string {
	return "Enum"
}
func (e _NetworkOwnership) String() string {
	return "Enum.NetworkOwnership"
}
func (e _NetworkOwnership) Copy() rbx.Value {
	return e
}
func (e _NetworkOwnership) Name() string {
	return "NetworkOwnership"
}
func (e _NetworkOwnership) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		NetworkOwnership(0),
		NetworkOwnership(1),
		NetworkOwnership(2),
	}
}
func (e _NetworkOwnership) Item(name string) rbx.EnumItem {
	switch name {
	case "Automatic":
		return NetworkOwnership(0)
	case "Manual":
		return NetworkOwnership(1)
	case "OnContact":
		return NetworkOwnership(2)
	}
	return nil
}

type NetworkOwnership uint

func (e NetworkOwnership) Type() string {
	return "Enum.NetworkOwnership"
}
func (e NetworkOwnership) String() string {
	return "Enum.NetworkOwnership." + e.Name()
}
func (e NetworkOwnership) Copy() rbx.Value {
	return e
}
func (e NetworkOwnership) Enum() rbx.Enum {
	return _NetworkOwnership{}
}
func (e NetworkOwnership) Value() int {
	return int(e)
}
func (e NetworkOwnership) Name() string {
	switch e {
	case 0:
		return "Automatic"
	case 1:
		return "Manual"
	case 2:
		return "OnContact"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _NormalId struct{}

func (e _NormalId) Type() string {
	return "Enum"
}
func (e _NormalId) String() string {
	return "Enum.NormalId"
}
func (e _NormalId) Copy() rbx.Value {
	return e
}
func (e _NormalId) Name() string {
	return "NormalId"
}
func (e _NormalId) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		NormalId(1),
		NormalId(4),
		NormalId(2),
		NormalId(5),
		NormalId(0),
		NormalId(3),
	}
}
func (e _NormalId) Item(name string) rbx.EnumItem {
	switch name {
	case "Top":
		return NormalId(1)
	case "Bottom":
		return NormalId(4)
	case "Back":
		return NormalId(2)
	case "Front":
		return NormalId(5)
	case "Right":
		return NormalId(0)
	case "Left":
		return NormalId(3)
	}
	return nil
}

type NormalId uint

func (e NormalId) Type() string {
	return "Enum.NormalId"
}
func (e NormalId) String() string {
	return "Enum.NormalId." + e.Name()
}
func (e NormalId) Copy() rbx.Value {
	return e
}
func (e NormalId) Enum() rbx.Enum {
	return _NormalId{}
}
func (e NormalId) Value() int {
	return int(e)
}
func (e NormalId) Name() string {
	switch e {
	case 1:
		return "Top"
	case 4:
		return "Bottom"
	case 2:
		return "Back"
	case 5:
		return "Front"
	case 0:
		return "Right"
	case 3:
		return "Left"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _OutputLayoutMode struct{}

func (e _OutputLayoutMode) Type() string {
	return "Enum"
}
func (e _OutputLayoutMode) String() string {
	return "Enum.OutputLayoutMode"
}
func (e _OutputLayoutMode) Copy() rbx.Value {
	return e
}
func (e _OutputLayoutMode) Name() string {
	return "OutputLayoutMode"
}
func (e _OutputLayoutMode) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		OutputLayoutMode(0),
		OutputLayoutMode(1),
	}
}
func (e _OutputLayoutMode) Item(name string) rbx.EnumItem {
	switch name {
	case "Horizontal":
		return OutputLayoutMode(0)
	case "Vertical":
		return OutputLayoutMode(1)
	}
	return nil
}

type OutputLayoutMode uint

func (e OutputLayoutMode) Type() string {
	return "Enum.OutputLayoutMode"
}
func (e OutputLayoutMode) String() string {
	return "Enum.OutputLayoutMode." + e.Name()
}
func (e OutputLayoutMode) Copy() rbx.Value {
	return e
}
func (e OutputLayoutMode) Enum() rbx.Enum {
	return _OutputLayoutMode{}
}
func (e OutputLayoutMode) Value() int {
	return int(e)
}
func (e OutputLayoutMode) Name() string {
	switch e {
	case 0:
		return "Horizontal"
	case 1:
		return "Vertical"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _OverrideMouseIconBehavior struct{}

func (e _OverrideMouseIconBehavior) Type() string {
	return "Enum"
}
func (e _OverrideMouseIconBehavior) String() string {
	return "Enum.OverrideMouseIconBehavior"
}
func (e _OverrideMouseIconBehavior) Copy() rbx.Value {
	return e
}
func (e _OverrideMouseIconBehavior) Name() string {
	return "OverrideMouseIconBehavior"
}
func (e _OverrideMouseIconBehavior) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		OverrideMouseIconBehavior(0),
		OverrideMouseIconBehavior(1),
		OverrideMouseIconBehavior(2),
	}
}
func (e _OverrideMouseIconBehavior) Item(name string) rbx.EnumItem {
	switch name {
	case "None":
		return OverrideMouseIconBehavior(0)
	case "ForceShow":
		return OverrideMouseIconBehavior(1)
	case "ForceHide":
		return OverrideMouseIconBehavior(2)
	}
	return nil
}

type OverrideMouseIconBehavior uint

func (e OverrideMouseIconBehavior) Type() string {
	return "Enum.OverrideMouseIconBehavior"
}
func (e OverrideMouseIconBehavior) String() string {
	return "Enum.OverrideMouseIconBehavior." + e.Name()
}
func (e OverrideMouseIconBehavior) Copy() rbx.Value {
	return e
}
func (e OverrideMouseIconBehavior) Enum() rbx.Enum {
	return _OverrideMouseIconBehavior{}
}
func (e OverrideMouseIconBehavior) Value() int {
	return int(e)
}
func (e OverrideMouseIconBehavior) Name() string {
	switch e {
	case 0:
		return "None"
	case 1:
		return "ForceShow"
	case 2:
		return "ForceHide"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _PacketPriority struct{}

func (e _PacketPriority) Type() string {
	return "Enum"
}
func (e _PacketPriority) String() string {
	return "Enum.PacketPriority"
}
func (e _PacketPriority) Copy() rbx.Value {
	return e
}
func (e _PacketPriority) Name() string {
	return "PacketPriority"
}
func (e _PacketPriority) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		PacketPriority(0),
		PacketPriority(1),
		PacketPriority(2),
		PacketPriority(3),
	}
}
func (e _PacketPriority) Item(name string) rbx.EnumItem {
	switch name {
	case "IMMEDIATE_PRIORITY":
		return PacketPriority(0)
	case "HIGH_PRIORITY":
		return PacketPriority(1)
	case "MEDIUM_PRIORITY":
		return PacketPriority(2)
	case "LOW_PRIORITY":
		return PacketPriority(3)
	}
	return nil
}

type PacketPriority uint

func (e PacketPriority) Type() string {
	return "Enum.PacketPriority"
}
func (e PacketPriority) String() string {
	return "Enum.PacketPriority." + e.Name()
}
func (e PacketPriority) Copy() rbx.Value {
	return e
}
func (e PacketPriority) Enum() rbx.Enum {
	return _PacketPriority{}
}
func (e PacketPriority) Value() int {
	return int(e)
}
func (e PacketPriority) Name() string {
	switch e {
	case 0:
		return "IMMEDIATE_PRIORITY"
	case 1:
		return "HIGH_PRIORITY"
	case 2:
		return "MEDIUM_PRIORITY"
	case 3:
		return "LOW_PRIORITY"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _PartType struct{}

func (e _PartType) Type() string {
	return "Enum"
}
func (e _PartType) String() string {
	return "Enum.PartType"
}
func (e _PartType) Copy() rbx.Value {
	return e
}
func (e _PartType) Name() string {
	return "PartType"
}
func (e _PartType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		PartType(0),
		PartType(1),
		PartType(2),
	}
}
func (e _PartType) Item(name string) rbx.EnumItem {
	switch name {
	case "Ball":
		return PartType(0)
	case "Block":
		return PartType(1)
	case "Cylinder":
		return PartType(2)
	}
	return nil
}

type PartType uint

func (e PartType) Type() string {
	return "Enum.PartType"
}
func (e PartType) String() string {
	return "Enum.PartType." + e.Name()
}
func (e PartType) Copy() rbx.Value {
	return e
}
func (e PartType) Enum() rbx.Enum {
	return _PartType{}
}
func (e PartType) Value() int {
	return int(e)
}
func (e PartType) Name() string {
	switch e {
	case 0:
		return "Ball"
	case 1:
		return "Block"
	case 2:
		return "Cylinder"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _PathStatus struct{}

func (e _PathStatus) Type() string {
	return "Enum"
}
func (e _PathStatus) String() string {
	return "Enum.PathStatus"
}
func (e _PathStatus) Copy() rbx.Value {
	return e
}
func (e _PathStatus) Name() string {
	return "PathStatus"
}
func (e _PathStatus) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		PathStatus(0),
		PathStatus(1),
		PathStatus(2),
		PathStatus(3),
		PathStatus(4),
		PathStatus(5),
	}
}
func (e _PathStatus) Item(name string) rbx.EnumItem {
	switch name {
	case "Success":
		return PathStatus(0)
	case "ClosestNoPath":
		return PathStatus(1)
	case "ClosestOutOfRange":
		return PathStatus(2)
	case "FailStartNotEmpty":
		return PathStatus(3)
	case "FailFinishNotEmpty":
		return PathStatus(4)
	case "NoPath":
		return PathStatus(5)
	}
	return nil
}

type PathStatus uint

func (e PathStatus) Type() string {
	return "Enum.PathStatus"
}
func (e PathStatus) String() string {
	return "Enum.PathStatus." + e.Name()
}
func (e PathStatus) Copy() rbx.Value {
	return e
}
func (e PathStatus) Enum() rbx.Enum {
	return _PathStatus{}
}
func (e PathStatus) Value() int {
	return int(e)
}
func (e PathStatus) Name() string {
	switch e {
	case 0:
		return "Success"
	case 1:
		return "ClosestNoPath"
	case 2:
		return "ClosestOutOfRange"
	case 3:
		return "FailStartNotEmpty"
	case 4:
		return "FailFinishNotEmpty"
	case 5:
		return "NoPath"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _PathWaypointAction struct{}

func (e _PathWaypointAction) Type() string {
	return "Enum"
}
func (e _PathWaypointAction) String() string {
	return "Enum.PathWaypointAction"
}
func (e _PathWaypointAction) Copy() rbx.Value {
	return e
}
func (e _PathWaypointAction) Name() string {
	return "PathWaypointAction"
}
func (e _PathWaypointAction) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		PathWaypointAction(0),
		PathWaypointAction(1),
	}
}
func (e _PathWaypointAction) Item(name string) rbx.EnumItem {
	switch name {
	case "Walk":
		return PathWaypointAction(0)
	case "Jump":
		return PathWaypointAction(1)
	}
	return nil
}

type PathWaypointAction uint

func (e PathWaypointAction) Type() string {
	return "Enum.PathWaypointAction"
}
func (e PathWaypointAction) String() string {
	return "Enum.PathWaypointAction." + e.Name()
}
func (e PathWaypointAction) Copy() rbx.Value {
	return e
}
func (e PathWaypointAction) Enum() rbx.Enum {
	return _PathWaypointAction{}
}
func (e PathWaypointAction) Value() int {
	return int(e)
}
func (e PathWaypointAction) Name() string {
	switch e {
	case 0:
		return "Walk"
	case 1:
		return "Jump"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _PermissionLevelShown struct{}

func (e _PermissionLevelShown) Type() string {
	return "Enum"
}
func (e _PermissionLevelShown) String() string {
	return "Enum.PermissionLevelShown"
}
func (e _PermissionLevelShown) Copy() rbx.Value {
	return e
}
func (e _PermissionLevelShown) Name() string {
	return "PermissionLevelShown"
}
func (e _PermissionLevelShown) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		PermissionLevelShown(0),
		PermissionLevelShown(1),
		PermissionLevelShown(2),
		PermissionLevelShown(3),
		PermissionLevelShown(4),
	}
}
func (e _PermissionLevelShown) Item(name string) rbx.EnumItem {
	switch name {
	case "Game":
		return PermissionLevelShown(0)
	case "RobloxGame":
		return PermissionLevelShown(1)
	case "RobloxScript":
		return PermissionLevelShown(2)
	case "Studio":
		return PermissionLevelShown(3)
	case "Roblox":
		return PermissionLevelShown(4)
	}
	return nil
}

type PermissionLevelShown uint

func (e PermissionLevelShown) Type() string {
	return "Enum.PermissionLevelShown"
}
func (e PermissionLevelShown) String() string {
	return "Enum.PermissionLevelShown." + e.Name()
}
func (e PermissionLevelShown) Copy() rbx.Value {
	return e
}
func (e PermissionLevelShown) Enum() rbx.Enum {
	return _PermissionLevelShown{}
}
func (e PermissionLevelShown) Value() int {
	return int(e)
}
func (e PermissionLevelShown) Name() string {
	switch e {
	case 0:
		return "Game"
	case 1:
		return "RobloxGame"
	case 2:
		return "RobloxScript"
	case 3:
		return "Studio"
	case 4:
		return "Roblox"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _Platform struct{}

func (e _Platform) Type() string {
	return "Enum"
}
func (e _Platform) String() string {
	return "Enum.Platform"
}
func (e _Platform) Copy() rbx.Value {
	return e
}
func (e _Platform) Name() string {
	return "Platform"
}
func (e _Platform) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		Platform(0),
		Platform(1),
		Platform(2),
		Platform(3),
		Platform(4),
		Platform(5),
		Platform(6),
		Platform(7),
		Platform(8),
		Platform(9),
		Platform(10),
		Platform(11),
		Platform(12),
		Platform(13),
		Platform(14),
		Platform(15),
		Platform(16),
		Platform(17),
		Platform(18),
		Platform(19),
	}
}
func (e _Platform) Item(name string) rbx.EnumItem {
	switch name {
	case "Windows":
		return Platform(0)
	case "OSX":
		return Platform(1)
	case "IOS":
		return Platform(2)
	case "Android":
		return Platform(3)
	case "XBoxOne":
		return Platform(4)
	case "PS4":
		return Platform(5)
	case "PS3":
		return Platform(6)
	case "XBox360":
		return Platform(7)
	case "WiiU":
		return Platform(8)
	case "NX":
		return Platform(9)
	case "Ouya":
		return Platform(10)
	case "AndroidTV":
		return Platform(11)
	case "Chromecast":
		return Platform(12)
	case "Linux":
		return Platform(13)
	case "SteamOS":
		return Platform(14)
	case "WebOS":
		return Platform(15)
	case "DOS":
		return Platform(16)
	case "BeOS":
		return Platform(17)
	case "UWP":
		return Platform(18)
	case "None":
		return Platform(19)
	}
	return nil
}

type Platform uint

func (e Platform) Type() string {
	return "Enum.Platform"
}
func (e Platform) String() string {
	return "Enum.Platform." + e.Name()
}
func (e Platform) Copy() rbx.Value {
	return e
}
func (e Platform) Enum() rbx.Enum {
	return _Platform{}
}
func (e Platform) Value() int {
	return int(e)
}
func (e Platform) Name() string {
	switch e {
	case 0:
		return "Windows"
	case 1:
		return "OSX"
	case 2:
		return "IOS"
	case 3:
		return "Android"
	case 4:
		return "XBoxOne"
	case 5:
		return "PS4"
	case 6:
		return "PS3"
	case 7:
		return "XBox360"
	case 8:
		return "WiiU"
	case 9:
		return "NX"
	case 10:
		return "Ouya"
	case 11:
		return "AndroidTV"
	case 12:
		return "Chromecast"
	case 13:
		return "Linux"
	case 14:
		return "SteamOS"
	case 15:
		return "WebOS"
	case 16:
		return "DOS"
	case 17:
		return "BeOS"
	case 18:
		return "UWP"
	case 19:
		return "None"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _PlaybackState struct{}

func (e _PlaybackState) Type() string {
	return "Enum"
}
func (e _PlaybackState) String() string {
	return "Enum.PlaybackState"
}
func (e _PlaybackState) Copy() rbx.Value {
	return e
}
func (e _PlaybackState) Name() string {
	return "PlaybackState"
}
func (e _PlaybackState) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		PlaybackState(0),
		PlaybackState(1),
		PlaybackState(2),
		PlaybackState(3),
		PlaybackState(4),
		PlaybackState(5),
	}
}
func (e _PlaybackState) Item(name string) rbx.EnumItem {
	switch name {
	case "Begin":
		return PlaybackState(0)
	case "Delayed":
		return PlaybackState(1)
	case "Playing":
		return PlaybackState(2)
	case "Paused":
		return PlaybackState(3)
	case "Completed":
		return PlaybackState(4)
	case "Cancelled":
		return PlaybackState(5)
	}
	return nil
}

type PlaybackState uint

func (e PlaybackState) Type() string {
	return "Enum.PlaybackState"
}
func (e PlaybackState) String() string {
	return "Enum.PlaybackState." + e.Name()
}
func (e PlaybackState) Copy() rbx.Value {
	return e
}
func (e PlaybackState) Enum() rbx.Enum {
	return _PlaybackState{}
}
func (e PlaybackState) Value() int {
	return int(e)
}
func (e PlaybackState) Name() string {
	switch e {
	case 0:
		return "Begin"
	case 1:
		return "Delayed"
	case 2:
		return "Playing"
	case 3:
		return "Paused"
	case 4:
		return "Completed"
	case 5:
		return "Cancelled"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _PlayerActions struct{}

func (e _PlayerActions) Type() string {
	return "Enum"
}
func (e _PlayerActions) String() string {
	return "Enum.PlayerActions"
}
func (e _PlayerActions) Copy() rbx.Value {
	return e
}
func (e _PlayerActions) Name() string {
	return "PlayerActions"
}
func (e _PlayerActions) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		PlayerActions(0),
		PlayerActions(1),
		PlayerActions(2),
		PlayerActions(3),
		PlayerActions(4),
	}
}
func (e _PlayerActions) Item(name string) rbx.EnumItem {
	switch name {
	case "CharacterForward":
		return PlayerActions(0)
	case "CharacterBackward":
		return PlayerActions(1)
	case "CharacterLeft":
		return PlayerActions(2)
	case "CharacterRight":
		return PlayerActions(3)
	case "CharacterJump":
		return PlayerActions(4)
	}
	return nil
}

type PlayerActions uint

func (e PlayerActions) Type() string {
	return "Enum.PlayerActions"
}
func (e PlayerActions) String() string {
	return "Enum.PlayerActions." + e.Name()
}
func (e PlayerActions) Copy() rbx.Value {
	return e
}
func (e PlayerActions) Enum() rbx.Enum {
	return _PlayerActions{}
}
func (e PlayerActions) Value() int {
	return int(e)
}
func (e PlayerActions) Name() string {
	switch e {
	case 0:
		return "CharacterForward"
	case 1:
		return "CharacterBackward"
	case 2:
		return "CharacterLeft"
	case 3:
		return "CharacterRight"
	case 4:
		return "CharacterJump"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _PlayerChatType struct{}

func (e _PlayerChatType) Type() string {
	return "Enum"
}
func (e _PlayerChatType) String() string {
	return "Enum.PlayerChatType"
}
func (e _PlayerChatType) Copy() rbx.Value {
	return e
}
func (e _PlayerChatType) Name() string {
	return "PlayerChatType"
}
func (e _PlayerChatType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		PlayerChatType(0),
		PlayerChatType(1),
		PlayerChatType(2),
	}
}
func (e _PlayerChatType) Item(name string) rbx.EnumItem {
	switch name {
	case "All":
		return PlayerChatType(0)
	case "Team":
		return PlayerChatType(1)
	case "Whisper":
		return PlayerChatType(2)
	}
	return nil
}

type PlayerChatType uint

func (e PlayerChatType) Type() string {
	return "Enum.PlayerChatType"
}
func (e PlayerChatType) String() string {
	return "Enum.PlayerChatType." + e.Name()
}
func (e PlayerChatType) Copy() rbx.Value {
	return e
}
func (e PlayerChatType) Enum() rbx.Enum {
	return _PlayerChatType{}
}
func (e PlayerChatType) Value() int {
	return int(e)
}
func (e PlayerChatType) Name() string {
	switch e {
	case 0:
		return "All"
	case 1:
		return "Team"
	case 2:
		return "Whisper"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _PoseEasingDirection struct{}

func (e _PoseEasingDirection) Type() string {
	return "Enum"
}
func (e _PoseEasingDirection) String() string {
	return "Enum.PoseEasingDirection"
}
func (e _PoseEasingDirection) Copy() rbx.Value {
	return e
}
func (e _PoseEasingDirection) Name() string {
	return "PoseEasingDirection"
}
func (e _PoseEasingDirection) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		PoseEasingDirection(1),
		PoseEasingDirection(2),
		PoseEasingDirection(0),
	}
}
func (e _PoseEasingDirection) Item(name string) rbx.EnumItem {
	switch name {
	case "Out":
		return PoseEasingDirection(1)
	case "InOut":
		return PoseEasingDirection(2)
	case "In":
		return PoseEasingDirection(0)
	}
	return nil
}

type PoseEasingDirection uint

func (e PoseEasingDirection) Type() string {
	return "Enum.PoseEasingDirection"
}
func (e PoseEasingDirection) String() string {
	return "Enum.PoseEasingDirection." + e.Name()
}
func (e PoseEasingDirection) Copy() rbx.Value {
	return e
}
func (e PoseEasingDirection) Enum() rbx.Enum {
	return _PoseEasingDirection{}
}
func (e PoseEasingDirection) Value() int {
	return int(e)
}
func (e PoseEasingDirection) Name() string {
	switch e {
	case 1:
		return "Out"
	case 2:
		return "InOut"
	case 0:
		return "In"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _PoseEasingStyle struct{}

func (e _PoseEasingStyle) Type() string {
	return "Enum"
}
func (e _PoseEasingStyle) String() string {
	return "Enum.PoseEasingStyle"
}
func (e _PoseEasingStyle) Copy() rbx.Value {
	return e
}
func (e _PoseEasingStyle) Name() string {
	return "PoseEasingStyle"
}
func (e _PoseEasingStyle) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		PoseEasingStyle(0),
		PoseEasingStyle(1),
		PoseEasingStyle(2),
		PoseEasingStyle(3),
		PoseEasingStyle(4),
	}
}
func (e _PoseEasingStyle) Item(name string) rbx.EnumItem {
	switch name {
	case "Linear":
		return PoseEasingStyle(0)
	case "Constant":
		return PoseEasingStyle(1)
	case "Elastic":
		return PoseEasingStyle(2)
	case "Cubic":
		return PoseEasingStyle(3)
	case "Bounce":
		return PoseEasingStyle(4)
	}
	return nil
}

type PoseEasingStyle uint

func (e PoseEasingStyle) Type() string {
	return "Enum.PoseEasingStyle"
}
func (e PoseEasingStyle) String() string {
	return "Enum.PoseEasingStyle." + e.Name()
}
func (e PoseEasingStyle) Copy() rbx.Value {
	return e
}
func (e PoseEasingStyle) Enum() rbx.Enum {
	return _PoseEasingStyle{}
}
func (e PoseEasingStyle) Value() int {
	return int(e)
}
func (e PoseEasingStyle) Name() string {
	switch e {
	case 0:
		return "Linear"
	case 1:
		return "Constant"
	case 2:
		return "Elastic"
	case 3:
		return "Cubic"
	case 4:
		return "Bounce"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _PrivilegeType struct{}

func (e _PrivilegeType) Type() string {
	return "Enum"
}
func (e _PrivilegeType) String() string {
	return "Enum.PrivilegeType"
}
func (e _PrivilegeType) Copy() rbx.Value {
	return e
}
func (e _PrivilegeType) Name() string {
	return "PrivilegeType"
}
func (e _PrivilegeType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		PrivilegeType(255),
		PrivilegeType(240),
		PrivilegeType(128),
		PrivilegeType(10),
		PrivilegeType(0),
	}
}
func (e _PrivilegeType) Item(name string) rbx.EnumItem {
	switch name {
	case "Owner":
		return PrivilegeType(255)
	case "Admin":
		return PrivilegeType(240)
	case "Member":
		return PrivilegeType(128)
	case "Visitor":
		return PrivilegeType(10)
	case "Banned":
		return PrivilegeType(0)
	}
	return nil
}

type PrivilegeType uint

func (e PrivilegeType) Type() string {
	return "Enum.PrivilegeType"
}
func (e PrivilegeType) String() string {
	return "Enum.PrivilegeType." + e.Name()
}
func (e PrivilegeType) Copy() rbx.Value {
	return e
}
func (e PrivilegeType) Enum() rbx.Enum {
	return _PrivilegeType{}
}
func (e PrivilegeType) Value() int {
	return int(e)
}
func (e PrivilegeType) Name() string {
	switch e {
	case 255:
		return "Owner"
	case 240:
		return "Admin"
	case 128:
		return "Member"
	case 10:
		return "Visitor"
	case 0:
		return "Banned"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _ProductPurchaseDecision struct{}

func (e _ProductPurchaseDecision) Type() string {
	return "Enum"
}
func (e _ProductPurchaseDecision) String() string {
	return "Enum.ProductPurchaseDecision"
}
func (e _ProductPurchaseDecision) Copy() rbx.Value {
	return e
}
func (e _ProductPurchaseDecision) Name() string {
	return "ProductPurchaseDecision"
}
func (e _ProductPurchaseDecision) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		ProductPurchaseDecision(0),
		ProductPurchaseDecision(1),
	}
}
func (e _ProductPurchaseDecision) Item(name string) rbx.EnumItem {
	switch name {
	case "NotProcessedYet":
		return ProductPurchaseDecision(0)
	case "PurchaseGranted":
		return ProductPurchaseDecision(1)
	}
	return nil
}

type ProductPurchaseDecision uint

func (e ProductPurchaseDecision) Type() string {
	return "Enum.ProductPurchaseDecision"
}
func (e ProductPurchaseDecision) String() string {
	return "Enum.ProductPurchaseDecision." + e.Name()
}
func (e ProductPurchaseDecision) Copy() rbx.Value {
	return e
}
func (e ProductPurchaseDecision) Enum() rbx.Enum {
	return _ProductPurchaseDecision{}
}
func (e ProductPurchaseDecision) Value() int {
	return int(e)
}
func (e ProductPurchaseDecision) Name() string {
	switch e {
	case 0:
		return "NotProcessedYet"
	case 1:
		return "PurchaseGranted"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _QualityLevel struct{}

func (e _QualityLevel) Type() string {
	return "Enum"
}
func (e _QualityLevel) String() string {
	return "Enum.QualityLevel"
}
func (e _QualityLevel) Copy() rbx.Value {
	return e
}
func (e _QualityLevel) Name() string {
	return "QualityLevel"
}
func (e _QualityLevel) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		QualityLevel(0),
		QualityLevel(1),
		QualityLevel(2),
		QualityLevel(3),
		QualityLevel(4),
		QualityLevel(5),
		QualityLevel(6),
		QualityLevel(7),
		QualityLevel(8),
		QualityLevel(9),
		QualityLevel(10),
		QualityLevel(11),
		QualityLevel(12),
		QualityLevel(13),
		QualityLevel(14),
		QualityLevel(15),
		QualityLevel(16),
		QualityLevel(17),
		QualityLevel(18),
		QualityLevel(19),
		QualityLevel(20),
		QualityLevel(21),
	}
}
func (e _QualityLevel) Item(name string) rbx.EnumItem {
	switch name {
	case "Automatic":
		return QualityLevel(0)
	case "Level01":
		return QualityLevel(1)
	case "Level02":
		return QualityLevel(2)
	case "Level03":
		return QualityLevel(3)
	case "Level04":
		return QualityLevel(4)
	case "Level05":
		return QualityLevel(5)
	case "Level06":
		return QualityLevel(6)
	case "Level07":
		return QualityLevel(7)
	case "Level08":
		return QualityLevel(8)
	case "Level09":
		return QualityLevel(9)
	case "Level10":
		return QualityLevel(10)
	case "Level11":
		return QualityLevel(11)
	case "Level12":
		return QualityLevel(12)
	case "Level13":
		return QualityLevel(13)
	case "Level14":
		return QualityLevel(14)
	case "Level15":
		return QualityLevel(15)
	case "Level16":
		return QualityLevel(16)
	case "Level17":
		return QualityLevel(17)
	case "Level18":
		return QualityLevel(18)
	case "Level19":
		return QualityLevel(19)
	case "Level20":
		return QualityLevel(20)
	case "Level21":
		return QualityLevel(21)
	}
	return nil
}

type QualityLevel uint

func (e QualityLevel) Type() string {
	return "Enum.QualityLevel"
}
func (e QualityLevel) String() string {
	return "Enum.QualityLevel." + e.Name()
}
func (e QualityLevel) Copy() rbx.Value {
	return e
}
func (e QualityLevel) Enum() rbx.Enum {
	return _QualityLevel{}
}
func (e QualityLevel) Value() int {
	return int(e)
}
func (e QualityLevel) Name() string {
	switch e {
	case 0:
		return "Automatic"
	case 1:
		return "Level01"
	case 2:
		return "Level02"
	case 3:
		return "Level03"
	case 4:
		return "Level04"
	case 5:
		return "Level05"
	case 6:
		return "Level06"
	case 7:
		return "Level07"
	case 8:
		return "Level08"
	case 9:
		return "Level09"
	case 10:
		return "Level10"
	case 11:
		return "Level11"
	case 12:
		return "Level12"
	case 13:
		return "Level13"
	case 14:
		return "Level14"
	case 15:
		return "Level15"
	case 16:
		return "Level16"
	case 17:
		return "Level17"
	case 18:
		return "Level18"
	case 19:
		return "Level19"
	case 20:
		return "Level20"
	case 21:
		return "Level21"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _R15CollisionType struct{}

func (e _R15CollisionType) Type() string {
	return "Enum"
}
func (e _R15CollisionType) String() string {
	return "Enum.R15CollisionType"
}
func (e _R15CollisionType) Copy() rbx.Value {
	return e
}
func (e _R15CollisionType) Name() string {
	return "R15CollisionType"
}
func (e _R15CollisionType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		R15CollisionType(0),
		R15CollisionType(1),
	}
}
func (e _R15CollisionType) Item(name string) rbx.EnumItem {
	switch name {
	case "OuterBox":
		return R15CollisionType(0)
	case "InnerBox":
		return R15CollisionType(1)
	}
	return nil
}

type R15CollisionType uint

func (e R15CollisionType) Type() string {
	return "Enum.R15CollisionType"
}
func (e R15CollisionType) String() string {
	return "Enum.R15CollisionType." + e.Name()
}
func (e R15CollisionType) Copy() rbx.Value {
	return e
}
func (e R15CollisionType) Enum() rbx.Enum {
	return _R15CollisionType{}
}
func (e R15CollisionType) Value() int {
	return int(e)
}
func (e R15CollisionType) Name() string {
	switch e {
	case 0:
		return "OuterBox"
	case 1:
		return "InnerBox"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _RenderFidelity struct{}

func (e _RenderFidelity) Type() string {
	return "Enum"
}
func (e _RenderFidelity) String() string {
	return "Enum.RenderFidelity"
}
func (e _RenderFidelity) Copy() rbx.Value {
	return e
}
func (e _RenderFidelity) Name() string {
	return "RenderFidelity"
}
func (e _RenderFidelity) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		RenderFidelity(0),
		RenderFidelity(1),
	}
}
func (e _RenderFidelity) Item(name string) rbx.EnumItem {
	switch name {
	case "Automatic":
		return RenderFidelity(0)
	case "Precise":
		return RenderFidelity(1)
	}
	return nil
}

type RenderFidelity uint

func (e RenderFidelity) Type() string {
	return "Enum.RenderFidelity"
}
func (e RenderFidelity) String() string {
	return "Enum.RenderFidelity." + e.Name()
}
func (e RenderFidelity) Copy() rbx.Value {
	return e
}
func (e RenderFidelity) Enum() rbx.Enum {
	return _RenderFidelity{}
}
func (e RenderFidelity) Value() int {
	return int(e)
}
func (e RenderFidelity) Name() string {
	switch e {
	case 0:
		return "Automatic"
	case 1:
		return "Precise"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _RenderPriority struct{}

func (e _RenderPriority) Type() string {
	return "Enum"
}
func (e _RenderPriority) String() string {
	return "Enum.RenderPriority"
}
func (e _RenderPriority) Copy() rbx.Value {
	return e
}
func (e _RenderPriority) Name() string {
	return "RenderPriority"
}
func (e _RenderPriority) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		RenderPriority(0),
		RenderPriority(100),
		RenderPriority(200),
		RenderPriority(300),
		RenderPriority(2000),
	}
}
func (e _RenderPriority) Item(name string) rbx.EnumItem {
	switch name {
	case "First":
		return RenderPriority(0)
	case "Input":
		return RenderPriority(100)
	case "Camera":
		return RenderPriority(200)
	case "Character":
		return RenderPriority(300)
	case "Last":
		return RenderPriority(2000)
	}
	return nil
}

type RenderPriority uint

func (e RenderPriority) Type() string {
	return "Enum.RenderPriority"
}
func (e RenderPriority) String() string {
	return "Enum.RenderPriority." + e.Name()
}
func (e RenderPriority) Copy() rbx.Value {
	return e
}
func (e RenderPriority) Enum() rbx.Enum {
	return _RenderPriority{}
}
func (e RenderPriority) Value() int {
	return int(e)
}
func (e RenderPriority) Name() string {
	switch e {
	case 0:
		return "First"
	case 100:
		return "Input"
	case 200:
		return "Camera"
	case 300:
		return "Character"
	case 2000:
		return "Last"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _RenderingTestComparisonMethod struct{}

func (e _RenderingTestComparisonMethod) Type() string {
	return "Enum"
}
func (e _RenderingTestComparisonMethod) String() string {
	return "Enum.RenderingTestComparisonMethod"
}
func (e _RenderingTestComparisonMethod) Copy() rbx.Value {
	return e
}
func (e _RenderingTestComparisonMethod) Name() string {
	return "RenderingTestComparisonMethod"
}
func (e _RenderingTestComparisonMethod) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		RenderingTestComparisonMethod(0),
		RenderingTestComparisonMethod(1),
	}
}
func (e _RenderingTestComparisonMethod) Item(name string) rbx.EnumItem {
	switch name {
	case "psnr":
		return RenderingTestComparisonMethod(0)
	case "diff":
		return RenderingTestComparisonMethod(1)
	}
	return nil
}

type RenderingTestComparisonMethod uint

func (e RenderingTestComparisonMethod) Type() string {
	return "Enum.RenderingTestComparisonMethod"
}
func (e RenderingTestComparisonMethod) String() string {
	return "Enum.RenderingTestComparisonMethod." + e.Name()
}
func (e RenderingTestComparisonMethod) Copy() rbx.Value {
	return e
}
func (e RenderingTestComparisonMethod) Enum() rbx.Enum {
	return _RenderingTestComparisonMethod{}
}
func (e RenderingTestComparisonMethod) Value() int {
	return int(e)
}
func (e RenderingTestComparisonMethod) Name() string {
	switch e {
	case 0:
		return "psnr"
	case 1:
		return "diff"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _ReturnKeyType struct{}

func (e _ReturnKeyType) Type() string {
	return "Enum"
}
func (e _ReturnKeyType) String() string {
	return "Enum.ReturnKeyType"
}
func (e _ReturnKeyType) Copy() rbx.Value {
	return e
}
func (e _ReturnKeyType) Name() string {
	return "ReturnKeyType"
}
func (e _ReturnKeyType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		ReturnKeyType(0),
		ReturnKeyType(1),
		ReturnKeyType(2),
		ReturnKeyType(3),
		ReturnKeyType(4),
		ReturnKeyType(5),
	}
}
func (e _ReturnKeyType) Item(name string) rbx.EnumItem {
	switch name {
	case "Default":
		return ReturnKeyType(0)
	case "Done":
		return ReturnKeyType(1)
	case "Go":
		return ReturnKeyType(2)
	case "Next":
		return ReturnKeyType(3)
	case "Search":
		return ReturnKeyType(4)
	case "Send":
		return ReturnKeyType(5)
	}
	return nil
}

type ReturnKeyType uint

func (e ReturnKeyType) Type() string {
	return "Enum.ReturnKeyType"
}
func (e ReturnKeyType) String() string {
	return "Enum.ReturnKeyType." + e.Name()
}
func (e ReturnKeyType) Copy() rbx.Value {
	return e
}
func (e ReturnKeyType) Enum() rbx.Enum {
	return _ReturnKeyType{}
}
func (e ReturnKeyType) Value() int {
	return int(e)
}
func (e ReturnKeyType) Name() string {
	switch e {
	case 0:
		return "Default"
	case 1:
		return "Done"
	case 2:
		return "Go"
	case 3:
		return "Next"
	case 4:
		return "Search"
	case 5:
		return "Send"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _ReverbType struct{}

func (e _ReverbType) Type() string {
	return "Enum"
}
func (e _ReverbType) String() string {
	return "Enum.ReverbType"
}
func (e _ReverbType) Copy() rbx.Value {
	return e
}
func (e _ReverbType) Name() string {
	return "ReverbType"
}
func (e _ReverbType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		ReverbType(0),
		ReverbType(1),
		ReverbType(2),
		ReverbType(3),
		ReverbType(4),
		ReverbType(5),
		ReverbType(6),
		ReverbType(7),
		ReverbType(8),
		ReverbType(9),
		ReverbType(10),
		ReverbType(11),
		ReverbType(12),
		ReverbType(13),
		ReverbType(14),
		ReverbType(15),
		ReverbType(16),
		ReverbType(17),
		ReverbType(18),
		ReverbType(19),
		ReverbType(20),
		ReverbType(21),
		ReverbType(22),
		ReverbType(23),
	}
}
func (e _ReverbType) Item(name string) rbx.EnumItem {
	switch name {
	case "NoReverb":
		return ReverbType(0)
	case "GenericReverb":
		return ReverbType(1)
	case "PaddedCell":
		return ReverbType(2)
	case "Room":
		return ReverbType(3)
	case "Bathroom":
		return ReverbType(4)
	case "LivingRoom":
		return ReverbType(5)
	case "StoneRoom":
		return ReverbType(6)
	case "Auditorium":
		return ReverbType(7)
	case "ConcertHall":
		return ReverbType(8)
	case "Cave":
		return ReverbType(9)
	case "Arena":
		return ReverbType(10)
	case "Hangar":
		return ReverbType(11)
	case "CarpettedHallway":
		return ReverbType(12)
	case "Hallway":
		return ReverbType(13)
	case "StoneCorridor":
		return ReverbType(14)
	case "Alley":
		return ReverbType(15)
	case "Forest":
		return ReverbType(16)
	case "City":
		return ReverbType(17)
	case "Mountains":
		return ReverbType(18)
	case "Quarry":
		return ReverbType(19)
	case "Plain":
		return ReverbType(20)
	case "ParkingLot":
		return ReverbType(21)
	case "SewerPipe":
		return ReverbType(22)
	case "UnderWater":
		return ReverbType(23)
	}
	return nil
}

type ReverbType uint

func (e ReverbType) Type() string {
	return "Enum.ReverbType"
}
func (e ReverbType) String() string {
	return "Enum.ReverbType." + e.Name()
}
func (e ReverbType) Copy() rbx.Value {
	return e
}
func (e ReverbType) Enum() rbx.Enum {
	return _ReverbType{}
}
func (e ReverbType) Value() int {
	return int(e)
}
func (e ReverbType) Name() string {
	switch e {
	case 0:
		return "NoReverb"
	case 1:
		return "GenericReverb"
	case 2:
		return "PaddedCell"
	case 3:
		return "Room"
	case 4:
		return "Bathroom"
	case 5:
		return "LivingRoom"
	case 6:
		return "StoneRoom"
	case 7:
		return "Auditorium"
	case 8:
		return "ConcertHall"
	case 9:
		return "Cave"
	case 10:
		return "Arena"
	case 11:
		return "Hangar"
	case 12:
		return "CarpettedHallway"
	case 13:
		return "Hallway"
	case 14:
		return "StoneCorridor"
	case 15:
		return "Alley"
	case 16:
		return "Forest"
	case 17:
		return "City"
	case 18:
		return "Mountains"
	case 19:
		return "Quarry"
	case 20:
		return "Plain"
	case 21:
		return "ParkingLot"
	case 22:
		return "SewerPipe"
	case 23:
		return "UnderWater"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _RibbonTool struct{}

func (e _RibbonTool) Type() string {
	return "Enum"
}
func (e _RibbonTool) String() string {
	return "Enum.RibbonTool"
}
func (e _RibbonTool) Copy() rbx.Value {
	return e
}
func (e _RibbonTool) Name() string {
	return "RibbonTool"
}
func (e _RibbonTool) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		RibbonTool(0),
		RibbonTool(1),
		RibbonTool(2),
		RibbonTool(3),
		RibbonTool(4),
		RibbonTool(5),
		RibbonTool(6),
		RibbonTool(7),
		RibbonTool(8),
		RibbonTool(9),
	}
}
func (e _RibbonTool) Item(name string) rbx.EnumItem {
	switch name {
	case "Select":
		return RibbonTool(0)
	case "Scale":
		return RibbonTool(1)
	case "Rotate":
		return RibbonTool(2)
	case "Move":
		return RibbonTool(3)
	case "Transform":
		return RibbonTool(4)
	case "ColorPicker":
		return RibbonTool(5)
	case "MaterialPicker":
		return RibbonTool(6)
	case "Group":
		return RibbonTool(7)
	case "Ungroup":
		return RibbonTool(8)
	case "None":
		return RibbonTool(9)
	}
	return nil
}

type RibbonTool uint

func (e RibbonTool) Type() string {
	return "Enum.RibbonTool"
}
func (e RibbonTool) String() string {
	return "Enum.RibbonTool." + e.Name()
}
func (e RibbonTool) Copy() rbx.Value {
	return e
}
func (e RibbonTool) Enum() rbx.Enum {
	return _RibbonTool{}
}
func (e RibbonTool) Value() int {
	return int(e)
}
func (e RibbonTool) Name() string {
	switch e {
	case 0:
		return "Select"
	case 1:
		return "Scale"
	case 2:
		return "Rotate"
	case 3:
		return "Move"
	case 4:
		return "Transform"
	case 5:
		return "ColorPicker"
	case 6:
		return "MaterialPicker"
	case 7:
		return "Group"
	case 8:
		return "Ungroup"
	case 9:
		return "None"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _RollOffMode struct{}

func (e _RollOffMode) Type() string {
	return "Enum"
}
func (e _RollOffMode) String() string {
	return "Enum.RollOffMode"
}
func (e _RollOffMode) Copy() rbx.Value {
	return e
}
func (e _RollOffMode) Name() string {
	return "RollOffMode"
}
func (e _RollOffMode) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		RollOffMode(0),
		RollOffMode(1),
		RollOffMode(3),
		RollOffMode(2),
	}
}
func (e _RollOffMode) Item(name string) rbx.EnumItem {
	switch name {
	case "Inverse":
		return RollOffMode(0)
	case "Linear":
		return RollOffMode(1)
	case "InverseTapered":
		return RollOffMode(3)
	case "LinearSquare":
		return RollOffMode(2)
	}
	return nil
}

type RollOffMode uint

func (e RollOffMode) Type() string {
	return "Enum.RollOffMode"
}
func (e RollOffMode) String() string {
	return "Enum.RollOffMode." + e.Name()
}
func (e RollOffMode) Copy() rbx.Value {
	return e
}
func (e RollOffMode) Enum() rbx.Enum {
	return _RollOffMode{}
}
func (e RollOffMode) Value() int {
	return int(e)
}
func (e RollOffMode) Name() string {
	switch e {
	case 0:
		return "Inverse"
	case 1:
		return "Linear"
	case 3:
		return "InverseTapered"
	case 2:
		return "LinearSquare"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _RotationType struct{}

func (e _RotationType) Type() string {
	return "Enum"
}
func (e _RotationType) String() string {
	return "Enum.RotationType"
}
func (e _RotationType) Copy() rbx.Value {
	return e
}
func (e _RotationType) Name() string {
	return "RotationType"
}
func (e _RotationType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		RotationType(0),
		RotationType(1),
	}
}
func (e _RotationType) Item(name string) rbx.EnumItem {
	switch name {
	case "MovementRelative":
		return RotationType(0)
	case "CameraRelative":
		return RotationType(1)
	}
	return nil
}

type RotationType uint

func (e RotationType) Type() string {
	return "Enum.RotationType"
}
func (e RotationType) String() string {
	return "Enum.RotationType." + e.Name()
}
func (e RotationType) Copy() rbx.Value {
	return e
}
func (e RotationType) Enum() rbx.Enum {
	return _RotationType{}
}
func (e RotationType) Value() int {
	return int(e)
}
func (e RotationType) Name() string {
	switch e {
	case 0:
		return "MovementRelative"
	case 1:
		return "CameraRelative"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _RuntimeUndoBehavior struct{}

func (e _RuntimeUndoBehavior) Type() string {
	return "Enum"
}
func (e _RuntimeUndoBehavior) String() string {
	return "Enum.RuntimeUndoBehavior"
}
func (e _RuntimeUndoBehavior) Copy() rbx.Value {
	return e
}
func (e _RuntimeUndoBehavior) Name() string {
	return "RuntimeUndoBehavior"
}
func (e _RuntimeUndoBehavior) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		RuntimeUndoBehavior(0),
		RuntimeUndoBehavior(1),
		RuntimeUndoBehavior(2),
	}
}
func (e _RuntimeUndoBehavior) Item(name string) rbx.EnumItem {
	switch name {
	case "Aggregate":
		return RuntimeUndoBehavior(0)
	case "Snapshot":
		return RuntimeUndoBehavior(1)
	case "Hybrid":
		return RuntimeUndoBehavior(2)
	}
	return nil
}

type RuntimeUndoBehavior uint

func (e RuntimeUndoBehavior) Type() string {
	return "Enum.RuntimeUndoBehavior"
}
func (e RuntimeUndoBehavior) String() string {
	return "Enum.RuntimeUndoBehavior." + e.Name()
}
func (e RuntimeUndoBehavior) Copy() rbx.Value {
	return e
}
func (e RuntimeUndoBehavior) Enum() rbx.Enum {
	return _RuntimeUndoBehavior{}
}
func (e RuntimeUndoBehavior) Value() int {
	return int(e)
}
func (e RuntimeUndoBehavior) Name() string {
	switch e {
	case 0:
		return "Aggregate"
	case 1:
		return "Snapshot"
	case 2:
		return "Hybrid"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _SaveFilter struct{}

func (e _SaveFilter) Type() string {
	return "Enum"
}
func (e _SaveFilter) String() string {
	return "Enum.SaveFilter"
}
func (e _SaveFilter) Copy() rbx.Value {
	return e
}
func (e _SaveFilter) Name() string {
	return "SaveFilter"
}
func (e _SaveFilter) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		SaveFilter(2),
		SaveFilter(0),
		SaveFilter(1),
	}
}
func (e _SaveFilter) Item(name string) rbx.EnumItem {
	switch name {
	case "SaveAll":
		return SaveFilter(2)
	case "SaveWorld":
		return SaveFilter(0)
	case "SaveGame":
		return SaveFilter(1)
	}
	return nil
}

type SaveFilter uint

func (e SaveFilter) Type() string {
	return "Enum.SaveFilter"
}
func (e SaveFilter) String() string {
	return "Enum.SaveFilter." + e.Name()
}
func (e SaveFilter) Copy() rbx.Value {
	return e
}
func (e SaveFilter) Enum() rbx.Enum {
	return _SaveFilter{}
}
func (e SaveFilter) Value() int {
	return int(e)
}
func (e SaveFilter) Name() string {
	switch e {
	case 2:
		return "SaveAll"
	case 0:
		return "SaveWorld"
	case 1:
		return "SaveGame"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _SavedQualitySetting struct{}

func (e _SavedQualitySetting) Type() string {
	return "Enum"
}
func (e _SavedQualitySetting) String() string {
	return "Enum.SavedQualitySetting"
}
func (e _SavedQualitySetting) Copy() rbx.Value {
	return e
}
func (e _SavedQualitySetting) Name() string {
	return "SavedQualitySetting"
}
func (e _SavedQualitySetting) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		SavedQualitySetting(0),
		SavedQualitySetting(1),
		SavedQualitySetting(2),
		SavedQualitySetting(3),
		SavedQualitySetting(4),
		SavedQualitySetting(5),
		SavedQualitySetting(6),
		SavedQualitySetting(7),
		SavedQualitySetting(8),
		SavedQualitySetting(9),
		SavedQualitySetting(10),
	}
}
func (e _SavedQualitySetting) Item(name string) rbx.EnumItem {
	switch name {
	case "Automatic":
		return SavedQualitySetting(0)
	case "QualityLevel1":
		return SavedQualitySetting(1)
	case "QualityLevel2":
		return SavedQualitySetting(2)
	case "QualityLevel3":
		return SavedQualitySetting(3)
	case "QualityLevel4":
		return SavedQualitySetting(4)
	case "QualityLevel5":
		return SavedQualitySetting(5)
	case "QualityLevel6":
		return SavedQualitySetting(6)
	case "QualityLevel7":
		return SavedQualitySetting(7)
	case "QualityLevel8":
		return SavedQualitySetting(8)
	case "QualityLevel9":
		return SavedQualitySetting(9)
	case "QualityLevel10":
		return SavedQualitySetting(10)
	}
	return nil
}

type SavedQualitySetting uint

func (e SavedQualitySetting) Type() string {
	return "Enum.SavedQualitySetting"
}
func (e SavedQualitySetting) String() string {
	return "Enum.SavedQualitySetting." + e.Name()
}
func (e SavedQualitySetting) Copy() rbx.Value {
	return e
}
func (e SavedQualitySetting) Enum() rbx.Enum {
	return _SavedQualitySetting{}
}
func (e SavedQualitySetting) Value() int {
	return int(e)
}
func (e SavedQualitySetting) Name() string {
	switch e {
	case 0:
		return "Automatic"
	case 1:
		return "QualityLevel1"
	case 2:
		return "QualityLevel2"
	case 3:
		return "QualityLevel3"
	case 4:
		return "QualityLevel4"
	case 5:
		return "QualityLevel5"
	case 6:
		return "QualityLevel6"
	case 7:
		return "QualityLevel7"
	case 8:
		return "QualityLevel8"
	case 9:
		return "QualityLevel9"
	case 10:
		return "QualityLevel10"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _ScaleType struct{}

func (e _ScaleType) Type() string {
	return "Enum"
}
func (e _ScaleType) String() string {
	return "Enum.ScaleType"
}
func (e _ScaleType) Copy() rbx.Value {
	return e
}
func (e _ScaleType) Name() string {
	return "ScaleType"
}
func (e _ScaleType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		ScaleType(0),
		ScaleType(1),
		ScaleType(2),
		ScaleType(3),
		ScaleType(4),
	}
}
func (e _ScaleType) Item(name string) rbx.EnumItem {
	switch name {
	case "Stretch":
		return ScaleType(0)
	case "Slice":
		return ScaleType(1)
	case "Tile":
		return ScaleType(2)
	case "Fit":
		return ScaleType(3)
	case "Crop":
		return ScaleType(4)
	}
	return nil
}

type ScaleType uint

func (e ScaleType) Type() string {
	return "Enum.ScaleType"
}
func (e ScaleType) String() string {
	return "Enum.ScaleType." + e.Name()
}
func (e ScaleType) Copy() rbx.Value {
	return e
}
func (e ScaleType) Enum() rbx.Enum {
	return _ScaleType{}
}
func (e ScaleType) Value() int {
	return int(e)
}
func (e ScaleType) Name() string {
	switch e {
	case 0:
		return "Stretch"
	case 1:
		return "Slice"
	case 2:
		return "Tile"
	case 3:
		return "Fit"
	case 4:
		return "Crop"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _ScreenOrientation struct{}

func (e _ScreenOrientation) Type() string {
	return "Enum"
}
func (e _ScreenOrientation) String() string {
	return "Enum.ScreenOrientation"
}
func (e _ScreenOrientation) Copy() rbx.Value {
	return e
}
func (e _ScreenOrientation) Name() string {
	return "ScreenOrientation"
}
func (e _ScreenOrientation) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		ScreenOrientation(0),
		ScreenOrientation(1),
		ScreenOrientation(2),
		ScreenOrientation(3),
		ScreenOrientation(4),
	}
}
func (e _ScreenOrientation) Item(name string) rbx.EnumItem {
	switch name {
	case "LandscapeLeft":
		return ScreenOrientation(0)
	case "LandscapeRight":
		return ScreenOrientation(1)
	case "LandscapeSensor":
		return ScreenOrientation(2)
	case "Portrait":
		return ScreenOrientation(3)
	case "Sensor":
		return ScreenOrientation(4)
	}
	return nil
}

type ScreenOrientation uint

func (e ScreenOrientation) Type() string {
	return "Enum.ScreenOrientation"
}
func (e ScreenOrientation) String() string {
	return "Enum.ScreenOrientation." + e.Name()
}
func (e ScreenOrientation) Copy() rbx.Value {
	return e
}
func (e ScreenOrientation) Enum() rbx.Enum {
	return _ScreenOrientation{}
}
func (e ScreenOrientation) Value() int {
	return int(e)
}
func (e ScreenOrientation) Name() string {
	switch e {
	case 0:
		return "LandscapeLeft"
	case 1:
		return "LandscapeRight"
	case 2:
		return "LandscapeSensor"
	case 3:
		return "Portrait"
	case 4:
		return "Sensor"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _ScrollBarInset struct{}

func (e _ScrollBarInset) Type() string {
	return "Enum"
}
func (e _ScrollBarInset) String() string {
	return "Enum.ScrollBarInset"
}
func (e _ScrollBarInset) Copy() rbx.Value {
	return e
}
func (e _ScrollBarInset) Name() string {
	return "ScrollBarInset"
}
func (e _ScrollBarInset) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		ScrollBarInset(0),
		ScrollBarInset(1),
		ScrollBarInset(2),
	}
}
func (e _ScrollBarInset) Item(name string) rbx.EnumItem {
	switch name {
	case "None":
		return ScrollBarInset(0)
	case "ScrollBar":
		return ScrollBarInset(1)
	case "Always":
		return ScrollBarInset(2)
	}
	return nil
}

type ScrollBarInset uint

func (e ScrollBarInset) Type() string {
	return "Enum.ScrollBarInset"
}
func (e ScrollBarInset) String() string {
	return "Enum.ScrollBarInset." + e.Name()
}
func (e ScrollBarInset) Copy() rbx.Value {
	return e
}
func (e ScrollBarInset) Enum() rbx.Enum {
	return _ScrollBarInset{}
}
func (e ScrollBarInset) Value() int {
	return int(e)
}
func (e ScrollBarInset) Name() string {
	switch e {
	case 0:
		return "None"
	case 1:
		return "ScrollBar"
	case 2:
		return "Always"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _ScrollingDirection struct{}

func (e _ScrollingDirection) Type() string {
	return "Enum"
}
func (e _ScrollingDirection) String() string {
	return "Enum.ScrollingDirection"
}
func (e _ScrollingDirection) Copy() rbx.Value {
	return e
}
func (e _ScrollingDirection) Name() string {
	return "ScrollingDirection"
}
func (e _ScrollingDirection) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		ScrollingDirection(1),
		ScrollingDirection(2),
		ScrollingDirection(4),
	}
}
func (e _ScrollingDirection) Item(name string) rbx.EnumItem {
	switch name {
	case "X":
		return ScrollingDirection(1)
	case "Y":
		return ScrollingDirection(2)
	case "XY":
		return ScrollingDirection(4)
	}
	return nil
}

type ScrollingDirection uint

func (e ScrollingDirection) Type() string {
	return "Enum.ScrollingDirection"
}
func (e ScrollingDirection) String() string {
	return "Enum.ScrollingDirection." + e.Name()
}
func (e ScrollingDirection) Copy() rbx.Value {
	return e
}
func (e ScrollingDirection) Enum() rbx.Enum {
	return _ScrollingDirection{}
}
func (e ScrollingDirection) Value() int {
	return int(e)
}
func (e ScrollingDirection) Name() string {
	switch e {
	case 1:
		return "X"
	case 2:
		return "Y"
	case 4:
		return "XY"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _ServerAudioBehavior struct{}

func (e _ServerAudioBehavior) Type() string {
	return "Enum"
}
func (e _ServerAudioBehavior) String() string {
	return "Enum.ServerAudioBehavior"
}
func (e _ServerAudioBehavior) Copy() rbx.Value {
	return e
}
func (e _ServerAudioBehavior) Name() string {
	return "ServerAudioBehavior"
}
func (e _ServerAudioBehavior) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		ServerAudioBehavior(0),
		ServerAudioBehavior(1),
		ServerAudioBehavior(2),
	}
}
func (e _ServerAudioBehavior) Item(name string) rbx.EnumItem {
	switch name {
	case "Enabled":
		return ServerAudioBehavior(0)
	case "Muted":
		return ServerAudioBehavior(1)
	case "OnlineGame":
		return ServerAudioBehavior(2)
	}
	return nil
}

type ServerAudioBehavior uint

func (e ServerAudioBehavior) Type() string {
	return "Enum.ServerAudioBehavior"
}
func (e ServerAudioBehavior) String() string {
	return "Enum.ServerAudioBehavior." + e.Name()
}
func (e ServerAudioBehavior) Copy() rbx.Value {
	return e
}
func (e ServerAudioBehavior) Enum() rbx.Enum {
	return _ServerAudioBehavior{}
}
func (e ServerAudioBehavior) Value() int {
	return int(e)
}
func (e ServerAudioBehavior) Name() string {
	switch e {
	case 0:
		return "Enabled"
	case 1:
		return "Muted"
	case 2:
		return "OnlineGame"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _SizeConstraint struct{}

func (e _SizeConstraint) Type() string {
	return "Enum"
}
func (e _SizeConstraint) String() string {
	return "Enum.SizeConstraint"
}
func (e _SizeConstraint) Copy() rbx.Value {
	return e
}
func (e _SizeConstraint) Name() string {
	return "SizeConstraint"
}
func (e _SizeConstraint) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		SizeConstraint(0),
		SizeConstraint(1),
		SizeConstraint(2),
	}
}
func (e _SizeConstraint) Item(name string) rbx.EnumItem {
	switch name {
	case "RelativeXY":
		return SizeConstraint(0)
	case "RelativeXX":
		return SizeConstraint(1)
	case "RelativeYY":
		return SizeConstraint(2)
	}
	return nil
}

type SizeConstraint uint

func (e SizeConstraint) Type() string {
	return "Enum.SizeConstraint"
}
func (e SizeConstraint) String() string {
	return "Enum.SizeConstraint." + e.Name()
}
func (e SizeConstraint) Copy() rbx.Value {
	return e
}
func (e SizeConstraint) Enum() rbx.Enum {
	return _SizeConstraint{}
}
func (e SizeConstraint) Value() int {
	return int(e)
}
func (e SizeConstraint) Name() string {
	switch e {
	case 0:
		return "RelativeXY"
	case 1:
		return "RelativeXX"
	case 2:
		return "RelativeYY"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _SortOrder struct{}

func (e _SortOrder) Type() string {
	return "Enum"
}
func (e _SortOrder) String() string {
	return "Enum.SortOrder"
}
func (e _SortOrder) Copy() rbx.Value {
	return e
}
func (e _SortOrder) Name() string {
	return "SortOrder"
}
func (e _SortOrder) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		SortOrder(2),
		SortOrder(0),
		SortOrder(1),
	}
}
func (e _SortOrder) Item(name string) rbx.EnumItem {
	switch name {
	case "LayoutOrder":
		return SortOrder(2)
	case "Name":
		return SortOrder(0)
	case "Custom":
		return SortOrder(1)
	}
	return nil
}

type SortOrder uint

func (e SortOrder) Type() string {
	return "Enum.SortOrder"
}
func (e SortOrder) String() string {
	return "Enum.SortOrder." + e.Name()
}
func (e SortOrder) Copy() rbx.Value {
	return e
}
func (e SortOrder) Enum() rbx.Enum {
	return _SortOrder{}
}
func (e SortOrder) Value() int {
	return int(e)
}
func (e SortOrder) Name() string {
	switch e {
	case 2:
		return "LayoutOrder"
	case 0:
		return "Name"
	case 1:
		return "Custom"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _SoundType struct{}

func (e _SoundType) Type() string {
	return "Enum"
}
func (e _SoundType) String() string {
	return "Enum.SoundType"
}
func (e _SoundType) Copy() rbx.Value {
	return e
}
func (e _SoundType) Name() string {
	return "SoundType"
}
func (e _SoundType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		SoundType(0),
		SoundType(1),
		SoundType(2),
		SoundType(3),
		SoundType(4),
		SoundType(5),
		SoundType(6),
		SoundType(7),
		SoundType(8),
		SoundType(9),
		SoundType(10),
		SoundType(11),
		SoundType(12),
		SoundType(13),
		SoundType(14),
	}
}
func (e _SoundType) Item(name string) rbx.EnumItem {
	switch name {
	case "NoSound":
		return SoundType(0)
	case "Boing":
		return SoundType(1)
	case "Bomb":
		return SoundType(2)
	case "Break":
		return SoundType(3)
	case "Click":
		return SoundType(4)
	case "Clock":
		return SoundType(5)
	case "Slingshot":
		return SoundType(6)
	case "Page":
		return SoundType(7)
	case "Ping":
		return SoundType(8)
	case "Snap":
		return SoundType(9)
	case "Splat":
		return SoundType(10)
	case "Step":
		return SoundType(11)
	case "StepOn":
		return SoundType(12)
	case "Swoosh":
		return SoundType(13)
	case "Victory":
		return SoundType(14)
	}
	return nil
}

type SoundType uint

func (e SoundType) Type() string {
	return "Enum.SoundType"
}
func (e SoundType) String() string {
	return "Enum.SoundType." + e.Name()
}
func (e SoundType) Copy() rbx.Value {
	return e
}
func (e SoundType) Enum() rbx.Enum {
	return _SoundType{}
}
func (e SoundType) Value() int {
	return int(e)
}
func (e SoundType) Name() string {
	switch e {
	case 0:
		return "NoSound"
	case 1:
		return "Boing"
	case 2:
		return "Bomb"
	case 3:
		return "Break"
	case 4:
		return "Click"
	case 5:
		return "Clock"
	case 6:
		return "Slingshot"
	case 7:
		return "Page"
	case 8:
		return "Ping"
	case 9:
		return "Snap"
	case 10:
		return "Splat"
	case 11:
		return "Step"
	case 12:
		return "StepOn"
	case 13:
		return "Swoosh"
	case 14:
		return "Victory"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _SpecialKey struct{}

func (e _SpecialKey) Type() string {
	return "Enum"
}
func (e _SpecialKey) String() string {
	return "Enum.SpecialKey"
}
func (e _SpecialKey) Copy() rbx.Value {
	return e
}
func (e _SpecialKey) Name() string {
	return "SpecialKey"
}
func (e _SpecialKey) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		SpecialKey(0),
		SpecialKey(1),
		SpecialKey(2),
		SpecialKey(3),
		SpecialKey(4),
		SpecialKey(5),
	}
}
func (e _SpecialKey) Item(name string) rbx.EnumItem {
	switch name {
	case "Insert":
		return SpecialKey(0)
	case "Home":
		return SpecialKey(1)
	case "End":
		return SpecialKey(2)
	case "PageUp":
		return SpecialKey(3)
	case "PageDown":
		return SpecialKey(4)
	case "ChatHotkey":
		return SpecialKey(5)
	}
	return nil
}

type SpecialKey uint

func (e SpecialKey) Type() string {
	return "Enum.SpecialKey"
}
func (e SpecialKey) String() string {
	return "Enum.SpecialKey." + e.Name()
}
func (e SpecialKey) Copy() rbx.Value {
	return e
}
func (e SpecialKey) Enum() rbx.Enum {
	return _SpecialKey{}
}
func (e SpecialKey) Value() int {
	return int(e)
}
func (e SpecialKey) Name() string {
	switch e {
	case 0:
		return "Insert"
	case 1:
		return "Home"
	case 2:
		return "End"
	case 3:
		return "PageUp"
	case 4:
		return "PageDown"
	case 5:
		return "ChatHotkey"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _StartCorner struct{}

func (e _StartCorner) Type() string {
	return "Enum"
}
func (e _StartCorner) String() string {
	return "Enum.StartCorner"
}
func (e _StartCorner) Copy() rbx.Value {
	return e
}
func (e _StartCorner) Name() string {
	return "StartCorner"
}
func (e _StartCorner) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		StartCorner(0),
		StartCorner(1),
		StartCorner(2),
		StartCorner(3),
	}
}
func (e _StartCorner) Item(name string) rbx.EnumItem {
	switch name {
	case "TopLeft":
		return StartCorner(0)
	case "TopRight":
		return StartCorner(1)
	case "BottomLeft":
		return StartCorner(2)
	case "BottomRight":
		return StartCorner(3)
	}
	return nil
}

type StartCorner uint

func (e StartCorner) Type() string {
	return "Enum.StartCorner"
}
func (e StartCorner) String() string {
	return "Enum.StartCorner." + e.Name()
}
func (e StartCorner) Copy() rbx.Value {
	return e
}
func (e StartCorner) Enum() rbx.Enum {
	return _StartCorner{}
}
func (e StartCorner) Value() int {
	return int(e)
}
func (e StartCorner) Name() string {
	switch e {
	case 0:
		return "TopLeft"
	case 1:
		return "TopRight"
	case 2:
		return "BottomLeft"
	case 3:
		return "BottomRight"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _Status struct{}

func (e _Status) Type() string {
	return "Enum"
}
func (e _Status) String() string {
	return "Enum.Status"
}
func (e _Status) Copy() rbx.Value {
	return e
}
func (e _Status) Name() string {
	return "Status"
}
func (e _Status) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		Status(0),
		Status(1),
	}
}
func (e _Status) Item(name string) rbx.EnumItem {
	switch name {
	case "Poison":
		return Status(0)
	case "Confusion":
		return Status(1)
	}
	return nil
}

type Status uint

func (e Status) Type() string {
	return "Enum.Status"
}
func (e Status) String() string {
	return "Enum.Status." + e.Name()
}
func (e Status) Copy() rbx.Value {
	return e
}
func (e Status) Enum() rbx.Enum {
	return _Status{}
}
func (e Status) Value() int {
	return int(e)
}
func (e Status) Name() string {
	switch e {
	case 0:
		return "Poison"
	case 1:
		return "Confusion"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _StreamingPauseMode struct{}

func (e _StreamingPauseMode) Type() string {
	return "Enum"
}
func (e _StreamingPauseMode) String() string {
	return "Enum.StreamingPauseMode"
}
func (e _StreamingPauseMode) Copy() rbx.Value {
	return e
}
func (e _StreamingPauseMode) Name() string {
	return "StreamingPauseMode"
}
func (e _StreamingPauseMode) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		StreamingPauseMode(0),
		StreamingPauseMode(1),
		StreamingPauseMode(2),
	}
}
func (e _StreamingPauseMode) Item(name string) rbx.EnumItem {
	switch name {
	case "Default":
		return StreamingPauseMode(0)
	case "Disabled":
		return StreamingPauseMode(1)
	case "ClientPhysicsPause":
		return StreamingPauseMode(2)
	}
	return nil
}

type StreamingPauseMode uint

func (e StreamingPauseMode) Type() string {
	return "Enum.StreamingPauseMode"
}
func (e StreamingPauseMode) String() string {
	return "Enum.StreamingPauseMode." + e.Name()
}
func (e StreamingPauseMode) Copy() rbx.Value {
	return e
}
func (e StreamingPauseMode) Enum() rbx.Enum {
	return _StreamingPauseMode{}
}
func (e StreamingPauseMode) Value() int {
	return int(e)
}
func (e StreamingPauseMode) Name() string {
	switch e {
	case 0:
		return "Default"
	case 1:
		return "Disabled"
	case 2:
		return "ClientPhysicsPause"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _StudioDataModelType struct{}

func (e _StudioDataModelType) Type() string {
	return "Enum"
}
func (e _StudioDataModelType) String() string {
	return "Enum.StudioDataModelType"
}
func (e _StudioDataModelType) Copy() rbx.Value {
	return e
}
func (e _StudioDataModelType) Name() string {
	return "StudioDataModelType"
}
func (e _StudioDataModelType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		StudioDataModelType(0),
		StudioDataModelType(2),
		StudioDataModelType(3),
		StudioDataModelType(4),
		StudioDataModelType(5),
		StudioDataModelType(6),
	}
}
func (e _StudioDataModelType) Item(name string) rbx.EnumItem {
	switch name {
	case "Edit":
		return StudioDataModelType(0)
	case "PlayClient":
		return StudioDataModelType(2)
	case "PlayServer":
		return StudioDataModelType(3)
	case "RobloxPlugin":
		return StudioDataModelType(4)
	case "UserPlugin":
		return StudioDataModelType(5)
	case "None":
		return StudioDataModelType(6)
	}
	return nil
}

type StudioDataModelType uint

func (e StudioDataModelType) Type() string {
	return "Enum.StudioDataModelType"
}
func (e StudioDataModelType) String() string {
	return "Enum.StudioDataModelType." + e.Name()
}
func (e StudioDataModelType) Copy() rbx.Value {
	return e
}
func (e StudioDataModelType) Enum() rbx.Enum {
	return _StudioDataModelType{}
}
func (e StudioDataModelType) Value() int {
	return int(e)
}
func (e StudioDataModelType) Name() string {
	switch e {
	case 0:
		return "Edit"
	case 2:
		return "PlayClient"
	case 3:
		return "PlayServer"
	case 4:
		return "RobloxPlugin"
	case 5:
		return "UserPlugin"
	case 6:
		return "None"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _StudioStyleGuideColor struct{}

func (e _StudioStyleGuideColor) Type() string {
	return "Enum"
}
func (e _StudioStyleGuideColor) String() string {
	return "Enum.StudioStyleGuideColor"
}
func (e _StudioStyleGuideColor) Copy() rbx.Value {
	return e
}
func (e _StudioStyleGuideColor) Name() string {
	return "StudioStyleGuideColor"
}
func (e _StudioStyleGuideColor) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		StudioStyleGuideColor(0),
		StudioStyleGuideColor(1),
		StudioStyleGuideColor(2),
		StudioStyleGuideColor(3),
		StudioStyleGuideColor(4),
		StudioStyleGuideColor(5),
		StudioStyleGuideColor(6),
		StudioStyleGuideColor(7),
		StudioStyleGuideColor(8),
		StudioStyleGuideColor(9),
		StudioStyleGuideColor(10),
		StudioStyleGuideColor(11),
		StudioStyleGuideColor(12),
		StudioStyleGuideColor(13),
		StudioStyleGuideColor(14),
		StudioStyleGuideColor(15),
		StudioStyleGuideColor(16),
		StudioStyleGuideColor(17),
		StudioStyleGuideColor(18),
		StudioStyleGuideColor(19),
		StudioStyleGuideColor(20),
		StudioStyleGuideColor(21),
		StudioStyleGuideColor(22),
		StudioStyleGuideColor(23),
		StudioStyleGuideColor(24),
		StudioStyleGuideColor(25),
		StudioStyleGuideColor(26),
		StudioStyleGuideColor(27),
		StudioStyleGuideColor(28),
		StudioStyleGuideColor(29),
		StudioStyleGuideColor(30),
		StudioStyleGuideColor(31),
		StudioStyleGuideColor(32),
		StudioStyleGuideColor(33),
		StudioStyleGuideColor(34),
		StudioStyleGuideColor(35),
		StudioStyleGuideColor(36),
		StudioStyleGuideColor(37),
		StudioStyleGuideColor(38),
		StudioStyleGuideColor(39),
		StudioStyleGuideColor(40),
		StudioStyleGuideColor(41),
		StudioStyleGuideColor(42),
		StudioStyleGuideColor(43),
		StudioStyleGuideColor(44),
		StudioStyleGuideColor(45),
		StudioStyleGuideColor(46),
		StudioStyleGuideColor(47),
		StudioStyleGuideColor(48),
		StudioStyleGuideColor(49),
		StudioStyleGuideColor(50),
		StudioStyleGuideColor(51),
		StudioStyleGuideColor(52),
		StudioStyleGuideColor(53),
		StudioStyleGuideColor(54),
		StudioStyleGuideColor(55),
		StudioStyleGuideColor(56),
		StudioStyleGuideColor(57),
		StudioStyleGuideColor(58),
		StudioStyleGuideColor(59),
		StudioStyleGuideColor(60),
		StudioStyleGuideColor(61),
		StudioStyleGuideColor(62),
		StudioStyleGuideColor(63),
		StudioStyleGuideColor(64),
		StudioStyleGuideColor(65),
		StudioStyleGuideColor(66),
		StudioStyleGuideColor(67),
		StudioStyleGuideColor(68),
		StudioStyleGuideColor(69),
		StudioStyleGuideColor(70),
		StudioStyleGuideColor(71),
		StudioStyleGuideColor(72),
		StudioStyleGuideColor(73),
		StudioStyleGuideColor(74),
		StudioStyleGuideColor(75),
		StudioStyleGuideColor(76),
		StudioStyleGuideColor(77),
		StudioStyleGuideColor(78),
		StudioStyleGuideColor(79),
		StudioStyleGuideColor(80),
		StudioStyleGuideColor(81),
		StudioStyleGuideColor(82),
		StudioStyleGuideColor(83),
		StudioStyleGuideColor(84),
		StudioStyleGuideColor(85),
		StudioStyleGuideColor(86),
		StudioStyleGuideColor(87),
		StudioStyleGuideColor(88),
		StudioStyleGuideColor(89),
		StudioStyleGuideColor(90),
		StudioStyleGuideColor(91),
	}
}
func (e _StudioStyleGuideColor) Item(name string) rbx.EnumItem {
	switch name {
	case "MainBackground":
		return StudioStyleGuideColor(0)
	case "Titlebar":
		return StudioStyleGuideColor(1)
	case "Dropdown":
		return StudioStyleGuideColor(2)
	case "Tooltip":
		return StudioStyleGuideColor(3)
	case "Notification":
		return StudioStyleGuideColor(4)
	case "ScrollBar":
		return StudioStyleGuideColor(5)
	case "ScrollBarBackground":
		return StudioStyleGuideColor(6)
	case "TabBar":
		return StudioStyleGuideColor(7)
	case "Tab":
		return StudioStyleGuideColor(8)
	case "RibbonTab":
		return StudioStyleGuideColor(9)
	case "RibbonTabTopBar":
		return StudioStyleGuideColor(10)
	case "Button":
		return StudioStyleGuideColor(11)
	case "MainButton":
		return StudioStyleGuideColor(12)
	case "RibbonButton":
		return StudioStyleGuideColor(13)
	case "ViewPortBackground":
		return StudioStyleGuideColor(14)
	case "InputFieldBackground":
		return StudioStyleGuideColor(15)
	case "Item":
		return StudioStyleGuideColor(16)
	case "TableItem":
		return StudioStyleGuideColor(17)
	case "CategoryItem":
		return StudioStyleGuideColor(18)
	case "GameSettingsTableItem":
		return StudioStyleGuideColor(19)
	case "GameSettingsTooltip":
		return StudioStyleGuideColor(20)
	case "EmulatorBar":
		return StudioStyleGuideColor(21)
	case "EmulatorDropDown":
		return StudioStyleGuideColor(22)
	case "ColorPickerFrame":
		return StudioStyleGuideColor(23)
	case "CurrentMarker":
		return StudioStyleGuideColor(24)
	case "Border":
		return StudioStyleGuideColor(25)
	case "Shadow":
		return StudioStyleGuideColor(26)
	case "Light":
		return StudioStyleGuideColor(27)
	case "Dark":
		return StudioStyleGuideColor(28)
	case "Mid":
		return StudioStyleGuideColor(29)
	case "MainText":
		return StudioStyleGuideColor(30)
	case "SubText":
		return StudioStyleGuideColor(31)
	case "TitlebarText":
		return StudioStyleGuideColor(32)
	case "BrightText":
		return StudioStyleGuideColor(33)
	case "DimmedText":
		return StudioStyleGuideColor(34)
	case "LinkText":
		return StudioStyleGuideColor(35)
	case "WarningText":
		return StudioStyleGuideColor(36)
	case "ErrorText":
		return StudioStyleGuideColor(37)
	case "InfoText":
		return StudioStyleGuideColor(38)
	case "SensitiveText":
		return StudioStyleGuideColor(39)
	case "ScriptSideWidget":
		return StudioStyleGuideColor(40)
	case "ScriptBackground":
		return StudioStyleGuideColor(41)
	case "ScriptText":
		return StudioStyleGuideColor(42)
	case "ScriptSelectionText":
		return StudioStyleGuideColor(43)
	case "ScriptSelectionBackground":
		return StudioStyleGuideColor(44)
	case "ScriptFindSelectionBackground":
		return StudioStyleGuideColor(45)
	case "ScriptMatchingWordSelectionBackground":
		return StudioStyleGuideColor(46)
	case "ScriptOperator":
		return StudioStyleGuideColor(47)
	case "ScriptNumber":
		return StudioStyleGuideColor(48)
	case "ScriptString":
		return StudioStyleGuideColor(49)
	case "ScriptComment":
		return StudioStyleGuideColor(50)
	case "ScriptPreprocessor":
		return StudioStyleGuideColor(51)
	case "ScriptKeyword":
		return StudioStyleGuideColor(52)
	case "ScriptBuiltInFunction":
		return StudioStyleGuideColor(53)
	case "ScriptWarning":
		return StudioStyleGuideColor(54)
	case "ScriptError":
		return StudioStyleGuideColor(55)
	case "DebuggerCurrentLine":
		return StudioStyleGuideColor(56)
	case "DebuggerErrorLine":
		return StudioStyleGuideColor(57)
	case "DiffFilePathText":
		return StudioStyleGuideColor(58)
	case "DiffTextHunkInfo":
		return StudioStyleGuideColor(59)
	case "DiffTextNoChange":
		return StudioStyleGuideColor(60)
	case "DiffTextAddition":
		return StudioStyleGuideColor(61)
	case "DiffTextDeletion":
		return StudioStyleGuideColor(62)
	case "DiffTextSeparatorBackground":
		return StudioStyleGuideColor(63)
	case "DiffTextNoChangeBackground":
		return StudioStyleGuideColor(64)
	case "DiffTextAdditionBackground":
		return StudioStyleGuideColor(65)
	case "DiffTextDeletionBackground":
		return StudioStyleGuideColor(66)
	case "DiffLineNum":
		return StudioStyleGuideColor(67)
	case "DiffLineNumSeparatorBackground":
		return StudioStyleGuideColor(68)
	case "DiffLineNumNoChangeBackground":
		return StudioStyleGuideColor(69)
	case "DiffLineNumAdditionBackground":
		return StudioStyleGuideColor(70)
	case "DiffLineNumDeletionBackground":
		return StudioStyleGuideColor(71)
	case "DiffFilePathBackground":
		return StudioStyleGuideColor(72)
	case "DiffFilePathBorder":
		return StudioStyleGuideColor(73)
	case "Separator":
		return StudioStyleGuideColor(74)
	case "ButtonBorder":
		return StudioStyleGuideColor(75)
	case "ButtonText":
		return StudioStyleGuideColor(76)
	case "InputFieldBorder":
		return StudioStyleGuideColor(77)
	case "CheckedFieldBackground":
		return StudioStyleGuideColor(78)
	case "CheckedFieldBorder":
		return StudioStyleGuideColor(79)
	case "CheckedFieldIndicator":
		return StudioStyleGuideColor(80)
	case "HeaderSection":
		return StudioStyleGuideColor(81)
	case "Midlight":
		return StudioStyleGuideColor(82)
	case "StatusBar":
		return StudioStyleGuideColor(83)
	case "DialogButton":
		return StudioStyleGuideColor(84)
	case "DialogButtonText":
		return StudioStyleGuideColor(85)
	case "DialogButtonBorder":
		return StudioStyleGuideColor(86)
	case "DialogMainButton":
		return StudioStyleGuideColor(87)
	case "DialogMainButtonText":
		return StudioStyleGuideColor(88)
	case "Merge3HighlightOriginal":
		return StudioStyleGuideColor(89)
	case "Merge3HighlightMine":
		return StudioStyleGuideColor(90)
	case "Merge3HighlightTheirs":
		return StudioStyleGuideColor(91)
	}
	return nil
}

type StudioStyleGuideColor uint

func (e StudioStyleGuideColor) Type() string {
	return "Enum.StudioStyleGuideColor"
}
func (e StudioStyleGuideColor) String() string {
	return "Enum.StudioStyleGuideColor." + e.Name()
}
func (e StudioStyleGuideColor) Copy() rbx.Value {
	return e
}
func (e StudioStyleGuideColor) Enum() rbx.Enum {
	return _StudioStyleGuideColor{}
}
func (e StudioStyleGuideColor) Value() int {
	return int(e)
}
func (e StudioStyleGuideColor) Name() string {
	switch e {
	case 0:
		return "MainBackground"
	case 1:
		return "Titlebar"
	case 2:
		return "Dropdown"
	case 3:
		return "Tooltip"
	case 4:
		return "Notification"
	case 5:
		return "ScrollBar"
	case 6:
		return "ScrollBarBackground"
	case 7:
		return "TabBar"
	case 8:
		return "Tab"
	case 9:
		return "RibbonTab"
	case 10:
		return "RibbonTabTopBar"
	case 11:
		return "Button"
	case 12:
		return "MainButton"
	case 13:
		return "RibbonButton"
	case 14:
		return "ViewPortBackground"
	case 15:
		return "InputFieldBackground"
	case 16:
		return "Item"
	case 17:
		return "TableItem"
	case 18:
		return "CategoryItem"
	case 19:
		return "GameSettingsTableItem"
	case 20:
		return "GameSettingsTooltip"
	case 21:
		return "EmulatorBar"
	case 22:
		return "EmulatorDropDown"
	case 23:
		return "ColorPickerFrame"
	case 24:
		return "CurrentMarker"
	case 25:
		return "Border"
	case 26:
		return "Shadow"
	case 27:
		return "Light"
	case 28:
		return "Dark"
	case 29:
		return "Mid"
	case 30:
		return "MainText"
	case 31:
		return "SubText"
	case 32:
		return "TitlebarText"
	case 33:
		return "BrightText"
	case 34:
		return "DimmedText"
	case 35:
		return "LinkText"
	case 36:
		return "WarningText"
	case 37:
		return "ErrorText"
	case 38:
		return "InfoText"
	case 39:
		return "SensitiveText"
	case 40:
		return "ScriptSideWidget"
	case 41:
		return "ScriptBackground"
	case 42:
		return "ScriptText"
	case 43:
		return "ScriptSelectionText"
	case 44:
		return "ScriptSelectionBackground"
	case 45:
		return "ScriptFindSelectionBackground"
	case 46:
		return "ScriptMatchingWordSelectionBackground"
	case 47:
		return "ScriptOperator"
	case 48:
		return "ScriptNumber"
	case 49:
		return "ScriptString"
	case 50:
		return "ScriptComment"
	case 51:
		return "ScriptPreprocessor"
	case 52:
		return "ScriptKeyword"
	case 53:
		return "ScriptBuiltInFunction"
	case 54:
		return "ScriptWarning"
	case 55:
		return "ScriptError"
	case 56:
		return "DebuggerCurrentLine"
	case 57:
		return "DebuggerErrorLine"
	case 58:
		return "DiffFilePathText"
	case 59:
		return "DiffTextHunkInfo"
	case 60:
		return "DiffTextNoChange"
	case 61:
		return "DiffTextAddition"
	case 62:
		return "DiffTextDeletion"
	case 63:
		return "DiffTextSeparatorBackground"
	case 64:
		return "DiffTextNoChangeBackground"
	case 65:
		return "DiffTextAdditionBackground"
	case 66:
		return "DiffTextDeletionBackground"
	case 67:
		return "DiffLineNum"
	case 68:
		return "DiffLineNumSeparatorBackground"
	case 69:
		return "DiffLineNumNoChangeBackground"
	case 70:
		return "DiffLineNumAdditionBackground"
	case 71:
		return "DiffLineNumDeletionBackground"
	case 72:
		return "DiffFilePathBackground"
	case 73:
		return "DiffFilePathBorder"
	case 74:
		return "Separator"
	case 75:
		return "ButtonBorder"
	case 76:
		return "ButtonText"
	case 77:
		return "InputFieldBorder"
	case 78:
		return "CheckedFieldBackground"
	case 79:
		return "CheckedFieldBorder"
	case 80:
		return "CheckedFieldIndicator"
	case 81:
		return "HeaderSection"
	case 82:
		return "Midlight"
	case 83:
		return "StatusBar"
	case 84:
		return "DialogButton"
	case 85:
		return "DialogButtonText"
	case 86:
		return "DialogButtonBorder"
	case 87:
		return "DialogMainButton"
	case 88:
		return "DialogMainButtonText"
	case 89:
		return "Merge3HighlightOriginal"
	case 90:
		return "Merge3HighlightMine"
	case 91:
		return "Merge3HighlightTheirs"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _StudioStyleGuideModifier struct{}

func (e _StudioStyleGuideModifier) Type() string {
	return "Enum"
}
func (e _StudioStyleGuideModifier) String() string {
	return "Enum.StudioStyleGuideModifier"
}
func (e _StudioStyleGuideModifier) Copy() rbx.Value {
	return e
}
func (e _StudioStyleGuideModifier) Name() string {
	return "StudioStyleGuideModifier"
}
func (e _StudioStyleGuideModifier) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		StudioStyleGuideModifier(0),
		StudioStyleGuideModifier(1),
		StudioStyleGuideModifier(2),
		StudioStyleGuideModifier(3),
		StudioStyleGuideModifier(4),
	}
}
func (e _StudioStyleGuideModifier) Item(name string) rbx.EnumItem {
	switch name {
	case "Default":
		return StudioStyleGuideModifier(0)
	case "Selected":
		return StudioStyleGuideModifier(1)
	case "Pressed":
		return StudioStyleGuideModifier(2)
	case "Disabled":
		return StudioStyleGuideModifier(3)
	case "Hover":
		return StudioStyleGuideModifier(4)
	}
	return nil
}

type StudioStyleGuideModifier uint

func (e StudioStyleGuideModifier) Type() string {
	return "Enum.StudioStyleGuideModifier"
}
func (e StudioStyleGuideModifier) String() string {
	return "Enum.StudioStyleGuideModifier." + e.Name()
}
func (e StudioStyleGuideModifier) Copy() rbx.Value {
	return e
}
func (e StudioStyleGuideModifier) Enum() rbx.Enum {
	return _StudioStyleGuideModifier{}
}
func (e StudioStyleGuideModifier) Value() int {
	return int(e)
}
func (e StudioStyleGuideModifier) Name() string {
	switch e {
	case 0:
		return "Default"
	case 1:
		return "Selected"
	case 2:
		return "Pressed"
	case 3:
		return "Disabled"
	case 4:
		return "Hover"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _Style struct{}

func (e _Style) Type() string {
	return "Enum"
}
func (e _Style) String() string {
	return "Enum.Style"
}
func (e _Style) Copy() rbx.Value {
	return e
}
func (e _Style) Name() string {
	return "Style"
}
func (e _Style) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		Style(0),
		Style(1),
		Style(2),
	}
}
func (e _Style) Item(name string) rbx.EnumItem {
	switch name {
	case "AlternatingSupports":
		return Style(0)
	case "BridgeStyleSupports":
		return Style(1)
	case "NoSupports":
		return Style(2)
	}
	return nil
}

type Style uint

func (e Style) Type() string {
	return "Enum.Style"
}
func (e Style) String() string {
	return "Enum.Style." + e.Name()
}
func (e Style) Copy() rbx.Value {
	return e
}
func (e Style) Enum() rbx.Enum {
	return _Style{}
}
func (e Style) Value() int {
	return int(e)
}
func (e Style) Name() string {
	switch e {
	case 0:
		return "AlternatingSupports"
	case 1:
		return "BridgeStyleSupports"
	case 2:
		return "NoSupports"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _SurfaceConstraint struct{}

func (e _SurfaceConstraint) Type() string {
	return "Enum"
}
func (e _SurfaceConstraint) String() string {
	return "Enum.SurfaceConstraint"
}
func (e _SurfaceConstraint) Copy() rbx.Value {
	return e
}
func (e _SurfaceConstraint) Name() string {
	return "SurfaceConstraint"
}
func (e _SurfaceConstraint) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		SurfaceConstraint(0),
		SurfaceConstraint(1),
		SurfaceConstraint(2),
		SurfaceConstraint(3),
	}
}
func (e _SurfaceConstraint) Item(name string) rbx.EnumItem {
	switch name {
	case "None":
		return SurfaceConstraint(0)
	case "Hinge":
		return SurfaceConstraint(1)
	case "SteppingMotor":
		return SurfaceConstraint(2)
	case "Motor":
		return SurfaceConstraint(3)
	}
	return nil
}

type SurfaceConstraint uint

func (e SurfaceConstraint) Type() string {
	return "Enum.SurfaceConstraint"
}
func (e SurfaceConstraint) String() string {
	return "Enum.SurfaceConstraint." + e.Name()
}
func (e SurfaceConstraint) Copy() rbx.Value {
	return e
}
func (e SurfaceConstraint) Enum() rbx.Enum {
	return _SurfaceConstraint{}
}
func (e SurfaceConstraint) Value() int {
	return int(e)
}
func (e SurfaceConstraint) Name() string {
	switch e {
	case 0:
		return "None"
	case 1:
		return "Hinge"
	case 2:
		return "SteppingMotor"
	case 3:
		return "Motor"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _SurfaceGuiSizingMode struct{}

func (e _SurfaceGuiSizingMode) Type() string {
	return "Enum"
}
func (e _SurfaceGuiSizingMode) String() string {
	return "Enum.SurfaceGuiSizingMode"
}
func (e _SurfaceGuiSizingMode) Copy() rbx.Value {
	return e
}
func (e _SurfaceGuiSizingMode) Name() string {
	return "SurfaceGuiSizingMode"
}
func (e _SurfaceGuiSizingMode) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		SurfaceGuiSizingMode(0),
		SurfaceGuiSizingMode(1),
	}
}
func (e _SurfaceGuiSizingMode) Item(name string) rbx.EnumItem {
	switch name {
	case "FixedSize":
		return SurfaceGuiSizingMode(0)
	case "PixelsPerStud":
		return SurfaceGuiSizingMode(1)
	}
	return nil
}

type SurfaceGuiSizingMode uint

func (e SurfaceGuiSizingMode) Type() string {
	return "Enum.SurfaceGuiSizingMode"
}
func (e SurfaceGuiSizingMode) String() string {
	return "Enum.SurfaceGuiSizingMode." + e.Name()
}
func (e SurfaceGuiSizingMode) Copy() rbx.Value {
	return e
}
func (e SurfaceGuiSizingMode) Enum() rbx.Enum {
	return _SurfaceGuiSizingMode{}
}
func (e SurfaceGuiSizingMode) Value() int {
	return int(e)
}
func (e SurfaceGuiSizingMode) Name() string {
	switch e {
	case 0:
		return "FixedSize"
	case 1:
		return "PixelsPerStud"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _SurfaceType struct{}

func (e _SurfaceType) Type() string {
	return "Enum"
}
func (e _SurfaceType) String() string {
	return "Enum.SurfaceType"
}
func (e _SurfaceType) Copy() rbx.Value {
	return e
}
func (e _SurfaceType) Name() string {
	return "SurfaceType"
}
func (e _SurfaceType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		SurfaceType(0),
		SurfaceType(1),
		SurfaceType(2),
		SurfaceType(3),
		SurfaceType(4),
		SurfaceType(5),
		SurfaceType(6),
		SurfaceType(7),
		SurfaceType(8),
		SurfaceType(10),
	}
}
func (e _SurfaceType) Item(name string) rbx.EnumItem {
	switch name {
	case "Smooth":
		return SurfaceType(0)
	case "Glue":
		return SurfaceType(1)
	case "Weld":
		return SurfaceType(2)
	case "Studs":
		return SurfaceType(3)
	case "Inlet":
		return SurfaceType(4)
	case "Universal":
		return SurfaceType(5)
	case "Hinge":
		return SurfaceType(6)
	case "Motor":
		return SurfaceType(7)
	case "SteppingMotor":
		return SurfaceType(8)
	case "SmoothNoOutlines":
		return SurfaceType(10)
	}
	return nil
}

type SurfaceType uint

func (e SurfaceType) Type() string {
	return "Enum.SurfaceType"
}
func (e SurfaceType) String() string {
	return "Enum.SurfaceType." + e.Name()
}
func (e SurfaceType) Copy() rbx.Value {
	return e
}
func (e SurfaceType) Enum() rbx.Enum {
	return _SurfaceType{}
}
func (e SurfaceType) Value() int {
	return int(e)
}
func (e SurfaceType) Name() string {
	switch e {
	case 0:
		return "Smooth"
	case 1:
		return "Glue"
	case 2:
		return "Weld"
	case 3:
		return "Studs"
	case 4:
		return "Inlet"
	case 5:
		return "Universal"
	case 6:
		return "Hinge"
	case 7:
		return "Motor"
	case 8:
		return "SteppingMotor"
	case 10:
		return "SmoothNoOutlines"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _SwipeDirection struct{}

func (e _SwipeDirection) Type() string {
	return "Enum"
}
func (e _SwipeDirection) String() string {
	return "Enum.SwipeDirection"
}
func (e _SwipeDirection) Copy() rbx.Value {
	return e
}
func (e _SwipeDirection) Name() string {
	return "SwipeDirection"
}
func (e _SwipeDirection) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		SwipeDirection(0),
		SwipeDirection(1),
		SwipeDirection(2),
		SwipeDirection(3),
		SwipeDirection(4),
	}
}
func (e _SwipeDirection) Item(name string) rbx.EnumItem {
	switch name {
	case "Right":
		return SwipeDirection(0)
	case "Left":
		return SwipeDirection(1)
	case "Up":
		return SwipeDirection(2)
	case "Down":
		return SwipeDirection(3)
	case "None":
		return SwipeDirection(4)
	}
	return nil
}

type SwipeDirection uint

func (e SwipeDirection) Type() string {
	return "Enum.SwipeDirection"
}
func (e SwipeDirection) String() string {
	return "Enum.SwipeDirection." + e.Name()
}
func (e SwipeDirection) Copy() rbx.Value {
	return e
}
func (e SwipeDirection) Enum() rbx.Enum {
	return _SwipeDirection{}
}
func (e SwipeDirection) Value() int {
	return int(e)
}
func (e SwipeDirection) Name() string {
	switch e {
	case 0:
		return "Right"
	case 1:
		return "Left"
	case 2:
		return "Up"
	case 3:
		return "Down"
	case 4:
		return "None"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _TableMajorAxis struct{}

func (e _TableMajorAxis) Type() string {
	return "Enum"
}
func (e _TableMajorAxis) String() string {
	return "Enum.TableMajorAxis"
}
func (e _TableMajorAxis) Copy() rbx.Value {
	return e
}
func (e _TableMajorAxis) Name() string {
	return "TableMajorAxis"
}
func (e _TableMajorAxis) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		TableMajorAxis(0),
		TableMajorAxis(1),
	}
}
func (e _TableMajorAxis) Item(name string) rbx.EnumItem {
	switch name {
	case "RowMajor":
		return TableMajorAxis(0)
	case "ColumnMajor":
		return TableMajorAxis(1)
	}
	return nil
}

type TableMajorAxis uint

func (e TableMajorAxis) Type() string {
	return "Enum.TableMajorAxis"
}
func (e TableMajorAxis) String() string {
	return "Enum.TableMajorAxis." + e.Name()
}
func (e TableMajorAxis) Copy() rbx.Value {
	return e
}
func (e TableMajorAxis) Enum() rbx.Enum {
	return _TableMajorAxis{}
}
func (e TableMajorAxis) Value() int {
	return int(e)
}
func (e TableMajorAxis) Name() string {
	switch e {
	case 0:
		return "RowMajor"
	case 1:
		return "ColumnMajor"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _Technology struct{}

func (e _Technology) Type() string {
	return "Enum"
}
func (e _Technology) String() string {
	return "Enum.Technology"
}
func (e _Technology) Copy() rbx.Value {
	return e
}
func (e _Technology) Name() string {
	return "Technology"
}
func (e _Technology) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		Technology(2),
		Technology(1),
		Technology(3),
		Technology(0),
	}
}
func (e _Technology) Item(name string) rbx.EnumItem {
	switch name {
	case "Compatibility":
		return Technology(2)
	case "Voxel":
		return Technology(1)
	case "ShadowMap":
		return Technology(3)
	case "Legacy":
		return Technology(0)
	}
	return nil
}

type Technology uint

func (e Technology) Type() string {
	return "Enum.Technology"
}
func (e Technology) String() string {
	return "Enum.Technology." + e.Name()
}
func (e Technology) Copy() rbx.Value {
	return e
}
func (e Technology) Enum() rbx.Enum {
	return _Technology{}
}
func (e Technology) Value() int {
	return int(e)
}
func (e Technology) Name() string {
	switch e {
	case 2:
		return "Compatibility"
	case 1:
		return "Voxel"
	case 3:
		return "ShadowMap"
	case 0:
		return "Legacy"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _TeleportResult struct{}

func (e _TeleportResult) Type() string {
	return "Enum"
}
func (e _TeleportResult) String() string {
	return "Enum.TeleportResult"
}
func (e _TeleportResult) Copy() rbx.Value {
	return e
}
func (e _TeleportResult) Name() string {
	return "TeleportResult"
}
func (e _TeleportResult) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		TeleportResult(0),
		TeleportResult(1),
		TeleportResult(2),
		TeleportResult(3),
		TeleportResult(4),
		TeleportResult(5),
		TeleportResult(6),
		TeleportResult(7),
	}
}
func (e _TeleportResult) Item(name string) rbx.EnumItem {
	switch name {
	case "Success":
		return TeleportResult(0)
	case "Failure":
		return TeleportResult(1)
	case "GameNotFound":
		return TeleportResult(2)
	case "GameEnded":
		return TeleportResult(3)
	case "GameFull":
		return TeleportResult(4)
	case "Unauthorized":
		return TeleportResult(5)
	case "Flooded":
		return TeleportResult(6)
	case "IsTeleporting":
		return TeleportResult(7)
	}
	return nil
}

type TeleportResult uint

func (e TeleportResult) Type() string {
	return "Enum.TeleportResult"
}
func (e TeleportResult) String() string {
	return "Enum.TeleportResult." + e.Name()
}
func (e TeleportResult) Copy() rbx.Value {
	return e
}
func (e TeleportResult) Enum() rbx.Enum {
	return _TeleportResult{}
}
func (e TeleportResult) Value() int {
	return int(e)
}
func (e TeleportResult) Name() string {
	switch e {
	case 0:
		return "Success"
	case 1:
		return "Failure"
	case 2:
		return "GameNotFound"
	case 3:
		return "GameEnded"
	case 4:
		return "GameFull"
	case 5:
		return "Unauthorized"
	case 6:
		return "Flooded"
	case 7:
		return "IsTeleporting"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _TeleportState struct{}

func (e _TeleportState) Type() string {
	return "Enum"
}
func (e _TeleportState) String() string {
	return "Enum.TeleportState"
}
func (e _TeleportState) Copy() rbx.Value {
	return e
}
func (e _TeleportState) Name() string {
	return "TeleportState"
}
func (e _TeleportState) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		TeleportState(0),
		TeleportState(1),
		TeleportState(2),
		TeleportState(3),
		TeleportState(4),
	}
}
func (e _TeleportState) Item(name string) rbx.EnumItem {
	switch name {
	case "RequestedFromServer":
		return TeleportState(0)
	case "Started":
		return TeleportState(1)
	case "WaitingForServer":
		return TeleportState(2)
	case "Failed":
		return TeleportState(3)
	case "InProgress":
		return TeleportState(4)
	}
	return nil
}

type TeleportState uint

func (e TeleportState) Type() string {
	return "Enum.TeleportState"
}
func (e TeleportState) String() string {
	return "Enum.TeleportState." + e.Name()
}
func (e TeleportState) Copy() rbx.Value {
	return e
}
func (e TeleportState) Enum() rbx.Enum {
	return _TeleportState{}
}
func (e TeleportState) Value() int {
	return int(e)
}
func (e TeleportState) Name() string {
	switch e {
	case 0:
		return "RequestedFromServer"
	case 1:
		return "Started"
	case 2:
		return "WaitingForServer"
	case 3:
		return "Failed"
	case 4:
		return "InProgress"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _TeleportType struct{}

func (e _TeleportType) Type() string {
	return "Enum"
}
func (e _TeleportType) String() string {
	return "Enum.TeleportType"
}
func (e _TeleportType) Copy() rbx.Value {
	return e
}
func (e _TeleportType) Name() string {
	return "TeleportType"
}
func (e _TeleportType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		TeleportType(0),
		TeleportType(1),
		TeleportType(2),
	}
}
func (e _TeleportType) Item(name string) rbx.EnumItem {
	switch name {
	case "ToPlace":
		return TeleportType(0)
	case "ToInstance":
		return TeleportType(1)
	case "ToReservedServer":
		return TeleportType(2)
	}
	return nil
}

type TeleportType uint

func (e TeleportType) Type() string {
	return "Enum.TeleportType"
}
func (e TeleportType) String() string {
	return "Enum.TeleportType." + e.Name()
}
func (e TeleportType) Copy() rbx.Value {
	return e
}
func (e TeleportType) Enum() rbx.Enum {
	return _TeleportType{}
}
func (e TeleportType) Value() int {
	return int(e)
}
func (e TeleportType) Name() string {
	switch e {
	case 0:
		return "ToPlace"
	case 1:
		return "ToInstance"
	case 2:
		return "ToReservedServer"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _TextFilterContext struct{}

func (e _TextFilterContext) Type() string {
	return "Enum"
}
func (e _TextFilterContext) String() string {
	return "Enum.TextFilterContext"
}
func (e _TextFilterContext) Copy() rbx.Value {
	return e
}
func (e _TextFilterContext) Name() string {
	return "TextFilterContext"
}
func (e _TextFilterContext) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		TextFilterContext(1),
		TextFilterContext(2),
	}
}
func (e _TextFilterContext) Item(name string) rbx.EnumItem {
	switch name {
	case "PublicChat":
		return TextFilterContext(1)
	case "PrivateChat":
		return TextFilterContext(2)
	}
	return nil
}

type TextFilterContext uint

func (e TextFilterContext) Type() string {
	return "Enum.TextFilterContext"
}
func (e TextFilterContext) String() string {
	return "Enum.TextFilterContext." + e.Name()
}
func (e TextFilterContext) Copy() rbx.Value {
	return e
}
func (e TextFilterContext) Enum() rbx.Enum {
	return _TextFilterContext{}
}
func (e TextFilterContext) Value() int {
	return int(e)
}
func (e TextFilterContext) Name() string {
	switch e {
	case 1:
		return "PublicChat"
	case 2:
		return "PrivateChat"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _TextInputType struct{}

func (e _TextInputType) Type() string {
	return "Enum"
}
func (e _TextInputType) String() string {
	return "Enum.TextInputType"
}
func (e _TextInputType) Copy() rbx.Value {
	return e
}
func (e _TextInputType) Name() string {
	return "TextInputType"
}
func (e _TextInputType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		TextInputType(0),
		TextInputType(1),
		TextInputType(2),
		TextInputType(3),
		TextInputType(4),
		TextInputType(5),
	}
}
func (e _TextInputType) Item(name string) rbx.EnumItem {
	switch name {
	case "Default":
		return TextInputType(0)
	case "NoSuggestions":
		return TextInputType(1)
	case "Number":
		return TextInputType(2)
	case "Email":
		return TextInputType(3)
	case "Phone":
		return TextInputType(4)
	case "Password":
		return TextInputType(5)
	}
	return nil
}

type TextInputType uint

func (e TextInputType) Type() string {
	return "Enum.TextInputType"
}
func (e TextInputType) String() string {
	return "Enum.TextInputType." + e.Name()
}
func (e TextInputType) Copy() rbx.Value {
	return e
}
func (e TextInputType) Enum() rbx.Enum {
	return _TextInputType{}
}
func (e TextInputType) Value() int {
	return int(e)
}
func (e TextInputType) Name() string {
	switch e {
	case 0:
		return "Default"
	case 1:
		return "NoSuggestions"
	case 2:
		return "Number"
	case 3:
		return "Email"
	case 4:
		return "Phone"
	case 5:
		return "Password"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _TextTruncate struct{}

func (e _TextTruncate) Type() string {
	return "Enum"
}
func (e _TextTruncate) String() string {
	return "Enum.TextTruncate"
}
func (e _TextTruncate) Copy() rbx.Value {
	return e
}
func (e _TextTruncate) Name() string {
	return "TextTruncate"
}
func (e _TextTruncate) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		TextTruncate(0),
		TextTruncate(1),
	}
}
func (e _TextTruncate) Item(name string) rbx.EnumItem {
	switch name {
	case "None":
		return TextTruncate(0)
	case "AtEnd":
		return TextTruncate(1)
	}
	return nil
}

type TextTruncate uint

func (e TextTruncate) Type() string {
	return "Enum.TextTruncate"
}
func (e TextTruncate) String() string {
	return "Enum.TextTruncate." + e.Name()
}
func (e TextTruncate) Copy() rbx.Value {
	return e
}
func (e TextTruncate) Enum() rbx.Enum {
	return _TextTruncate{}
}
func (e TextTruncate) Value() int {
	return int(e)
}
func (e TextTruncate) Name() string {
	switch e {
	case 0:
		return "None"
	case 1:
		return "AtEnd"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _TextXAlignment struct{}

func (e _TextXAlignment) Type() string {
	return "Enum"
}
func (e _TextXAlignment) String() string {
	return "Enum.TextXAlignment"
}
func (e _TextXAlignment) Copy() rbx.Value {
	return e
}
func (e _TextXAlignment) Name() string {
	return "TextXAlignment"
}
func (e _TextXAlignment) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		TextXAlignment(0),
		TextXAlignment(2),
		TextXAlignment(1),
	}
}
func (e _TextXAlignment) Item(name string) rbx.EnumItem {
	switch name {
	case "Left":
		return TextXAlignment(0)
	case "Center":
		return TextXAlignment(2)
	case "Right":
		return TextXAlignment(1)
	}
	return nil
}

type TextXAlignment uint

func (e TextXAlignment) Type() string {
	return "Enum.TextXAlignment"
}
func (e TextXAlignment) String() string {
	return "Enum.TextXAlignment." + e.Name()
}
func (e TextXAlignment) Copy() rbx.Value {
	return e
}
func (e TextXAlignment) Enum() rbx.Enum {
	return _TextXAlignment{}
}
func (e TextXAlignment) Value() int {
	return int(e)
}
func (e TextXAlignment) Name() string {
	switch e {
	case 0:
		return "Left"
	case 2:
		return "Center"
	case 1:
		return "Right"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _TextYAlignment struct{}

func (e _TextYAlignment) Type() string {
	return "Enum"
}
func (e _TextYAlignment) String() string {
	return "Enum.TextYAlignment"
}
func (e _TextYAlignment) Copy() rbx.Value {
	return e
}
func (e _TextYAlignment) Name() string {
	return "TextYAlignment"
}
func (e _TextYAlignment) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		TextYAlignment(0),
		TextYAlignment(1),
		TextYAlignment(2),
	}
}
func (e _TextYAlignment) Item(name string) rbx.EnumItem {
	switch name {
	case "Top":
		return TextYAlignment(0)
	case "Center":
		return TextYAlignment(1)
	case "Bottom":
		return TextYAlignment(2)
	}
	return nil
}

type TextYAlignment uint

func (e TextYAlignment) Type() string {
	return "Enum.TextYAlignment"
}
func (e TextYAlignment) String() string {
	return "Enum.TextYAlignment." + e.Name()
}
func (e TextYAlignment) Copy() rbx.Value {
	return e
}
func (e TextYAlignment) Enum() rbx.Enum {
	return _TextYAlignment{}
}
func (e TextYAlignment) Value() int {
	return int(e)
}
func (e TextYAlignment) Name() string {
	switch e {
	case 0:
		return "Top"
	case 1:
		return "Center"
	case 2:
		return "Bottom"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _TextureMode struct{}

func (e _TextureMode) Type() string {
	return "Enum"
}
func (e _TextureMode) String() string {
	return "Enum.TextureMode"
}
func (e _TextureMode) Copy() rbx.Value {
	return e
}
func (e _TextureMode) Name() string {
	return "TextureMode"
}
func (e _TextureMode) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		TextureMode(0),
		TextureMode(1),
		TextureMode(2),
	}
}
func (e _TextureMode) Item(name string) rbx.EnumItem {
	switch name {
	case "Stretch":
		return TextureMode(0)
	case "Wrap":
		return TextureMode(1)
	case "Static":
		return TextureMode(2)
	}
	return nil
}

type TextureMode uint

func (e TextureMode) Type() string {
	return "Enum.TextureMode"
}
func (e TextureMode) String() string {
	return "Enum.TextureMode." + e.Name()
}
func (e TextureMode) Copy() rbx.Value {
	return e
}
func (e TextureMode) Enum() rbx.Enum {
	return _TextureMode{}
}
func (e TextureMode) Value() int {
	return int(e)
}
func (e TextureMode) Name() string {
	switch e {
	case 0:
		return "Stretch"
	case 1:
		return "Wrap"
	case 2:
		return "Static"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _TextureQueryType struct{}

func (e _TextureQueryType) Type() string {
	return "Enum"
}
func (e _TextureQueryType) String() string {
	return "Enum.TextureQueryType"
}
func (e _TextureQueryType) Copy() rbx.Value {
	return e
}
func (e _TextureQueryType) Name() string {
	return "TextureQueryType"
}
func (e _TextureQueryType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		TextureQueryType(0),
		TextureQueryType(1),
		TextureQueryType(2),
		TextureQueryType(3),
	}
}
func (e _TextureQueryType) Item(name string) rbx.EnumItem {
	switch name {
	case "NonHumanoid":
		return TextureQueryType(0)
	case "NonHumanoidOrphaned":
		return TextureQueryType(1)
	case "Humanoid":
		return TextureQueryType(2)
	case "HumanoidOrphaned":
		return TextureQueryType(3)
	}
	return nil
}

type TextureQueryType uint

func (e TextureQueryType) Type() string {
	return "Enum.TextureQueryType"
}
func (e TextureQueryType) String() string {
	return "Enum.TextureQueryType." + e.Name()
}
func (e TextureQueryType) Copy() rbx.Value {
	return e
}
func (e TextureQueryType) Enum() rbx.Enum {
	return _TextureQueryType{}
}
func (e TextureQueryType) Value() int {
	return int(e)
}
func (e TextureQueryType) Name() string {
	switch e {
	case 0:
		return "NonHumanoid"
	case 1:
		return "NonHumanoidOrphaned"
	case 2:
		return "Humanoid"
	case 3:
		return "HumanoidOrphaned"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _ThreadPoolConfig struct{}

func (e _ThreadPoolConfig) Type() string {
	return "Enum"
}
func (e _ThreadPoolConfig) String() string {
	return "Enum.ThreadPoolConfig"
}
func (e _ThreadPoolConfig) Copy() rbx.Value {
	return e
}
func (e _ThreadPoolConfig) Name() string {
	return "ThreadPoolConfig"
}
func (e _ThreadPoolConfig) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		ThreadPoolConfig(0),
		ThreadPoolConfig(101),
		ThreadPoolConfig(102),
		ThreadPoolConfig(103),
		ThreadPoolConfig(104),
		ThreadPoolConfig(1),
		ThreadPoolConfig(2),
		ThreadPoolConfig(3),
		ThreadPoolConfig(4),
		ThreadPoolConfig(8),
		ThreadPoolConfig(16),
	}
}
func (e _ThreadPoolConfig) Item(name string) rbx.EnumItem {
	switch name {
	case "Auto":
		return ThreadPoolConfig(0)
	case "PerCore1":
		return ThreadPoolConfig(101)
	case "PerCore2":
		return ThreadPoolConfig(102)
	case "PerCore3":
		return ThreadPoolConfig(103)
	case "PerCore4":
		return ThreadPoolConfig(104)
	case "Threads1":
		return ThreadPoolConfig(1)
	case "Threads2":
		return ThreadPoolConfig(2)
	case "Threads3":
		return ThreadPoolConfig(3)
	case "Threads4":
		return ThreadPoolConfig(4)
	case "Threads8":
		return ThreadPoolConfig(8)
	case "Threads16":
		return ThreadPoolConfig(16)
	}
	return nil
}

type ThreadPoolConfig uint

func (e ThreadPoolConfig) Type() string {
	return "Enum.ThreadPoolConfig"
}
func (e ThreadPoolConfig) String() string {
	return "Enum.ThreadPoolConfig." + e.Name()
}
func (e ThreadPoolConfig) Copy() rbx.Value {
	return e
}
func (e ThreadPoolConfig) Enum() rbx.Enum {
	return _ThreadPoolConfig{}
}
func (e ThreadPoolConfig) Value() int {
	return int(e)
}
func (e ThreadPoolConfig) Name() string {
	switch e {
	case 0:
		return "Auto"
	case 101:
		return "PerCore1"
	case 102:
		return "PerCore2"
	case 103:
		return "PerCore3"
	case 104:
		return "PerCore4"
	case 1:
		return "Threads1"
	case 2:
		return "Threads2"
	case 3:
		return "Threads3"
	case 4:
		return "Threads4"
	case 8:
		return "Threads8"
	case 16:
		return "Threads16"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _ThrottlingPriority struct{}

func (e _ThrottlingPriority) Type() string {
	return "Enum"
}
func (e _ThrottlingPriority) String() string {
	return "Enum.ThrottlingPriority"
}
func (e _ThrottlingPriority) Copy() rbx.Value {
	return e
}
func (e _ThrottlingPriority) Name() string {
	return "ThrottlingPriority"
}
func (e _ThrottlingPriority) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		ThrottlingPriority(2),
		ThrottlingPriority(1),
		ThrottlingPriority(0),
	}
}
func (e _ThrottlingPriority) Item(name string) rbx.EnumItem {
	switch name {
	case "Extreme":
		return ThrottlingPriority(2)
	case "ElevatedOnServer":
		return ThrottlingPriority(1)
	case "Default":
		return ThrottlingPriority(0)
	}
	return nil
}

type ThrottlingPriority uint

func (e ThrottlingPriority) Type() string {
	return "Enum.ThrottlingPriority"
}
func (e ThrottlingPriority) String() string {
	return "Enum.ThrottlingPriority." + e.Name()
}
func (e ThrottlingPriority) Copy() rbx.Value {
	return e
}
func (e ThrottlingPriority) Enum() rbx.Enum {
	return _ThrottlingPriority{}
}
func (e ThrottlingPriority) Value() int {
	return int(e)
}
func (e ThrottlingPriority) Name() string {
	switch e {
	case 2:
		return "Extreme"
	case 1:
		return "ElevatedOnServer"
	case 0:
		return "Default"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _ThumbnailSize struct{}

func (e _ThumbnailSize) Type() string {
	return "Enum"
}
func (e _ThumbnailSize) String() string {
	return "Enum.ThumbnailSize"
}
func (e _ThumbnailSize) Copy() rbx.Value {
	return e
}
func (e _ThumbnailSize) Name() string {
	return "ThumbnailSize"
}
func (e _ThumbnailSize) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		ThumbnailSize(0),
		ThumbnailSize(1),
		ThumbnailSize(2),
		ThumbnailSize(3),
		ThumbnailSize(4),
		ThumbnailSize(5),
		ThumbnailSize(6),
	}
}
func (e _ThumbnailSize) Item(name string) rbx.EnumItem {
	switch name {
	case "Size48x48":
		return ThumbnailSize(0)
	case "Size180x180":
		return ThumbnailSize(1)
	case "Size420x420":
		return ThumbnailSize(2)
	case "Size60x60":
		return ThumbnailSize(3)
	case "Size100x100":
		return ThumbnailSize(4)
	case "Size150x150":
		return ThumbnailSize(5)
	case "Size352x352":
		return ThumbnailSize(6)
	}
	return nil
}

type ThumbnailSize uint

func (e ThumbnailSize) Type() string {
	return "Enum.ThumbnailSize"
}
func (e ThumbnailSize) String() string {
	return "Enum.ThumbnailSize." + e.Name()
}
func (e ThumbnailSize) Copy() rbx.Value {
	return e
}
func (e ThumbnailSize) Enum() rbx.Enum {
	return _ThumbnailSize{}
}
func (e ThumbnailSize) Value() int {
	return int(e)
}
func (e ThumbnailSize) Name() string {
	switch e {
	case 0:
		return "Size48x48"
	case 1:
		return "Size180x180"
	case 2:
		return "Size420x420"
	case 3:
		return "Size60x60"
	case 4:
		return "Size100x100"
	case 5:
		return "Size150x150"
	case 6:
		return "Size352x352"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _ThumbnailType struct{}

func (e _ThumbnailType) Type() string {
	return "Enum"
}
func (e _ThumbnailType) String() string {
	return "Enum.ThumbnailType"
}
func (e _ThumbnailType) Copy() rbx.Value {
	return e
}
func (e _ThumbnailType) Name() string {
	return "ThumbnailType"
}
func (e _ThumbnailType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		ThumbnailType(0),
		ThumbnailType(1),
		ThumbnailType(2),
	}
}
func (e _ThumbnailType) Item(name string) rbx.EnumItem {
	switch name {
	case "HeadShot":
		return ThumbnailType(0)
	case "AvatarBust":
		return ThumbnailType(1)
	case "AvatarThumbnail":
		return ThumbnailType(2)
	}
	return nil
}

type ThumbnailType uint

func (e ThumbnailType) Type() string {
	return "Enum.ThumbnailType"
}
func (e ThumbnailType) String() string {
	return "Enum.ThumbnailType." + e.Name()
}
func (e ThumbnailType) Copy() rbx.Value {
	return e
}
func (e ThumbnailType) Enum() rbx.Enum {
	return _ThumbnailType{}
}
func (e ThumbnailType) Value() int {
	return int(e)
}
func (e ThumbnailType) Name() string {
	switch e {
	case 0:
		return "HeadShot"
	case 1:
		return "AvatarBust"
	case 2:
		return "AvatarThumbnail"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _TickCountSampleMethod struct{}

func (e _TickCountSampleMethod) Type() string {
	return "Enum"
}
func (e _TickCountSampleMethod) String() string {
	return "Enum.TickCountSampleMethod"
}
func (e _TickCountSampleMethod) Copy() rbx.Value {
	return e
}
func (e _TickCountSampleMethod) Name() string {
	return "TickCountSampleMethod"
}
func (e _TickCountSampleMethod) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		TickCountSampleMethod(0),
		TickCountSampleMethod(1),
		TickCountSampleMethod(2),
	}
}
func (e _TickCountSampleMethod) Item(name string) rbx.EnumItem {
	switch name {
	case "Fast":
		return TickCountSampleMethod(0)
	case "Benchmark":
		return TickCountSampleMethod(1)
	case "Precise":
		return TickCountSampleMethod(2)
	}
	return nil
}

type TickCountSampleMethod uint

func (e TickCountSampleMethod) Type() string {
	return "Enum.TickCountSampleMethod"
}
func (e TickCountSampleMethod) String() string {
	return "Enum.TickCountSampleMethod." + e.Name()
}
func (e TickCountSampleMethod) Copy() rbx.Value {
	return e
}
func (e TickCountSampleMethod) Enum() rbx.Enum {
	return _TickCountSampleMethod{}
}
func (e TickCountSampleMethod) Value() int {
	return int(e)
}
func (e TickCountSampleMethod) Name() string {
	switch e {
	case 0:
		return "Fast"
	case 1:
		return "Benchmark"
	case 2:
		return "Precise"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _TopBottom struct{}

func (e _TopBottom) Type() string {
	return "Enum"
}
func (e _TopBottom) String() string {
	return "Enum.TopBottom"
}
func (e _TopBottom) Copy() rbx.Value {
	return e
}
func (e _TopBottom) Name() string {
	return "TopBottom"
}
func (e _TopBottom) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		TopBottom(0),
		TopBottom(1),
		TopBottom(2),
	}
}
func (e _TopBottom) Item(name string) rbx.EnumItem {
	switch name {
	case "Top":
		return TopBottom(0)
	case "Center":
		return TopBottom(1)
	case "Bottom":
		return TopBottom(2)
	}
	return nil
}

type TopBottom uint

func (e TopBottom) Type() string {
	return "Enum.TopBottom"
}
func (e TopBottom) String() string {
	return "Enum.TopBottom." + e.Name()
}
func (e TopBottom) Copy() rbx.Value {
	return e
}
func (e TopBottom) Enum() rbx.Enum {
	return _TopBottom{}
}
func (e TopBottom) Value() int {
	return int(e)
}
func (e TopBottom) Name() string {
	switch e {
	case 0:
		return "Top"
	case 1:
		return "Center"
	case 2:
		return "Bottom"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _TouchCameraMovementMode struct{}

func (e _TouchCameraMovementMode) Type() string {
	return "Enum"
}
func (e _TouchCameraMovementMode) String() string {
	return "Enum.TouchCameraMovementMode"
}
func (e _TouchCameraMovementMode) Copy() rbx.Value {
	return e
}
func (e _TouchCameraMovementMode) Name() string {
	return "TouchCameraMovementMode"
}
func (e _TouchCameraMovementMode) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		TouchCameraMovementMode(0),
		TouchCameraMovementMode(2),
		TouchCameraMovementMode(1),
		TouchCameraMovementMode(3),
	}
}
func (e _TouchCameraMovementMode) Item(name string) rbx.EnumItem {
	switch name {
	case "Default":
		return TouchCameraMovementMode(0)
	case "Follow":
		return TouchCameraMovementMode(2)
	case "Classic":
		return TouchCameraMovementMode(1)
	case "Orbital":
		return TouchCameraMovementMode(3)
	}
	return nil
}

type TouchCameraMovementMode uint

func (e TouchCameraMovementMode) Type() string {
	return "Enum.TouchCameraMovementMode"
}
func (e TouchCameraMovementMode) String() string {
	return "Enum.TouchCameraMovementMode." + e.Name()
}
func (e TouchCameraMovementMode) Copy() rbx.Value {
	return e
}
func (e TouchCameraMovementMode) Enum() rbx.Enum {
	return _TouchCameraMovementMode{}
}
func (e TouchCameraMovementMode) Value() int {
	return int(e)
}
func (e TouchCameraMovementMode) Name() string {
	switch e {
	case 0:
		return "Default"
	case 2:
		return "Follow"
	case 1:
		return "Classic"
	case 3:
		return "Orbital"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _TouchMovementMode struct{}

func (e _TouchMovementMode) Type() string {
	return "Enum"
}
func (e _TouchMovementMode) String() string {
	return "Enum.TouchMovementMode"
}
func (e _TouchMovementMode) Copy() rbx.Value {
	return e
}
func (e _TouchMovementMode) Name() string {
	return "TouchMovementMode"
}
func (e _TouchMovementMode) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		TouchMovementMode(0),
		TouchMovementMode(1),
		TouchMovementMode(2),
		TouchMovementMode(3),
		TouchMovementMode(4),
		TouchMovementMode(5),
	}
}
func (e _TouchMovementMode) Item(name string) rbx.EnumItem {
	switch name {
	case "Default":
		return TouchMovementMode(0)
	case "Thumbstick":
		return TouchMovementMode(1)
	case "DPad":
		return TouchMovementMode(2)
	case "Thumbpad":
		return TouchMovementMode(3)
	case "ClickToMove":
		return TouchMovementMode(4)
	case "DynamicThumbstick":
		return TouchMovementMode(5)
	}
	return nil
}

type TouchMovementMode uint

func (e TouchMovementMode) Type() string {
	return "Enum.TouchMovementMode"
}
func (e TouchMovementMode) String() string {
	return "Enum.TouchMovementMode." + e.Name()
}
func (e TouchMovementMode) Copy() rbx.Value {
	return e
}
func (e TouchMovementMode) Enum() rbx.Enum {
	return _TouchMovementMode{}
}
func (e TouchMovementMode) Value() int {
	return int(e)
}
func (e TouchMovementMode) Name() string {
	switch e {
	case 0:
		return "Default"
	case 1:
		return "Thumbstick"
	case 2:
		return "DPad"
	case 3:
		return "Thumbpad"
	case 4:
		return "ClickToMove"
	case 5:
		return "DynamicThumbstick"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _TweenStatus struct{}

func (e _TweenStatus) Type() string {
	return "Enum"
}
func (e _TweenStatus) String() string {
	return "Enum.TweenStatus"
}
func (e _TweenStatus) Copy() rbx.Value {
	return e
}
func (e _TweenStatus) Name() string {
	return "TweenStatus"
}
func (e _TweenStatus) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		TweenStatus(0),
		TweenStatus(1),
	}
}
func (e _TweenStatus) Item(name string) rbx.EnumItem {
	switch name {
	case "Canceled":
		return TweenStatus(0)
	case "Completed":
		return TweenStatus(1)
	}
	return nil
}

type TweenStatus uint

func (e TweenStatus) Type() string {
	return "Enum.TweenStatus"
}
func (e TweenStatus) String() string {
	return "Enum.TweenStatus." + e.Name()
}
func (e TweenStatus) Copy() rbx.Value {
	return e
}
func (e TweenStatus) Enum() rbx.Enum {
	return _TweenStatus{}
}
func (e TweenStatus) Value() int {
	return int(e)
}
func (e TweenStatus) Name() string {
	switch e {
	case 0:
		return "Canceled"
	case 1:
		return "Completed"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _UITheme struct{}

func (e _UITheme) Type() string {
	return "Enum"
}
func (e _UITheme) String() string {
	return "Enum.UITheme"
}
func (e _UITheme) Copy() rbx.Value {
	return e
}
func (e _UITheme) Name() string {
	return "UITheme"
}
func (e _UITheme) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		UITheme(0),
		UITheme(1),
	}
}
func (e _UITheme) Item(name string) rbx.EnumItem {
	switch name {
	case "Light":
		return UITheme(0)
	case "Dark":
		return UITheme(1)
	}
	return nil
}

type UITheme uint

func (e UITheme) Type() string {
	return "Enum.UITheme"
}
func (e UITheme) String() string {
	return "Enum.UITheme." + e.Name()
}
func (e UITheme) Copy() rbx.Value {
	return e
}
func (e UITheme) Enum() rbx.Enum {
	return _UITheme{}
}
func (e UITheme) Value() int {
	return int(e)
}
func (e UITheme) Name() string {
	switch e {
	case 0:
		return "Light"
	case 1:
		return "Dark"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _UiMessageType struct{}

func (e _UiMessageType) Type() string {
	return "Enum"
}
func (e _UiMessageType) String() string {
	return "Enum.UiMessageType"
}
func (e _UiMessageType) Copy() rbx.Value {
	return e
}
func (e _UiMessageType) Name() string {
	return "UiMessageType"
}
func (e _UiMessageType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		UiMessageType(0),
		UiMessageType(1),
	}
}
func (e _UiMessageType) Item(name string) rbx.EnumItem {
	switch name {
	case "UiMessageError":
		return UiMessageType(0)
	case "UiMessageInfo":
		return UiMessageType(1)
	}
	return nil
}

type UiMessageType uint

func (e UiMessageType) Type() string {
	return "Enum.UiMessageType"
}
func (e UiMessageType) String() string {
	return "Enum.UiMessageType." + e.Name()
}
func (e UiMessageType) Copy() rbx.Value {
	return e
}
func (e UiMessageType) Enum() rbx.Enum {
	return _UiMessageType{}
}
func (e UiMessageType) Value() int {
	return int(e)
}
func (e UiMessageType) Name() string {
	switch e {
	case 0:
		return "UiMessageError"
	case 1:
		return "UiMessageInfo"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _UploadSetting struct{}

func (e _UploadSetting) Type() string {
	return "Enum"
}
func (e _UploadSetting) String() string {
	return "Enum.UploadSetting"
}
func (e _UploadSetting) Copy() rbx.Value {
	return e
}
func (e _UploadSetting) Name() string {
	return "UploadSetting"
}
func (e _UploadSetting) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		UploadSetting(0),
		UploadSetting(1),
		UploadSetting(2),
	}
}
func (e _UploadSetting) Item(name string) rbx.EnumItem {
	switch name {
	case "Never":
		return UploadSetting(0)
	case "Ask":
		return UploadSetting(1)
	case "Always":
		return UploadSetting(2)
	}
	return nil
}

type UploadSetting uint

func (e UploadSetting) Type() string {
	return "Enum.UploadSetting"
}
func (e UploadSetting) String() string {
	return "Enum.UploadSetting." + e.Name()
}
func (e UploadSetting) Copy() rbx.Value {
	return e
}
func (e UploadSetting) Enum() rbx.Enum {
	return _UploadSetting{}
}
func (e UploadSetting) Value() int {
	return int(e)
}
func (e UploadSetting) Name() string {
	switch e {
	case 0:
		return "Never"
	case 1:
		return "Ask"
	case 2:
		return "Always"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _UserCFrame struct{}

func (e _UserCFrame) Type() string {
	return "Enum"
}
func (e _UserCFrame) String() string {
	return "Enum.UserCFrame"
}
func (e _UserCFrame) Copy() rbx.Value {
	return e
}
func (e _UserCFrame) Name() string {
	return "UserCFrame"
}
func (e _UserCFrame) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		UserCFrame(0),
		UserCFrame(1),
		UserCFrame(2),
	}
}
func (e _UserCFrame) Item(name string) rbx.EnumItem {
	switch name {
	case "Head":
		return UserCFrame(0)
	case "LeftHand":
		return UserCFrame(1)
	case "RightHand":
		return UserCFrame(2)
	}
	return nil
}

type UserCFrame uint

func (e UserCFrame) Type() string {
	return "Enum.UserCFrame"
}
func (e UserCFrame) String() string {
	return "Enum.UserCFrame." + e.Name()
}
func (e UserCFrame) Copy() rbx.Value {
	return e
}
func (e UserCFrame) Enum() rbx.Enum {
	return _UserCFrame{}
}
func (e UserCFrame) Value() int {
	return int(e)
}
func (e UserCFrame) Name() string {
	switch e {
	case 0:
		return "Head"
	case 1:
		return "LeftHand"
	case 2:
		return "RightHand"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _UserInputState struct{}

func (e _UserInputState) Type() string {
	return "Enum"
}
func (e _UserInputState) String() string {
	return "Enum.UserInputState"
}
func (e _UserInputState) Copy() rbx.Value {
	return e
}
func (e _UserInputState) Name() string {
	return "UserInputState"
}
func (e _UserInputState) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		UserInputState(0),
		UserInputState(1),
		UserInputState(2),
		UserInputState(3),
		UserInputState(4),
	}
}
func (e _UserInputState) Item(name string) rbx.EnumItem {
	switch name {
	case "Begin":
		return UserInputState(0)
	case "Change":
		return UserInputState(1)
	case "End":
		return UserInputState(2)
	case "Cancel":
		return UserInputState(3)
	case "None":
		return UserInputState(4)
	}
	return nil
}

type UserInputState uint

func (e UserInputState) Type() string {
	return "Enum.UserInputState"
}
func (e UserInputState) String() string {
	return "Enum.UserInputState." + e.Name()
}
func (e UserInputState) Copy() rbx.Value {
	return e
}
func (e UserInputState) Enum() rbx.Enum {
	return _UserInputState{}
}
func (e UserInputState) Value() int {
	return int(e)
}
func (e UserInputState) Name() string {
	switch e {
	case 0:
		return "Begin"
	case 1:
		return "Change"
	case 2:
		return "End"
	case 3:
		return "Cancel"
	case 4:
		return "None"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _UserInputType struct{}

func (e _UserInputType) Type() string {
	return "Enum"
}
func (e _UserInputType) String() string {
	return "Enum.UserInputType"
}
func (e _UserInputType) Copy() rbx.Value {
	return e
}
func (e _UserInputType) Name() string {
	return "UserInputType"
}
func (e _UserInputType) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		UserInputType(0),
		UserInputType(1),
		UserInputType(2),
		UserInputType(3),
		UserInputType(4),
		UserInputType(7),
		UserInputType(8),
		UserInputType(9),
		UserInputType(10),
		UserInputType(11),
		UserInputType(12),
		UserInputType(13),
		UserInputType(14),
		UserInputType(15),
		UserInputType(16),
		UserInputType(17),
		UserInputType(18),
		UserInputType(19),
		UserInputType(20),
		UserInputType(21),
		UserInputType(22),
	}
}
func (e _UserInputType) Item(name string) rbx.EnumItem {
	switch name {
	case "MouseButton1":
		return UserInputType(0)
	case "MouseButton2":
		return UserInputType(1)
	case "MouseButton3":
		return UserInputType(2)
	case "MouseWheel":
		return UserInputType(3)
	case "MouseMovement":
		return UserInputType(4)
	case "Touch":
		return UserInputType(7)
	case "Keyboard":
		return UserInputType(8)
	case "Focus":
		return UserInputType(9)
	case "Accelerometer":
		return UserInputType(10)
	case "Gyro":
		return UserInputType(11)
	case "Gamepad1":
		return UserInputType(12)
	case "Gamepad2":
		return UserInputType(13)
	case "Gamepad3":
		return UserInputType(14)
	case "Gamepad4":
		return UserInputType(15)
	case "Gamepad5":
		return UserInputType(16)
	case "Gamepad6":
		return UserInputType(17)
	case "Gamepad7":
		return UserInputType(18)
	case "Gamepad8":
		return UserInputType(19)
	case "TextInput":
		return UserInputType(20)
	case "InputMethod":
		return UserInputType(21)
	case "None":
		return UserInputType(22)
	}
	return nil
}

type UserInputType uint

func (e UserInputType) Type() string {
	return "Enum.UserInputType"
}
func (e UserInputType) String() string {
	return "Enum.UserInputType." + e.Name()
}
func (e UserInputType) Copy() rbx.Value {
	return e
}
func (e UserInputType) Enum() rbx.Enum {
	return _UserInputType{}
}
func (e UserInputType) Value() int {
	return int(e)
}
func (e UserInputType) Name() string {
	switch e {
	case 0:
		return "MouseButton1"
	case 1:
		return "MouseButton2"
	case 2:
		return "MouseButton3"
	case 3:
		return "MouseWheel"
	case 4:
		return "MouseMovement"
	case 7:
		return "Touch"
	case 8:
		return "Keyboard"
	case 9:
		return "Focus"
	case 10:
		return "Accelerometer"
	case 11:
		return "Gyro"
	case 12:
		return "Gamepad1"
	case 13:
		return "Gamepad2"
	case 14:
		return "Gamepad3"
	case 15:
		return "Gamepad4"
	case 16:
		return "Gamepad5"
	case 17:
		return "Gamepad6"
	case 18:
		return "Gamepad7"
	case 19:
		return "Gamepad8"
	case 20:
		return "TextInput"
	case 21:
		return "InputMethod"
	case 22:
		return "None"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _VRTouchpad struct{}

func (e _VRTouchpad) Type() string {
	return "Enum"
}
func (e _VRTouchpad) String() string {
	return "Enum.VRTouchpad"
}
func (e _VRTouchpad) Copy() rbx.Value {
	return e
}
func (e _VRTouchpad) Name() string {
	return "VRTouchpad"
}
func (e _VRTouchpad) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		VRTouchpad(0),
		VRTouchpad(1),
	}
}
func (e _VRTouchpad) Item(name string) rbx.EnumItem {
	switch name {
	case "Left":
		return VRTouchpad(0)
	case "Right":
		return VRTouchpad(1)
	}
	return nil
}

type VRTouchpad uint

func (e VRTouchpad) Type() string {
	return "Enum.VRTouchpad"
}
func (e VRTouchpad) String() string {
	return "Enum.VRTouchpad." + e.Name()
}
func (e VRTouchpad) Copy() rbx.Value {
	return e
}
func (e VRTouchpad) Enum() rbx.Enum {
	return _VRTouchpad{}
}
func (e VRTouchpad) Value() int {
	return int(e)
}
func (e VRTouchpad) Name() string {
	switch e {
	case 0:
		return "Left"
	case 1:
		return "Right"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _VRTouchpadMode struct{}

func (e _VRTouchpadMode) Type() string {
	return "Enum"
}
func (e _VRTouchpadMode) String() string {
	return "Enum.VRTouchpadMode"
}
func (e _VRTouchpadMode) Copy() rbx.Value {
	return e
}
func (e _VRTouchpadMode) Name() string {
	return "VRTouchpadMode"
}
func (e _VRTouchpadMode) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		VRTouchpadMode(0),
		VRTouchpadMode(1),
		VRTouchpadMode(2),
	}
}
func (e _VRTouchpadMode) Item(name string) rbx.EnumItem {
	switch name {
	case "Touch":
		return VRTouchpadMode(0)
	case "VirtualThumbstick":
		return VRTouchpadMode(1)
	case "ABXY":
		return VRTouchpadMode(2)
	}
	return nil
}

type VRTouchpadMode uint

func (e VRTouchpadMode) Type() string {
	return "Enum.VRTouchpadMode"
}
func (e VRTouchpadMode) String() string {
	return "Enum.VRTouchpadMode." + e.Name()
}
func (e VRTouchpadMode) Copy() rbx.Value {
	return e
}
func (e VRTouchpadMode) Enum() rbx.Enum {
	return _VRTouchpadMode{}
}
func (e VRTouchpadMode) Value() int {
	return int(e)
}
func (e VRTouchpadMode) Name() string {
	switch e {
	case 0:
		return "Touch"
	case 1:
		return "VirtualThumbstick"
	case 2:
		return "ABXY"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _VerticalAlignment struct{}

func (e _VerticalAlignment) Type() string {
	return "Enum"
}
func (e _VerticalAlignment) String() string {
	return "Enum.VerticalAlignment"
}
func (e _VerticalAlignment) Copy() rbx.Value {
	return e
}
func (e _VerticalAlignment) Name() string {
	return "VerticalAlignment"
}
func (e _VerticalAlignment) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		VerticalAlignment(0),
		VerticalAlignment(1),
		VerticalAlignment(2),
	}
}
func (e _VerticalAlignment) Item(name string) rbx.EnumItem {
	switch name {
	case "Center":
		return VerticalAlignment(0)
	case "Top":
		return VerticalAlignment(1)
	case "Bottom":
		return VerticalAlignment(2)
	}
	return nil
}

type VerticalAlignment uint

func (e VerticalAlignment) Type() string {
	return "Enum.VerticalAlignment"
}
func (e VerticalAlignment) String() string {
	return "Enum.VerticalAlignment." + e.Name()
}
func (e VerticalAlignment) Copy() rbx.Value {
	return e
}
func (e VerticalAlignment) Enum() rbx.Enum {
	return _VerticalAlignment{}
}
func (e VerticalAlignment) Value() int {
	return int(e)
}
func (e VerticalAlignment) Name() string {
	switch e {
	case 0:
		return "Center"
	case 1:
		return "Top"
	case 2:
		return "Bottom"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _VerticalScrollBarPosition struct{}

func (e _VerticalScrollBarPosition) Type() string {
	return "Enum"
}
func (e _VerticalScrollBarPosition) String() string {
	return "Enum.VerticalScrollBarPosition"
}
func (e _VerticalScrollBarPosition) Copy() rbx.Value {
	return e
}
func (e _VerticalScrollBarPosition) Name() string {
	return "VerticalScrollBarPosition"
}
func (e _VerticalScrollBarPosition) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		VerticalScrollBarPosition(1),
		VerticalScrollBarPosition(0),
	}
}
func (e _VerticalScrollBarPosition) Item(name string) rbx.EnumItem {
	switch name {
	case "Left":
		return VerticalScrollBarPosition(1)
	case "Right":
		return VerticalScrollBarPosition(0)
	}
	return nil
}

type VerticalScrollBarPosition uint

func (e VerticalScrollBarPosition) Type() string {
	return "Enum.VerticalScrollBarPosition"
}
func (e VerticalScrollBarPosition) String() string {
	return "Enum.VerticalScrollBarPosition." + e.Name()
}
func (e VerticalScrollBarPosition) Copy() rbx.Value {
	return e
}
func (e VerticalScrollBarPosition) Enum() rbx.Enum {
	return _VerticalScrollBarPosition{}
}
func (e VerticalScrollBarPosition) Value() int {
	return int(e)
}
func (e VerticalScrollBarPosition) Name() string {
	switch e {
	case 1:
		return "Left"
	case 0:
		return "Right"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _VibrationMotor struct{}

func (e _VibrationMotor) Type() string {
	return "Enum"
}
func (e _VibrationMotor) String() string {
	return "Enum.VibrationMotor"
}
func (e _VibrationMotor) Copy() rbx.Value {
	return e
}
func (e _VibrationMotor) Name() string {
	return "VibrationMotor"
}
func (e _VibrationMotor) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		VibrationMotor(0),
		VibrationMotor(1),
		VibrationMotor(2),
		VibrationMotor(3),
		VibrationMotor(4),
		VibrationMotor(5),
	}
}
func (e _VibrationMotor) Item(name string) rbx.EnumItem {
	switch name {
	case "Large":
		return VibrationMotor(0)
	case "Small":
		return VibrationMotor(1)
	case "LeftTrigger":
		return VibrationMotor(2)
	case "RightTrigger":
		return VibrationMotor(3)
	case "LeftHand":
		return VibrationMotor(4)
	case "RightHand":
		return VibrationMotor(5)
	}
	return nil
}

type VibrationMotor uint

func (e VibrationMotor) Type() string {
	return "Enum.VibrationMotor"
}
func (e VibrationMotor) String() string {
	return "Enum.VibrationMotor." + e.Name()
}
func (e VibrationMotor) Copy() rbx.Value {
	return e
}
func (e VibrationMotor) Enum() rbx.Enum {
	return _VibrationMotor{}
}
func (e VibrationMotor) Value() int {
	return int(e)
}
func (e VibrationMotor) Name() string {
	switch e {
	case 0:
		return "Large"
	case 1:
		return "Small"
	case 2:
		return "LeftTrigger"
	case 3:
		return "RightTrigger"
	case 4:
		return "LeftHand"
	case 5:
		return "RightHand"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _VideoQualitySettings struct{}

func (e _VideoQualitySettings) Type() string {
	return "Enum"
}
func (e _VideoQualitySettings) String() string {
	return "Enum.VideoQualitySettings"
}
func (e _VideoQualitySettings) Copy() rbx.Value {
	return e
}
func (e _VideoQualitySettings) Name() string {
	return "VideoQualitySettings"
}
func (e _VideoQualitySettings) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		VideoQualitySettings(0),
		VideoQualitySettings(1),
		VideoQualitySettings(2),
	}
}
func (e _VideoQualitySettings) Item(name string) rbx.EnumItem {
	switch name {
	case "LowResolution":
		return VideoQualitySettings(0)
	case "MediumResolution":
		return VideoQualitySettings(1)
	case "HighResolution":
		return VideoQualitySettings(2)
	}
	return nil
}

type VideoQualitySettings uint

func (e VideoQualitySettings) Type() string {
	return "Enum.VideoQualitySettings"
}
func (e VideoQualitySettings) String() string {
	return "Enum.VideoQualitySettings." + e.Name()
}
func (e VideoQualitySettings) Copy() rbx.Value {
	return e
}
func (e VideoQualitySettings) Enum() rbx.Enum {
	return _VideoQualitySettings{}
}
func (e VideoQualitySettings) Value() int {
	return int(e)
}
func (e VideoQualitySettings) Name() string {
	switch e {
	case 0:
		return "LowResolution"
	case 1:
		return "MediumResolution"
	case 2:
		return "HighResolution"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _VirtualInputMode struct{}

func (e _VirtualInputMode) Type() string {
	return "Enum"
}
func (e _VirtualInputMode) String() string {
	return "Enum.VirtualInputMode"
}
func (e _VirtualInputMode) Copy() rbx.Value {
	return e
}
func (e _VirtualInputMode) Name() string {
	return "VirtualInputMode"
}
func (e _VirtualInputMode) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		VirtualInputMode(1),
		VirtualInputMode(2),
		VirtualInputMode(0),
	}
}
func (e _VirtualInputMode) Item(name string) rbx.EnumItem {
	switch name {
	case "Recording":
		return VirtualInputMode(1)
	case "Playing":
		return VirtualInputMode(2)
	case "None":
		return VirtualInputMode(0)
	}
	return nil
}

type VirtualInputMode uint

func (e VirtualInputMode) Type() string {
	return "Enum.VirtualInputMode"
}
func (e VirtualInputMode) String() string {
	return "Enum.VirtualInputMode." + e.Name()
}
func (e VirtualInputMode) Copy() rbx.Value {
	return e
}
func (e VirtualInputMode) Enum() rbx.Enum {
	return _VirtualInputMode{}
}
func (e VirtualInputMode) Value() int {
	return int(e)
}
func (e VirtualInputMode) Name() string {
	switch e {
	case 1:
		return "Recording"
	case 2:
		return "Playing"
	case 0:
		return "None"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _WaterDirection struct{}

func (e _WaterDirection) Type() string {
	return "Enum"
}
func (e _WaterDirection) String() string {
	return "Enum.WaterDirection"
}
func (e _WaterDirection) Copy() rbx.Value {
	return e
}
func (e _WaterDirection) Name() string {
	return "WaterDirection"
}
func (e _WaterDirection) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		WaterDirection(0),
		WaterDirection(1),
		WaterDirection(2),
		WaterDirection(3),
		WaterDirection(4),
		WaterDirection(5),
	}
}
func (e _WaterDirection) Item(name string) rbx.EnumItem {
	switch name {
	case "NegX":
		return WaterDirection(0)
	case "X":
		return WaterDirection(1)
	case "NegY":
		return WaterDirection(2)
	case "Y":
		return WaterDirection(3)
	case "NegZ":
		return WaterDirection(4)
	case "Z":
		return WaterDirection(5)
	}
	return nil
}

type WaterDirection uint

func (e WaterDirection) Type() string {
	return "Enum.WaterDirection"
}
func (e WaterDirection) String() string {
	return "Enum.WaterDirection." + e.Name()
}
func (e WaterDirection) Copy() rbx.Value {
	return e
}
func (e WaterDirection) Enum() rbx.Enum {
	return _WaterDirection{}
}
func (e WaterDirection) Value() int {
	return int(e)
}
func (e WaterDirection) Name() string {
	switch e {
	case 0:
		return "NegX"
	case 1:
		return "X"
	case 2:
		return "NegY"
	case 3:
		return "Y"
	case 4:
		return "NegZ"
	case 5:
		return "Z"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _WaterForce struct{}

func (e _WaterForce) Type() string {
	return "Enum"
}
func (e _WaterForce) String() string {
	return "Enum.WaterForce"
}
func (e _WaterForce) Copy() rbx.Value {
	return e
}
func (e _WaterForce) Name() string {
	return "WaterForce"
}
func (e _WaterForce) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		WaterForce(0),
		WaterForce(1),
		WaterForce(2),
		WaterForce(3),
		WaterForce(4),
	}
}
func (e _WaterForce) Item(name string) rbx.EnumItem {
	switch name {
	case "None":
		return WaterForce(0)
	case "Small":
		return WaterForce(1)
	case "Medium":
		return WaterForce(2)
	case "Strong":
		return WaterForce(3)
	case "Max":
		return WaterForce(4)
	}
	return nil
}

type WaterForce uint

func (e WaterForce) Type() string {
	return "Enum.WaterForce"
}
func (e WaterForce) String() string {
	return "Enum.WaterForce." + e.Name()
}
func (e WaterForce) Copy() rbx.Value {
	return e
}
func (e WaterForce) Enum() rbx.Enum {
	return _WaterForce{}
}
func (e WaterForce) Value() int {
	return int(e)
}
func (e WaterForce) Name() string {
	switch e {
	case 0:
		return "None"
	case 1:
		return "Small"
	case 2:
		return "Medium"
	case 3:
		return "Strong"
	case 4:
		return "Max"
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////

type _ZIndexBehavior struct{}

func (e _ZIndexBehavior) Type() string {
	return "Enum"
}
func (e _ZIndexBehavior) String() string {
	return "Enum.ZIndexBehavior"
}
func (e _ZIndexBehavior) Copy() rbx.Value {
	return e
}
func (e _ZIndexBehavior) Name() string {
	return "ZIndexBehavior"
}
func (e _ZIndexBehavior) Items() []rbx.EnumItem {
	return []rbx.EnumItem{
		ZIndexBehavior(0),
		ZIndexBehavior(1),
	}
}
func (e _ZIndexBehavior) Item(name string) rbx.EnumItem {
	switch name {
	case "Global":
		return ZIndexBehavior(0)
	case "Sibling":
		return ZIndexBehavior(1)
	}
	return nil
}

type ZIndexBehavior uint

func (e ZIndexBehavior) Type() string {
	return "Enum.ZIndexBehavior"
}
func (e ZIndexBehavior) String() string {
	return "Enum.ZIndexBehavior." + e.Name()
}
func (e ZIndexBehavior) Copy() rbx.Value {
	return e
}
func (e ZIndexBehavior) Enum() rbx.Enum {
	return _ZIndexBehavior{}
}
func (e ZIndexBehavior) Value() int {
	return int(e)
}
func (e ZIndexBehavior) Name() string {
	switch e {
	case 0:
		return "Global"
	case 1:
		return "Sibling"
	}
	return ""
}
